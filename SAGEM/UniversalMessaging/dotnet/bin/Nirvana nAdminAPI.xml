<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nirvana nAdminAPI</name>
    </assembly>
    <members>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nACL">
            
             <summary>represents a list of nACLEntry classes used by the Nirvana Realm server to control access
              to secured objects such as Realms, Channels and Queues. </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.find(System.String)">
             
              <summary>Finds an nACLEntry within the list which matches this subject. If it could
             not find a match it will throw nACLEntryNotFoundException
              </summary>
             <param name="subject"> String representation of the subject (user@host) </param>
             <returns> the nACLEntry which matched </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntryNotFoundException"> thrown if acl entry is not found </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if acl entry is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.contains(System.String)">
             
              <summary>Returns whether an nACLEntry exists the nACL which matches this subject.
              </summary>
             <param name="subject"> String representation of the subject (user@host) </param>
             <returns> whether a matching acl entry exists </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if acl entry is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.find(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Finds an nACLEntry which matches the passed in nACLEntry. The comparision is done
             on the subject only and not the permissions since the subject must be unique in the
             list.
             If it could not find a match it will throw nACLEntryNotFoundException
              </summary>
             <param name="entry"> A nACLEntry to locate within the list </param>
             <returns> the nACLEntry which matches </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntryNotFoundException"> thrown if acl entry is not found </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if acl entry is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.getEntries">
             
              <summary>Returns an IEnumerator of nACLEntry objects which make up the list. This
             is useful to examine/walk the list.
              </summary>
             <returns> IEnumerator of nACLEntry objects </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.get(System.Int32)">
             
              <summary>Returns the nACLEntry specified by the index parameter
             is useful to examine/walk the list.
              </summary>
             <param name="index"> the index position of the nACLEntry to be retrieved </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if the index specified is out of range or less than 0. </exception>
             <returns> the nACLEntry object at the specified index </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.size">
             
              <summary>Returns the number of entries within the list
              </summary>
             <returns> int size of this list </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.remove(System.String)">
             
              <summary>Removes the nACLEntry which matches the subject specified by the string passed in.
             Currently no wild card removals are supported so only a direct match will result in
             the removal of the nACLEntry
              </summary>
             <param name="subject"> String representation of the subject (user@host) </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntryNotFoundException"> thrown if acl entry is not found </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if acl entry is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.remove(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Removes the nACLEntry which matches the subject specified the nACLEntry object.
              </summary>
             <param name="entry"> The nACLEntry to be removed from the list </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntryNotFoundException"> thrown if acl entry is not found </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if acl entry is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.removeAll">
             
              <summary>Removes ALL of the nACLEntry objects from the list.
             WARNING: if you commit an empty nACL you will effectivily block ALL access
             to the secure object. There is no way to override this so be careful when calling
             this function that you do actually add nACLEntry objects to this to at least allow
             the administrator back in </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.replace(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Replaces the existing nACLEntry priviliges with the passed nACLEntry. Useful for changing
             permissions for a subject within a list
              </summary>
             <param name="entry"> The nACLEntry containing the updated priviliges </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntryNotFoundException"> Only if the entry could not be found </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if the entry is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACL.add(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Adds a new nACLEntry into the list.
              </summary>
             <param name="entry"> The new nACLEntry to add to the list </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nDuplicateACLEntryException"> If the entry already exists in the list </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if the entry is null </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> Unable to perform the requested operation, check the message for further information </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry">
            
             <summary> * Contains the mapping between a subject User@Host and the priviliges they can perform
             * on a secured object such as a Realm, Channel or Queue.
             *
             * On construction of these objects the name string can be set to "*" meaning All users and
             * the host cal also be set to "*". For example, all users from a host called test.com can be configured
             * such as *@test.com or a more unsecure method for allowing all administrators access would be
             * administrator@* (Not recommeded). </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.#ctor(System.String,System.String)">
             
              <summary> * Creates a new nACLEntry with the subject being name@host. There are no
              * default permissions set so this subject can perform NO actions on the secured objects
              * </summary>
              * <param name="name"> Username/Token for the subject </param>
              * <param name="host"> the host they can connect from </param>
              * <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.#ctor(System.String)">
             
              <summary> * Creates a new nACLEntry with the string argument of the form name@host. There are no
              * default permissions set so this subject can perform NO actions on the secured objects
              * </summary>
              * <param name="subject"> of the form user@host </param>
              * <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.#ctor(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup)">
            <summary>
            Creates a new nACLEntry with the given Security Group
            There are no default permissions set so this subject can perform NO actions on the secured objects
            </summary>
            <param name="grp">Security group used to form this ACL entry</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.#ctor(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup,System.Collections.BitArray)">
            <summary>
            Creates a new nACLEntry with the given Security Group. The subject will have permissions defined in the input BitArray.
            </summary>
            <param name="grp">Security group used to form this ACL entry</param>
            <param name="bs">BitArray containing permissions for this subject</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.#ctor(com.pcbsys.foundation.security.fAclGroup,System.Collections.BitArray)">
            <summary>
            Creates a new nACLEntry with the given ACL Group. The subject will have permissions defined in the input BitArray.
            </summary>
            <param name="grp">ACL group used to form this ACL entry</param>
            <param name="bs">BitArray containing permissions for this subject</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.getSubject">
             
              <summary> * This method returns the completed subject User@Host
              * </summary>
              * <returns> String representation of the subject </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.getHost">
             
              <summary> * Returns the host portion of the subject
              * </summary>
              * <returns> The hostname </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.canModify">
             
              <summary> * Can this subject modify acl entries in a secure object
              * </summary>
              * <returns> a boolean indicating the current permission status for this user </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.setModify(System.Boolean)">
             
              <summary> * Changes the current setting for this subject to allow/disallow modifing ACL.
              *
              * WARNING: Should not be given to normal subjects but only to subjects which need
              * to administor the Secure Object.
              * </summary>
              * <param name="val"> boolean specifying the permission status </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.canList">
             
              <summary> * Can this subject list the contents of an ACL
              * </summary>
              * <returns> a boolean indicating the current permission status for this user </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.setList(System.Boolean)">
             
              <summary> * Changes the current setting for this user to allow/disallow ACL listing
              *
              * WARNING: Should be used in conjuction with ModifyACL
              * </summary>
              * <param name="val"> boolean specifying the permission status </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.hasFullPrivileges">
             
              <summary> * Does this csubject have full privileges for the secure object. This privlege enables the
              * subject to perform ANY action against this secure object if set to true.
              * </summary>
              * <returns> a boolean indicating the current permission status for this user </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.setFullPrivileges(System.Boolean)">
             
              <summary> * Sets the subject to have full privileges for this secure object allowing the subject complete
              * control over the secure object
              *
              * WARNING: Use with great caution. Should only set what is required rather than this
              * entry. By default the realm server will automatically set this for the default administrator
              * </summary>
              * <param name="val"> true for full, false otherwise </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.lessThan(System.Int64)">
             
              <summary> * Required as part of the SortedObject interface. For internal use only </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.Equals(System.Int64)">
             
              <summary> * Required as part of the SortedObject interface. For internal use only </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.lessThan(System.Object)">
             
              <summary> * Used to compares this Object with another to determine sorting position
              * </summary>
              * <param name="item"> Object to compare </param>
              * <returns> True if this object is less then the passed in object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.Equals(System.Object)">
             
              <summary> * Used to compares this Object with another to determine sorting position. For internal
              * use only
              * </summary>
              * <param name="item"> Object to compare </param>
              * <returns> True if this object is equal to the passed in object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.setPermissions(System.Int64)">
            <summary>
            This method is for internal use only
            </summary>
            <param name="permValue"></param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.getBitset">
            <summary>
            Get the bitset containing ACL permissions for this subject
            </summary>
            <returns>the bitset with ACL permissions</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.clone">
               
                <summary> * Returns a clone of the nChannelACLEntry </summary>
                * <returns> a clone of the current object </returns>
                
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntry.isGroup">
            <summary>
            Returns true if subject of this ACL entry is a group
            </summary>
            <returns>bool True if subject is a group, False otherwise</returns>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nACLEntry.Name">
             
              <summary> * Returns the name of the ACLEntry
              * </summary>
              * <returns> String name </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nACLEntryNotFoundException">
            
             <summary> represents the exception class that is thrown when
              an acl entry is not found when an operation is attempted on it </summary>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException">
            
             <summary> represents the base class for all admin API exceptions </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException.#ctor(System.String)">
             
              <summary>Creates the exception with the specified message
              </summary>
             <param name="msg"> Message string </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntryNotFoundException.#ctor">
            
               <summary>Creates the exception with the default message "ACL Entry not found for the specified object"
               </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nACLEntryNotFoundException.#ctor(System.String)">
            
               <summary>Creates the exception with the specified message
               </summary>
              <param name="msg"> Message string </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException">
            
             <summary> represents the exception class that is thrown when
              an illegal argument is passed into a method </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException.#ctor">
            
               <summary>Creates the exception with the default message "Illegal argument passed"
               </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException.#ctor(System.String)">
            
               <summary>Creates the exception with the specified message
               </summary>
              <param name="msg"> Message string </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nAdminSecurityException">
            
             <summary> represents the exception class that is thrown when
              attempted operations are not permitted. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAdminSecurityException.#ctor">
            
               <summary>Creates the exception with the default message "Admin security exception generated for attempted operation"
               </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAdminSecurityException.#ctor(System.String)">
            
               <summary>Creates the exception with the specified message
               </summary>
              <param name="msg"> Message string </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nAuditEvent">
            
             <summary>This class contains information for realm auditing.
             
              The type of information contained is for :
             
                 Realms / Channels / Queues / ACLs / Service / Join
             
                   specifically operation such as :
             
                 Add / Delete / Remove
             
                   and 'who' i.e. the subject that performed the operation </summary>
             
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sRealm">
             
              <summary>Indicates a Realm audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sChannel">
             
              <summary>Indicates a channel audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sQueue">
             
              <summary>Indicates a queue audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sService">
             
              <summary>Indicates a service audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sJoin">
             
              <summary>Indicates a join audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sRealmACL">
             
              <summary>Indicates a Realm ACL audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sQueueACL">
             
              <summary>Indicates a Queue ACL audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sChanACL">
             
              <summary>Indicates a Channel ACL audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sServiceACL">
             
              <summary>Indicates a service ACL audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sRealmSuccess">
             
              <summary>Indicates a successful realm audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sRealmFailure">
             
              <summary>Indicates a failed realm audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sChannelSuccess">
             
              <summary>Indicates a successful channel audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sChannelFailure">
             
              <summary>Indicates a failed channel audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sQueueSuccess">
             
              <summary>Indicates a successful queue audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sQueueFailure">
             
              <summary>Indicates a failed queue audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sServiceSuccess">
             
              <summary>Indicates a successful service audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sServiceFailure">
             
              <summary>Indicates a failed service audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sJoinSuccess">
             
              <summary>Indicates a successful join audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sJoinFailure">
             
              <summary>Indicates a failed join audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sInterface">
             
              <summary>Indicates an Interface audit object type </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sModify">
             
              <summary>Indicates a modified operation </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sDelete">
             
              <summary>Indicates a delete operation </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sChange">
             
              <summary>Indicates a changed operation </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sAccess">
             
              <summary>Indicates an access operation </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sStart">
             
              <summary>Indicates a start operation </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.sStop">
             
              <summary>Indicates a stop operation </summary>
              
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.objectStrings" -->
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getSubject">
             
              <summary>Returns the subject on which the audit event is reporting on
              </summary>
             <returns> String subject of username@host </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getTimestamp">
             
              <summary>Returns the time stamp that the event took place
              </summary>
             <returns> A String timestamp </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getTimestampDate">
             
              <summary>Returns the time stamp that the event took place represented as a date </summary>
             <returns> a Date timestamp </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getObjectName">
             
              <summary>Returns the name of the object oin which the audit event is reporting on
              </summary>
             <returns> String object name </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getObjectType">
             
              <summary>Returns the int object type
              </summary>
             <returns> Int value representative of the object type </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getOperation">
             
              <summary>Returns the int operation type
              </summary>
             <returns> Int value of the operation being reported </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getOldValue">
             
              <summary>If applicable, returns the old value prior to the change. Only valid on a sChanged operation
              </summary>
             <returns> Old value as an nACLEntry object or null if not an sChaned operation </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getNewValue">
             
              <summary>If applicable, returns the new value after the change
              </summary>
             <returns> New value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getObjectString">
             
              <summary>Returns a string representing the object being reported
              </summary>
             <returns> String value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditEvent.getOperationString">
             
              <summary>Returns a string representing the operation being reported
              </summary>
             <returns> A string representation of the operation being reported </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nAuditListener">
            
             <summary>Classes that implement this interface can register with the nRealmNode.addAuditListener() to receive
              the realm's audit events. These events will contain information on who did what, to which objects and
              when these operations were performed. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nAuditListener.audit(com.pcbsys.nirvana.nAdminAPI.nAuditEvent)">
             
              <summary>This method is called by the nRealmNode to inform the user object of a new audit event. The event
             contains the date/time, the object name, the object type, the subject that performed the operation
             and values associated with the operation, such as acl bitmasks for before and after the operation
              </summary>
             <param name="event"> the audit event generated on the realm </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nBaseInterface">
            <summary>
            This class is for internal use only
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nBaseInterface.willAutostart">
            <summary> Will this interface automatically be started when the Realm Server starts </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nBaseInterface.setAutostart(System.Boolean)">
            <summary> Change the current Autostart status for this interface </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nBaseInterface.getURL">
            <summary> Get the URL that specifies this interface. It is made up from the protocol the adapter and port </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nBaseInterface.getAdapter">
            <summary> Get the adapter that this interface will use. Reserved interfaces are
                0.0.0.0 - Bind to all physical interfaces on the machine
                127.0.0.1 - Bind to local loopback </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nBaseInterface.getPort">
            <summary> Get the port that this interface will bind to at startup </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry">
            
             <summary>Extends the nACLEntry class to supply Channel/Queue specific security settings
             </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.#ctor(System.String,System.String)">
             
              <summary>Creates a new nChannelACLEntry for the name@host supplied. By default this
             subject has NO privileges and they must be set.
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
             <param name="name"> Name for the subject </param>
             <param name="host"> Host name for the subject </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.#ctor(System.String)">
             
              <summary>Creates a new nChannelACLEntry for the name@host supplied. By default this
             subject has NO privileges and they must be set.
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
             <param name="subject"> of the form user@host </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.#ctor(System.String,com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Creates a new nChannelACLEntry for the name@host supplied. By default this
             subject has NO privileges and they must be set.
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
             <param name="subject"> of the form user@host </param>
             <param name="copy"> An nACLEntry to copy the current permissions from </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.#ctor(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup)" -->
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.canWrite">
             
              <summary>Can this subject write to the Queue/Channel. If the secure object is a Channel it
             means the subject can publish to it, if it is a Queue the subject can push on to the
             queue.
              </summary>
             <returns> The current subject permission status as a boolean </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.setWrite(System.Boolean)">
             
              <summary>Allow/Disallow this subject from writing to the Channel/Queue
              </summary>
             <param name="val"> a Boolean flag indicating the subject's permission status </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.canRead">
             
              <summary>Can the subject read from the Queue/Channel. If true the subject can pop/peek a queue and subscribe
             to a channel
              </summary>
             <returns> The current subject permission status as a boolean </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.setRead(System.Boolean)">
             
              <summary>Allow/Disallow this subject from reading from the Channel/Queue
              </summary>
             <param name="val"> a Boolean flag indicating the subject's permission status </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.canPurge">
             
              <summary>Can this subject remove events from the Channel/Queue using the purge methods.
              </summary>
             <returns> The current subject permission status as a boolean </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.setPurge(System.Boolean)">
             
              <summary>Allow/Disallow this subject from purging events from the queue/channel
              </summary>
             <param name="val"> a Boolean flag indicating the subject's permission status </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.canPop">
             
              <summary>Can this subject POP events from a Queue. Since a POP is an atomic read/write operation since
             it removes the event from the queue. However a user can pop events but might not be permissioned
             to write events to the queue.
              </summary>
             <returns> The current subject permission status as a boolean </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.setPop(System.Boolean)">
             
              <summary>Allow/Disallow this subject from popping events from a queue
              </summary>
             <param name="val"> a Boolean flag indicating the subject's permission status </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.canGetLastEID">
             
              <summary>Can this subject get the last event id from the Channel. The Queue does not support this function
              </summary>
             <returns> The current subject permission status as a boolean </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.setGetLastEID(System.Boolean)">
             
              <summary>Allow/Disallow this subject from getting the last EID from the Channel
              </summary>
             <param name="val"> a Boolean flag indicating the subject's permission status </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.canUseNamedSubscription">
             
              <summary>Can this subject use a named subscription on the Channel.
              *
             When using a named subscription, the state of the last Event received by the subscription is kept by the Server.
              *
             If the Connection is dropped and restarted with the same name, the server will automatically start the subscription from where the last event received, without the user needing to supply an Event ID to start from.
              </summary>
             <returns> The current subject permission status as a boolean </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelACLEntry.setUseNamedSubscription(System.Boolean)">
             
              <summary>Allow/Disallow this subject from creating a named subscription to a Channel
              </summary>
             <param name="val"> a Boolean flag indicating the subject's permission status </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nChannelConnectionDetails">
            
             <summary>This class contains additional information about a channel connection. Typically a channel connection is a
              subscription from a client to a channel on a realm server. </summary>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails">
            
             <summary>This class contains the details about an individual connection. It extends the Observable class
              to allow a user program to be informed about changes to the statistics of the connection.
             </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getLastReceivedEvent">
             
              <summary>Returns a protocol description of the last event received from the connection
              </summary>
             <returns> a String containing the protocol description of the last event received </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getLastTransmittedEvent">
             
              <summary>Returns a protocol description of the last event transmitted from the connection
              </summary>
             <returns> a String containing the protocol description of the last event transmitted </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getTransimittedByteCount">
             
              <summary>Returns the number of bytes that this connection has transmitted to the remote client
              </summary>
             <returns> the number of bytes transmitted by this connection as a long </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getReceivedByteCount">
             
              <summary>Returns the number of bytes that this connection has received from the remote client
              </summary>
             <returns> Long count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getEventsReceived">
             
              <summary>Returns the number of events that this connection has received from the remote client
              </summary>
             <returns> a long representing the number of events received by this connection </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getTimeOfLastReceive">
             
              <summary>Returns the timestamp since the last received event
              </summary>
             <returns> a long representing the timestamp since the last received event </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getEventsTransmitted">
             
              <summary>Returns the number of events sent to the remote client
              </summary>
             <returns> a long representing the number of events transmitted by this connection </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getTimeOfLastTransmitt">
             
              <summary>Returns the number of milliseconds since the last event was sent
              </summary>
             <returns> a long representing the timestamp since the last transmitted event </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getQueueSize">
             
              <summary>This queue size is the internal server buffer where all events are pushed awaiting delivery
             A large number here or a number that is not moving maybe indicative of a slow or problematic
             connection.
              </summary>
             <returns> a long representing the queue size </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getProtocol">
             
              <summary>This method returns the protocol string, currently one of NSP, NHP, NSPS or NHPS.
              </summary>
             <returns> A String indicating the protocol used by this connection </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getSubject">
             
              <summary>Returns an array of strings that the connection used to authenticate with the server.
             The first entry is the primary principal and is the only one used in the ACL validation.
             The array will only contain more than one entry in a Client certificate validated SSL session
             which will use CN@HOST as the primary principal followed by the user supplied principal.
              </summary>
             <returns> A list of subjects as a String[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getId">
             
              <summary>Returns the unique connection ID used to identify this connection
              </summary>
             <returns> The connection ID as a String </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getUpTime">
             
              <summary>Returns the number of milliseconds that the connection has been active for
              </summary>
             <returns> a long representing the number of ms the server has been up </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getLatency">
             
              <summary>This field is updated by the client heartbeat and as such only changes when the server
             receives a heart beat from the client
              </summary>
             <returns> a int in milliseconds of the last request/response </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getBoundNodes">
             
              <summary>Returns an collection of nNodes that this connection is bound to.
              </summary>
             <returns> An IEnumerator of nNode objects that this connection is bound to. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getSelector(com.pcbsys.nirvana.nAdminAPI.nLeafNode)">
             
              <summary>Returns the Selector that the connection used to bind to a channel/queue
              </summary>
             <param name="leafNode"> The node being queried </param>
             <returns> the selector used for event filtering as a String
             </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> is thrown if leafNode is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.wasClosedByClient">
             
              <summary>This method will show that after this connection has received a delete callback, whether the close was
             initiated by the client. The client close is generated from the nSessionFactory.close(nSession) method. Other
             closes or disconnections will return false, since the client did not send a session close event.
              </summary>
             <returns> true if the client initiated the session close </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails.getRealmName">
            
             <summary> Returns the name of the realm </summary>
              <returns> the name of the realm </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelConnectionDetails.getSelector">
             
              <summary>Returns the message selector used for the connection. If no selector was used then this method returns null.
              </summary>
             <returns> Message selector used. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelConnectionDetails.getNamedSubscriber">
             
              <summary>If the connection used a nNamedObject then this method would return the name of the nNamedObject. This method
             can return null if there is no nNamedObject assiociated with this connection.
              </summary>
             <returns> String name of the nNamedObject </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nChannelConnectionDetails.getChannel">
             
              <summary>Get the name of the channel
              </summary>
             <returns> String name of the channel </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nClusterConnectionListener">
            
             <summary>Any class that implements this interface can be registered against a Nirvana Cluster node to receive
              notification when remote connections are made or dropped on any of the cluster realm node objects. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterConnectionListener.add(com.pcbsys.nirvana.nAdminAPI.nRealmNode,com.pcbsys.nirvana.nAdminAPI.nConnectionDetails)">
             
              <summary>This method is asynchronously called when a connection is established with a realm in the cluster.
              </summary>
             <param name="details"> The nConnectionDetails object that contains all the information about the connection added </param>
             <param name="realm"> The nRealmNode object that the connection was made to </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterConnectionListener.del(com.pcbsys.nirvana.nAdminAPI.nRealmNode,com.pcbsys.nirvana.nAdminAPI.nConnectionDetails)">
             
              <summary>This method is asynchronously called when the connection is lost or is no longer required on a realm within a cluster.
              </summary>
             <param name="details"> The nConnectionDetails object that contains all the information about the connection deleted </param>
             <param name="realm"> The nRealmNode object that the connection was lost from </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nClusterConversionStatus">
            
             <summary>Call to report the current status of a cluster conversion </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterConversionStatus.status(System.String,System.Int64,System.Int64,System.Int32)">
            
               <summary>Called with the status of the cluster conversion
               </summary>
              <param name="storeName"> Name of the store being converted</param>
              <param name="currentEvent"> The event on the store currently being converted </param>
              <param name="totalEvents"> Total number of events in the store</param>
              <param name="storesRemaining"> Number of stores remaining to be converted </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nClusterEventListener">
            
             <summary>Interface allowing client applications to receive cluster specific callbacks. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterEventListener.memberAdded(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
             
              <summary>Called with a new Nirvana Realm is added to the cluster.
              </summary>
             <param name="node"> nRealmNode object of the added realm. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterEventListener.memberDeleted(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
             
              <summary>Called when a Nirvana Realm is deleted from the cluster.
              </summary>
             <param name="node"> nRealmNode object of the deleted realm. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterEventListener.quorumReached(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
             
              <summary>Called when the cluster achieves quorum.
              </summary>
             <param name="masterNode"> nRealmNode of the master node for the cluster. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterEventListener.quorumLost">
             
              <summary>Called when the cluster has lost quorum. </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterEventListener.statusUpdate(com.pcbsys.nirvana.nAdminAPI.nClusterStatus)">
             
              <summary>Called when a Cluster status has changed.
              </summary>
             <param name="update"> nClusterStatus object containing the changes to the cluster. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterEventListener.stateChange(com.pcbsys.nirvana.nAdminAPI.nRealmNode,System.String)">
             
              <summary>Called when a member of the cluster changes state.
              </summary>
             <param name="node"> of the realm within the cluster. </param>
             <param name="newState"> new state that the node has achieved. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterEventListener.report(System.String,System.String)">
             
              <summary>Called when cluster log events are received.
              </summary>
             <param name="source"> Realm server where the log event came from. </param>
             <param name="message"> Cluster message text. </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration">
            
             <summary>This object is used to create/modify clusters.
              It contains the relavent information regarding a specific node
              to be added to the cluster. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration.#ctor(com.pcbsys.nirvana.client.nSessionAttributes)">
             
              <summary>Constructor using the nSessionAttributes to connect to the Nirvana Realm Server.
              </summary>
             <param name="sessionAttributes"> details of the server to connect to. </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to connect to the specified realm. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration.#ctor(System.String)">
             
              <summary>Constructor using a Nirvana Realm URL to connect to the Nirvana Realm server. </summary>
             <param name="rname"> to connect to. </param>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the rname is not valid. </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to connect to the specified realm. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration.#ctor(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
             
              <summary>Constructor using an exsiting nRealmNode. </summary>
             <param name="realmNode"> realm node object connected to the node to be added. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration.#ctor(com.pcbsys.nirvana.client.nSessionAttributes,System.Boolean)">
             
              <summary>Constructor using the nSessionAttributes to connect to the Nirvana Realm Server.
              </summary>
             <param name="sessionAttributes"> details of the server to connect to. </param>
             <param name="canBeMaster"> boolean if this node can be a master within the cluster. </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to connect to the specified realm. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration.#ctor(System.String,System.Boolean)">
             
              <summary>Constructor using a Nirvana Realm URL to connect to the Nirvana Realm server. </summary>
             <param name="rname"> to connect to. </param>
             <param name="canBeMaster"> boolean if this node can be a master within the cluster. </param>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the rname is not valid. </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to connect to the specified realm. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration.#ctor(com.pcbsys.nirvana.client.nSessionAttributes,System.Boolean,System.String)">
             
              <summary>Constructor using the nSessionAttributes to connect to the Nirvana Realm Server.
              </summary>
             <param name="sessionAttributes"> details of the server to connect to. </param>
             <param name="canBeMaster"> boolean if this node can be a master within the cluster. </param>
             <param name="username"> to use to connect to the remote realm with. </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to connect to the specified realm. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration.#ctor(System.String,System.Boolean,System.String)">
             
              <summary>Constructor using a Nirvana Realm URL to connect to the Nirvana Realm server. </summary>
             <param name="rname"> to connect to. </param>
             <param name="canBeMaster"> boolean if this node can be a master within the cluster. </param>
             <param name="username"> to use to connect to the remote realm with. </param>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the rname is not valid. </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to connect to the specified realm. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration.#ctor(com.pcbsys.nirvana.nAdminAPI.nRealmNode,System.Boolean)">
             
              <summary>Constructor using an exsiting nRealmNode. </summary>
             <param name="realmNode"> realm node object connected to the node to be added. </param>
             <param name="canBeMaster"> boolean if this node can be a master within the cluster. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration.closed(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
            
             <summary> Called when the nRealmNode is closed,  for internal use only. </summary>
             <param name="node"> The nRealmNode which has been closed </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nClusterNode">
            
             <summary>Contains the status and configuration of a Nirvana cluster.
              <p/>
              Each Nirvana cluster is made up of multiple Nirvana Realm servers and this group is given a name, the Cluster Name.
              The class supplies helper functions to query, create and delete clusters. </summary>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nContainer">
            
             <summary>This represents a node within the Nirvana Realm namespace which contains other nodes, such as a directory or another Realm.
              nContainer performs no functions other than containing the other nodes and being a placeholder in the namespace. </summary>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nNode">
            
             <summary>All classes that exist in the Nirvana Realm NameSpace extend this object. This object
              contains generic functions such as getName and getAboslutePath etc. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nNode.getAbsolutePath">
             
              <summary>This function walks the tree to the root to generate a fully qualified name for this node
              </summary>
             <returns> String full path and name </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nNode.getRelativePath(com.pcbsys.nirvana.nAdminAPI.nNode)">
             
              <summary>This method returns the relative path from this node to the nNode passed.
             Note. It is assumed that the nNode passed is a parent node, this method will not locate nodes in
             different parts of the tree.
              </summary>
             <returns> String path relative to the node passed in </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nNode.lessThan(System.Int64)">
             
              <summary>Needed as part of the SortedObject interface. </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nNode.Equals(System.Int64)">
             
              <summary>Needed as part of the SortedObject interface. </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nNode.lessThan(System.Object)">
             
              <summary>Compares this object with the passed object.
              </summary>
             <param name="item"> Object to compare against </param>
             <returns> True if this object is less than the passed object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nNode.Equals(System.Object)">
             
              <summary>Compares this object with the passed object
              </summary>
             <param name="item"> Object to compare against </param>
             <returns> True if they are equal </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nNode.getParent">
             
              <summary>Returns this nodes parent node. If this node is the root it will return null
              </summary>
             <returns> nNode of the parent </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nNode.Name">
             
              <summary>Returns the generic name of this node within the namespace
              </summary>
             <returns> String name </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.closed(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
            
             <summary> Called when the nRealmNode is closed,  for internal use only. </summary>
             <param name="node"> The nRealmNode which has been closed </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.getNodes">
             
              <summary>Returns an IEnumerator of all the nodes under this container. These could be
             other nContainer nodes, nLeafNode or nRealmNode objects.
              </summary>
             <returns> An IEnumerator of nNode objects under this container </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nContainer"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.getSize">
             
              <summary>Returns the number of nodes under this container.
              </summary>
             <returns> an int specifying the number of nodes under this container. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.getTotalNodes">
             
              <summary>Returns the total number of nodes within this container and all subsequent children by traversing the entire structure beneath this container node </summary>
             <returns> the total number of nodes counted beneath this container and it's children </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.findNode(System.String)">
             
              <summary>Given a name of the form /container/container/name this function will locate the name object and
             return it, or null if that object can not be found.
              </summary>
             <param name="name"> the name of the node to locate as a String </param>
             <returns> a nNode which could be a nRealmNode, nLeafNode or a nContainer </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if null is passed as the nNode </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nContainer"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.hasRealmAt(System.String)">
             
              <summary>Given a mount point this function will determine if this container contains a 
             mounted realm at the specified mount point
              </summary>
             <param name="name"> the mount point as a string as a String </param>
             <returns> true if containier contains realm at that mount point </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if null is passed as the nNode </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.getRealmAt(System.String)">
             
              <summary>Given a mount point this function will return  
             a realm if one exists at the specified mount point
              </summary>
             <param name="name"> the mount point as a string as a String </param>
             <returns> nRealmNode if containier contains realm at that mount point, else null </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if null is passed as the nNode </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.getNextSibling">
              
               <summary>Returns the next sibling node from this node's parent.
               </summary>
              <returns> a nNode which could be a nRealmNode, nLeafNode or a nContainer or
              null if there is no parent set or the current node is the last sibling. </returns>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nContainer"/>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.getNextSibling(System.Int32)">
            <summary> Returns the sibling at position idx from this nodes parent. </summary>
            <param name="idx"> positive int for the index of the sibling to return</param>
            <returns>a nNode which corresponds to the sibling of this node at the specified index. If there is no
                sibling at this index, this method will return null</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.findNode(com.pcbsys.nirvana.nAdminAPI.nNode)">
             
              <summary>Given a name of the form /container/container/name this function will locate the nNode object and
             return it, or null if that can not be found. This function applies to the part of the namespace
             relative to the current node. Currently wildcards are NOT supported.
              </summary>
             <param name="node"> the nNode to be located </param>
             <returns> a nNode which could be a nRealmNode, nLeafNode or a nContainer </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if null is passed as the nNode </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nContainer"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.findNode(com.pcbsys.nirvana.nAdminAPI.nNode,System.Boolean)">
             
              <summary>Given a name of the form /container/container/name this function will locate the name object and
             return it, or null if that can not be found. The searchChildren flag specifies whether the search
             should be performed on the current container only or children containers too respectively.
             This function applies to the part of the namespace  relative to the current node.
             Currently wildcards are NOT supported.
              </summary>
             <param name="node"> the nNode to be located </param>
             <param name="searchChildren"> specifies whether to traverse lower levels of the tree or not </param>
             <returns> a nNode which could be a nRealmNode, nLeafNode or a nContainer </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if null is passed as the nNode </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nContainer"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.addACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Adds a specific acl entry to all known nodes within the nContainer node.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to apply to all nodes under the container </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.addACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry,System.Boolean,System.Boolean,System.Boolean)">
             
              <summary>Adds a specific acl entry to all known nodes within the nContainer node.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to apply to all nodes under the container </param>
             <param name="allChannels"> if set then all channels within the container will have the acl applied </param>
             <param name="allQueues"> if set then all queues within the container will have the acl applied </param>
             <param name="allServices"> if set then all services within the container will have the acl applied </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.removeACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>removes a specific acl entry from all known nodes within the nContainer node.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to apply to all nodes under the container </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.removeACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry,System.Boolean,System.Boolean,System.Boolean)">
             
              <summary>removes a specific acl entry from all known nodes within the nContainer node.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to apply to all nodes under the container </param>
             <param name="allChannels"> if set then all channels within the container will have the acl removed </param>
             <param name="allQueues"> if set then all queues within the container will have the acl removed </param>
             <param name="allServices"> if set then all services within the container will have the acl removed </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.modACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>modifies a specific acl entry's permissions for all known nodes within the nContainer node.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to apply to all nodes under the container </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.modACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry,System.Boolean,System.Boolean,System.Boolean)">
             
              <summary>modifies a specific acl entry's permissions for all known nodes within the nContainer node.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to apply to all nodes under the container </param>
             <param name="allChannels"> if set then all channels within the container will have the acl modified </param>
             <param name="allQueues"> if set then all queues within the container will have the acl modified </param>
             <param name="allServices"> if set then all services within the container will have the acl modified </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.addACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Adds a list of acl entry to all known nodes within the nContainer node.
              </summary>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> If the supplied arguments are not valid</exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.addACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nNode[])">
             
              <summary>Adds a list acl entry to all nodes contained with in the array of nNodes
              </summary>
             <param name="acl"> An nACL entry containing the subject and permissions to apply to all nodes under the container </param>
            <param name="nodes"> An array of nNodes which will have this list of acl entries applied to. This list can contain nContainer nodes, nLeafNodes and nServiceNodes</param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> If the supplied arguments are not valid</exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.modACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Modifies a list of acl entry to all known nodes within the nContainer node.
              </summary>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> If the supplied arguments are not valid</exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.modACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nNode[])">
             
              <summary>Modifies a list of acl entry to all nodes contained with in the array of nNodes
              </summary>
             <param name="acl"> An nACL entry containing the subject and permissions to apply to all nodes int the list </param>
            <param name="nodes"> An array of nNodes which will have this list of acl entries applied to. This list can contain nContainer nodes, nLeafNodes and nServiceNodes</param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> If the supplied arguments are not valid</exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.removeACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Removes a list of acl entries from  all known nodes within the nContainer node.
              </summary>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> If the supplied arguments are not valid</exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.removeACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nNode[])">
             
              <summary>Removes a list of acl entries from all nodes contained with in the array of nNodes
              </summary>
             <param name="acl"> An nACL entry containing the subject and permissions to apply to all nodes under the container </param>
            <param name="nodes"> An array of nNodes which will have this list of acl entries applied to. This list can contain nContainer nodes, nLeafNodes and nServiceNodes</param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> If the supplied arguments are not valid</exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.setACL(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Replaces the existing ACL with the nACL supplied to all known nodes within the nContainer node.
              </summary>
             <param name="acl"> An nACL containing the nAclEntry objects that will be applied to all nodes under the container </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.setACL(com.pcbsys.nirvana.nAdminAPI.nACL,System.Boolean,System.Boolean,System.Boolean)">
             
              <summary>Replaces the existing ACL with the nACL supplied to all known nodes within the nContainer node.
              </summary>
             <param name="acl"> An nACL containing the nAclEntry objects that will be applied to all nodes under the container </param>
             <param name="allChannels"> if set then all channels within the container will have the acl added </param>
             <param name="allQueues"> if set then all queues within the container will have the acl added </param>
             <param name="allServices"> if set then all services within the container will have the acl added </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nContainer.getRealmNode">
            
             <summary> Get method for the realm node which acts as a container for this object </summary>
             <returns> an nRealmNode object, which is the parent of, or has a parent relationship in the node tree
                 to this object. If this object is a nRealmNode, it will return itself. If this object has no parent
                 object which is a realm node, it will return null. </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.closed(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
            
             <summary> Called when the nRealmNode is closed,  for internal use only. </summary>
             <param name="node"> The nRealmNode which has been closed </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getKnownClusters">
             
              <summary>Return an ArrayList of nCluster nodes.
              </summary>
             <returns> ArrayList of nodes. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.find(System.String)">
             
              <summary>Returns the nClusterNode for the specified clusterName.
              </summary>
             <param name="clusterName"> name of the cluster to lookup. </param>
             <returns> nClusterNode or null if no such cluster is found. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.create(System.String,com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration[])">
             
              <summary>Creates a new cluster with the supplied array of nClusterMemberConfiguration.
              </summary>
             <param name="clusterName"> Name of the new cluster. </param>
             <param name="realms">      array of nClusterMemberConfiguration to use to generate the cluster. </param>
             <returns> nClusterNode of the resulting cluster. </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if unable to connect to any of the realms. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            if no administration rights on any of the realms. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     if any of the realms fail to respond within the time out period. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     if any of the realms specify the same physical realm. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       if any of the realms sessions are paused. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  if any of the realms respond incorrectly. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">    if any of the realms are currently unreachable. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nNameSpaceConflictException">   if any of the realms conflict with anothers namespace. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException">       if any of the realms are not found. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.create(System.String,com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration[],System.Boolean)">
             
              <summary>Creates a new cluster with the supplied array of nClusterMemberConfiguration.
              </summary>
             <param name="clusterName"> Name of the new cluster. </param>
             <param name="realms">      array of nClusterMemberConfiguration to use to generate the cluster. </param>
             <param name="convertLocal"> Flag to indicate that the first master realm in the list should have the local stores converted to cluster wide stores </param>
             <returns> nClusterNode of the resulting cluster. </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if unable to connect to any of the realms. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            if no administration rights on any of the realms. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     if any of the realms fail to respond within the time out period. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     if any of the realms specify the same physical realm. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       if any of the realms sessions are paused. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  if any of the realms respond incorrectly. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">    if any of the realms are currently unreachable. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nNameSpaceConflictException">   if any of the realms conflict with anothers namespace. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException">       if any of the realms are not found. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.create(System.String,com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration[],System.Boolean,com.pcbsys.nirvana.nAdminAPI.nClusterConversionStatus)">
            
              <summary>Creates a new cluster with the supplied array of nClusterMemberConfiguration.
              </summary>
             <param name="clusterName"> Name of the new cluster. </param>
             <param name="realms">      array of nClusterMemberConfiguration to use to generate the cluster. </param>
             <param name="convertLocal"> Flag to indicate that the first master realm in the list should have the local stores converted to cluster wide stores </param>
             <param name="callback"> A callback to indicate the status of the cluster formation. Useful when converting an exisiting realm with stores into a cluster </param>
             <returns> nClusterNode of the resulting cluster. </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if unable to connect to any of the realms. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            if no administration rights on any of the realms. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     if any of the realms fail to respond within the time out period. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     if any of the realms specify the same physical realm. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       if any of the realms sessions are paused. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  if any of the realms respond incorrectly. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">    if any of the realms are currently unreachable. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nNameSpaceConflictException">   if any of the realms conflict with anothers namespace. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException">       if any of the realms are not found.
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nClusterConversionStatus"/>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getInstance(System.String)">
             
              <summary>Creates an instance of a nClusterNode for any cluster found on the realm specified by the rname.
              </summary>
             <param name="rname"> Nirvana Realm server URL </param>
             <returns> If any cluster has been defined on the specified realm, will return the nClusterNode relevant. </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException">       if the user has no administration priviliges </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the rname is not valid </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getInstance(com.pcbsys.nirvana.client.nSessionAttributes,System.String)">
             
              <summary>Creates an instance of a nClusterNode for any cluster found on the realm specified by the nSessionAttributes and the username.
              </summary>
             <param name="attr">     Session attributes to connect to the remote Nirvana Realm </param>
             <param name="username"> to use to authenticate </param>
             <returns> If any cluster has been defined on the specified realm, will return the nClusterNode relevant. </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to connect to the remote realm </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getInstance(com.pcbsys.nirvana.client.nSessionAttributes)">
             
              <summary>Creates an instance of a nClusterNode for any cluster found on the realm specified by the nSessionAttributes.
              </summary>
             <param name="attr"> Session attributes to connect to the remote Nirvana Realm </param>
             <returns> If any cluster has been defined on the specified realm, will return the nClusterNode relevant. </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to connect to the remote realm </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.close">
             
              <summary>Closes connections to all realms for the specified Nirvana Realm server. </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.addMember(com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration)">
             
              <summary>Adds a new node to an existing cluster.
              </summary>
             <param name="node"> details about the new node to add. </param>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if unable to connect to the new node. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     if the node fails to respond within the timout period. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            if the client has no administration priviliges on the node. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">          if any unexpected exceptions are raised. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.hasMember(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
             
              <summary>Tests to see if the supplied node is part of the cluster.
              </summary>
             <param name="node"> to test. </param>
             <returns> true if the node is defined in the cluster else false. </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">   if the client is not authorized. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> if the node is not connected. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.hasMember(System.String)">
             
              <summary>Tests to see if the supplied realm name is part of the cluster.
              </summary>
             <param name="realm"> name to test. </param>
             <returns> true if the realm is defined in the cluster else false. </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> if the node is not connected.</exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.canBeMaster(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
             
              <summary>Tests to see if the supplied node can be master of the cluster.
              </summary>
             <param name="node"> to test. </param>
             <returns> true if the node is defined as able to be master. </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">   if the client is not authorized. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> if the node is not connected. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.deleteMember(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
             
              <summary>Removes the specified realm from the cluster.
             <p/>
             The cluster must be running and all members of the cluster online for this to work correctly.
              </summary>
             <param name="node"> to remove from the cluster. </param>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">          if any nodes fail during the process. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if any of the nodes are not connected. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            if the client is not authorised. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.modifyMember(com.pcbsys.nirvana.nAdminAPI.nClusterMemberConfiguration)">
            
              <summary>Modifies the specified realm in the cluster as far as the CanBeMaster flag.
             <p/>
             The cluster must be running and all members of the cluster online for this to work correctly.
              </summary>
             <param name="config"> The ClusterMemberConfiguration object refering to the node and configuration </param>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">          if any nodes fail during the process. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if any of the nodes are not connected. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            if the client is not authorised. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.deleteMember(com.pcbsys.nirvana.nAdminAPI.nRealmNode,System.Boolean)">
             
              <summary>Removes the specified realm from the cluster.
             <p/>
             The cluster must be running and all members of the cluster online for this to work correctly.
              </summary>
             <param name="node"> to remove from the cluster. </param>
             <param name="deleteStore"> flag to indicate that the call should also delete ALL cluster stores </param>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">          if any nodes fail during the process. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if any of the nodes are not connected. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            if the client is not authorised. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.destroy">
             
              <summary>Deletes the cluster and removes all known realms from the cluster.
              </summary>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">          if any nodes fail during the process. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if any of the nodes are not connected. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            if the client is not authorised. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.destroy(System.Boolean)">
            
              <summary>Deletes the cluster and removes all known realms from the cluster.
              </summary>
             * <param name="deleteStore"> flag to indicate that the call should also delete ALL cluster stores </param>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">          if any nodes fail during the process. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if any of the nodes are not connected. </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            if the client is not authorised. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getMaster">
             
              <summary>Returns the current master of the cluster.
             If the master is not currently connected it will return null
              </summary>
             <returns> String name of the master. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getMaster(System.Int64)">
             
              <summary>Returns the current master of the cluster.
              </summary>
             <param name="timeout"> the amount of time in milliseconds to wait for the connection to the master
             </param>
             <returns> String name of the master. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getSites">
             
              <summary>Returns an iterator of nClusterSite objects
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nClusterSite"/>
             <returns> an iterator of  nClusterSite objects </returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getNoOfSites">
             
              <summary>Returns the number of defined nClusterSite objects
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nClusterSite"/>
             <returns> a count of  nClusterSite objects </returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.createSite(System.String,System.String)">
             
              <summary>Method that allows you to create a site from a cluster node </summary>
             <param name="name"> the name of the site to create </param>
             <param name="initialRealm"> the initial realm that will be added to the site </param>
             <returns> a new cluster site object </returns>
             <exception cref="T:System.Exception"> if the site was not able to be created </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.deleteSite(com.pcbsys.nirvana.nAdminAPI.nClusterSite)">
             
              <summary>Method that allows you to delete a site </summary>
             <param name="site"> the cluster site to delete </param>
             <exception cref="T:System.Exception"> if the site was not able to be created </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.hasquorum">
             
              <summary>Tests to see if the cluster has quorum and is functioning. Quorin is defined as the cluster having the
             ( number of realms ) / 2 +1 being online.
              </summary>
             <returns> boolean indicating the current state. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.addConnectionListener(com.pcbsys.nirvana.nAdminAPI.nClusterConnectionListener)">
             
              <summary>Adds a nClusterConnectionListener to the cluster to receive callbacks as connections are made or lost to
             any realms within the cluster.
              </summary>
             <param name="listener"> to register for callbacks. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.addConnectionListenerToAllLeafNodes(com.pcbsys.nirvana.nAdminAPI.nConnectionListener)">
             
              <summary>Adds a nConnectionListener to each nLeaNode of each nRealmNode in the cluster
              </summary>
             <param name="listener"> to register for callbacks. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.delConnectionListener(com.pcbsys.nirvana.nAdminAPI.nClusterConnectionListener)">
             
              <summary>Removes a nClusterConnectionListener from the cluster
              </summary>
             <param name="listener"> to register for callbacks. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.addListener(com.pcbsys.nirvana.nAdminAPI.nClusterEventListener)">
             
              <summary>Adds a nClusterEventListener to the cluster to receive callbacks as the state of the cluster changes.
              </summary>
             <param name="listener"> to register for callbacks. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.delListener(com.pcbsys.nirvana.nAdminAPI.nClusterEventListener)">
             
              <summary>Deregisters a nClusterEventListener from the cluster for callbacks.
              </summary>
             <param name="listener"> to be removed. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getClusterConnectionStatus">
             
              <summary>Returns an ArrayList of nClusterStatus which contains the current cluster status.
              </summary>
             <returns> ArrayList of nClusterStatus. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.getSite(System.String)">
            
               <summary>Returns an nClusterSite object with the specified name
               </summary>
               <param name="site"> the name of the site to return </param>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nClusterSite"/>
              <returns> an nClusterSite with the specified name </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.hasSites">
            
             <summary> Indicated whether this node has sites </summary>
             <return> true if this node has sites </return>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.registerRemoteCluster(com.pcbsys.nirvana.nAdminAPI.nClusterNode)">
            
             <summary> Creates a logical connection between this cluster node and another remote cluster node.
                 this method will throw an Exception if the remoteCluster parameter is null, or if remoteCluster is
                  equal to this object. </summary>
             <param name="remoteCluster"> the cluster node to connect to </param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.deregisterRemoteCluster(com.pcbsys.nirvana.nAdminAPI.nClusterNode)">
            
             <summary> Removes a logical connection from this cluster node to a remote cluster node.
                 This method will throw an Exception if the parameter remoteCluster is null, or if it is equal to
                  this object. </summary>
             <param name="remoteCluster"> the cluster node to disconnect from </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nAdminAPI.nClusterNode.joinRemoteClusterStore(com.pcbsys.nirvana.nAdminAPI.nLeafNode,com.pcbsys.nirvana.nAdminAPI.nLeafNode,System.Boolean,System.Int32,System.String,System.Boolean)" -->
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nConnectionListener">
            
             <summary>Any class that implements this interface can be registered against a Nirvana Realm, Channel or Queue to receive
              notification when remote connections are made or dropped. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionListener.add(com.pcbsys.nirvana.nAdminAPI.nConnectionDetails)">
             
              <summary>This method is asynchronously called when a connection is established with a resource.
              </summary>
             <param name="details"> The nConnectionDetails object that contains all the information about the connection added </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConnectionListener.del(com.pcbsys.nirvana.nAdminAPI.nConnectionDetails)">
             
              <summary>This method is asynchronously called when the connection is lost or is no longer required.
              </summary>
             <param name="details"> The nConnectionDetails object that contains all the information about the connection deleted </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionDetails"/>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nClusterSite">
            
             <summary>This class defines a collection of realms within a cluster into a physical site / location.
              A site can be given prime status, which means that in failover with 2 sites defined, the prime site will receive and additional vote enabling the remaining cluster realms to achieve quorum </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.isPrime">
             
              <summary>Returns if the defined site is regarded as prime </summary>
             <returns> true if prime </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.getEnumerator">
             
              <summary>Returns an iterator of known site member realms </summary>
             <returns> iterator of site member realms </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.addMember(System.String)">
             
              <summary>Add a realm to this site </summary>
             <param name="name"> name of the realm to be added </param>
             <exception cref="T:System.Exception"> if the operation could not be completed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.isMember(System.String)">
             
              <summary>Check if a realm is a member of this site </summary>
             <param name="name"> of the realm to check </param>
             <returns> true / false whether the realm is a member </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.delMember(System.String)">
             
              <summary>Remove a realm as a member of a site </summary>
             <param name="realmName"> the realm to delete from the site </param>
             <exception cref="T:System.Exception"> if the operation could not be completed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.setPrime(System.Boolean)">
             
              <summary>Sets whether this site is defined as prime </summary>
             <param name="flag"> whether the site is prime </param>
             <exception cref="T:System.Exception"> if the operation could not be completed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.lessThan(System.Int64)">
            
             <summary>Required as part of the SortedObject interface. For internal use only</summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.Equals(System.Int64)">
            
             <summary>Required as part of the SortedObject interface. For internal use only</summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.lessThan(System.Object)">
            
               <summary>Used to compares this Object with another to determine sorting position
               </summary>
              <param name="item"> Object to compare </param>
              <returns> True if this object is less then the passed in object </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.Equals(System.Object)">
            
               <summary>Used to compares this Object with another to determine sorting position. For internal
              use only
               </summary>
              <param name="item"> Object to compare </param>
              <returns> True if this object is equal to the passed in object </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.getNoOfMembers">
            <summary>
            Return the number of members defined in this site
            </summary>
            <returns>The number of site members</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterSite.findNode(System.String)">
            <summary>
            Find a specific member realm in this site
            </summary>
            <param name="name">name of the realm you wish to find in the members</param>
            <returns>the name of the realm or null if not found</returns>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nClusterSite.Name">
             
              <summary>Get the name of the defined cluster site </summary>
             <returns> the cluster site name </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nClusterStatus">
            
             <summary>This class contains the status of the of a realm within the cluster, What state it has, which node is the elected master etc. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterStatus.getStatus(System.String)">
             
              <summary>Returns nClusterStatusEntry for the specified realm.
              </summary>
             <param name="realm"> name to get status for. </param>
             <returns> status for specified realm. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterStatus.getStatus(System.Int32)">
             
              <summary>Returns nClusterStatusEntry for the realm at the index specified
              </summary>
             <param name="idx"> to get the status for. </param>
             <returns> status object at the requested index. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterStatus.getElectedMaster">
             
              <summary>The name of the nodes elected master.
              </summary>
             <returns>  the elected master. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterStatus.size">
             
              <summary>The number of known nodes within the cluster.
              </summary>
             <returns> number of nodes within the cluster. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterStatus.getState">
             
              <summary>Returns the realms cluster state.
              </summary>
             <returns> String representing the current state of this node within the cluster. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterStatus.canBeMaster">
             
              <summary>Indicates whether the cluster member can be selected as master within the cluster.
              </summary>
             <returns> whether the member can be elected master </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterStatus.getSite">
            
               <summary>Returns the site for this realm
               </summary>
              <returns> This realms site </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterStatus.hasSite">
            
               <summary>Indicates whether this realm has a site
               </summary>
              <returns> true if this realm has a site </returns>
            
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nClusterStatus.Name">
             
              <summary>The nameof the realm which these status's are related to.
              </summary>
             <returns> the name of the realm. </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nClusterStatusEntry">
            
             <summary>This class contains online/offline status a realm within a cluster </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nClusterStatusEntry.isOnline">
             
              <summary>Boolean indicating if the realm is online or offline
              </summary>
             <returns> true if the node is online. </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nClusterStatusEntry.Name">
             
              <summary>The realm name which this status belongs to
              </summary>
             <returns> Realm name </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nCommandStatus">
            
             <summary>Any class implementing this interface can be used to find the current status of a request, for example a copy
              operation of a nLeafNode. Useful if the command takes a long time, the caller can implement this interface and get the
              current status and position.
             
              If the implementing class returns false the command is aborted at that point. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCommandStatus.status(System.Int32,System.Int64)">
             
              <summary>Callback method used to indicate the current status of the command
              </summary>
             <param name="percentComplete"> Percent of the command completed </param>
             <param name="eid"> current Event id the command is up to </param>
             <returns> boolean, if False causes the command to stop else continues. </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nConfigEntry">
            
             <summary>This class contains all the information about a configuration parameter, including the name,
              the current value, a description of it and a warning or constrant string.
             
              This class extends Observable since the value can be changed asynchronously from the
              realm. When this happens any observer is notified of the changed value, passed as a String </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.getParent">
             
              <summary></summary>
             <returns> The parent object that contains this entry; </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.getType">
             
              <summary>Retrieves the type of the configuration parameter
              </summary>
             <returns> type of config object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.isAdvanced">
            
               <summary>Retrieves if configuration parameter is advanced
               </summary>
              <returns> is advanced value of config object </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.getMin">
             
              <summary>Retrieves the minimum range value of the configuration parameter
              </summary>
             <returns> minumum range value of config object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.getMax">
             
              <summary>Retrieves the maximum range value of the configuration parameter
              </summary>
             <returns> maximum range value of config object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.getWarning">
             
              <summary>Returns a String which contains information about the limits/bounds of this parameter and what would
             be nominal values
              </summary>
             <returns> a warning for this config entry as a String </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.isReadOnly">
             
              <summary>Returns whether the specific entry is read only and therefore cannot be modifed </summary>
             <returns> if the entry is read only </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.validateNewValue(System.String)">
             
              <summary>Validates a proposed new value for the config entry.
              </summary>
             <param name="value"> a string object specifying the value to be validated </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if not the correct type, or not within a specific range
             </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.lessThan(System.Int64)">
             
              <summary>Compares this object with the passed object. For internal use only </summary>
             <param name="aLong"> long to compare against </param>
             <returns> True if this object is less than the passed long </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.Equals(System.Int64)">
             
              <summary>Compares this object with the passed object. For internal use only </summary>
             <param name="aLong"> long to compare against </param>
             <returns> True if this object is equal to the passed long </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.lessThan(System.Object)">
             
              <summary>Compares this object with the passed object. For internal use only
              </summary>
             <param name="item"> Object to compare against </param>
             <returns> True if this object is less than the passed object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.Equals(System.Object)">
             
              <summary>Compares this object with the passed object. For internal use only
              </summary>
             <param name="item"> Object to compare against </param>
             <returns> True if this object is equal to the passed object </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.Name">
             
              <summary>Retrieves the name of the configuration parameter
              </summary>
             <returns> the name of this configuration parameter as a String </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.Value">
             
              <summary>Retrieves the current value of this parameter. The parameter is always a string though it
             could represent longs/ints/booleans etc
              </summary>
             <returns> the current value of this configuration parameter as a String </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nConfigEntry.Description">
             
              <summary>Returns a string which contains the description for this parameter and typically what it is used for.
              </summary>
             <returns> a description for this config entry as a String </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nConfigGroup">
            
             <summary>This class manages a group of nConfigEntry objects that are related. This class extends
              Observable so that if new nConfigEntry objects are added to this group the Observer will
              be notified with the new nConfigEntry </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.find(System.String)">
             
              <summary>Finds a nConfigEntry that matches the name specified from within this group
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConfigEntry"/>
             <param name="itemName"> Name of the nConfigEntry to find as a String </param>
             <returns> the nConfigEntry object found or null if the name does not exist within the group </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> is thrown if itemName is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.getItems">
             
              <summary>Returns the group as an IEnumerator of all the nConfigEntry objects that the group consists of
              </summary>
             <returns> An IEnumerator of all the nConfigEntry objects that the group consists of </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.Length">
             
              <summary>Returns the length of the configureation group, ie the number of items
              </summary>
             <returns> The number of config entries in this group </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.lessThan(System.Int64)">
             
              <summary>Compares this object with the passed object. For internal use only </summary>
             <param name="aLong"> long to compare against </param>
             <returns> True if this object is less than the passed long </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.isReadOnly">
             
              <summary>Returns whether this config group is read only </summary>
             <returns> boolean value representing if it's read only </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.Equals(System.Int64)">
             
              <summary>Compares this object with the passed object. For internal use only </summary>
             <param name="aLong"> long to compare against </param>
             <returns> True if this object is equal to the passed long </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.lessThan(System.Object)">
             
              <summary>Compares this object with the passed object. For internal use only
              </summary>
             <param name="item"> Object to compare against </param>
             <returns> True if this object is less than the passed object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.Equals(System.Object)">
             
              <summary>Compares this object with the passed object. For internal use only
              </summary>
             <param name="item"> Object to compare against </param>
             <returns> True if this object is equal to the passed object </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.Name">
             
              <summary>Retrieve this groups unique name
              </summary>
             <returns> String name </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nConfigGroup.Description">
             
              <summary>Retrieves the description of this group
              </summary>
             <returns> the description of this config group as a String </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nConfigurationException">
            
             <summary>represents the exception thrown when configuration operations fail </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigurationException.#ctor">
            
               <summary>Creates the exception with the default message "Exception - Attempted configuration operation failed"
               </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nConfigurationException.#ctor(System.String)">
            
               <summary>Creates the exception with the specified message
               </summary>
              <param name="msg"> Message string </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nCopyable">
            
             <summary>All classes that can be copied from one part of the namespace to another implement
              this interface. This facilitates manipulation of the nirvana namespace nodes. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCopyable.copy(com.pcbsys.nirvana.nAdminAPI.nNode,System.String,System.Boolean,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nCommandStatus)">
             
              <summary>This method enables the copy of the object from one node to another, specifying a name
             for the destination node, and whether the operation should wait until complete before returning
              </summary>
             <param name="p_toNode"> the name of the container node to copy this node to </param>
             <param name="p_toName"> the new name of the node to copy this node as. </param>
             <param name="p_waitForCompletion"> a boolean specifying whether the method should return immediately or after the command
             is completed. </param>
             <param name="acl"> an optional initial acl object that will be set on the object being copied </param>
             <param name="cmdStatus"> an optional nCommandStatus object so that you can query the status of the command whether waiting
             for completion or not (useful for progress bars etc)
              *
             @deprecated As of version 2.0, please use copy(boolean p_waitForCompletion, nChannelAttributes p_attrib, nCommandStatus cmdStatus) </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException"> if the copy operation can not be peformed with the parameters specified. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCopyable.copy(System.String,System.Boolean,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nCommandStatus)">
             
              <summary>This method enables the copy of the object locally within the current node, specifying
             a name so there are no duplicates, and whether the operation should wait until complete
             before returning
              </summary>
             <param name="p_toName"> the new name of the node to copy this node as. </param>
             <param name="p_waitForCompletion"> a boolean specifying whether the method should return immediately or after the command
             is completed. </param>
             <param name="acl"> an optional initial acl object that will be set on the object being copied </param>
             <param name="cmdStatus"> an optional nCommandStatus object so that you can query the status of the command whether waiting
             for completion or not (useful for progress bars etc)
              *
             @deprecated As of version 2.0, please use copy(boolean p_waitForCompletion, nChannelAttributes p_attrib, nCommandStatus cmdStatus) </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException"> if the copy operation can not be peformed with the parameters specified. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCopyable.copy(com.pcbsys.nirvana.nAdminAPI.nNode,System.Boolean,com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nCommandStatus)">
             
              <summary>This method enables the copy of the object from one node to another, specifying a name
             for the destination node, and whether the operation should wait until complete before returning
             as well as specifying new channel attributes
              </summary>
             <param name="p_toNode"> the name of the container node to copy this node to </param>
             <param name="p_waitForCompletion"> a boolean specifying whether the method should return immediately or after the command
             is completed. </param>
             <param name="p_attrib"> the nChannelAttributes specifying the new nNode parameters </param>
             (Name, Type, Capacity, TTL etc) <see cref="T:com.pcbsys.nirvana.client.nChannelAttributes"/>
             <param name="acl"> an optional initial acl object that will be set on the object being copied </param>
             <param name="cmdStatus"> an optional nCommandStatus object so that you can query the status of the command whether waiting
             for completion or not (useful for progress bars etc)
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException"> if the copy operation can not be peformed with the parameters specified. </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCopyable.copy(System.Boolean,com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nCommandStatus)">
             
              <summary>This method enables the copy of the object locally within the current node, specifying
             a name so there are no duplicates, and whether the operation should wait until complete
             before returning, as well as specifying new channel attributes
              </summary>
             <param name="p_waitForCompletion"> a boolean specifying whether the method should return immediately or after the command
             is completed. </param>
             <param name="p_attrib"> the nChannelAttributes specifying the new nNode parameters </param>
             (Name, Type, Capacity, TTL etc) <see cref="T:com.pcbsys.nirvana.client.nChannelAttributes"/>
             <param name="acl"> an optional initial acl object that will be set on the object being copied </param>
             <param name="cmdStatus"> an optional nCommandStatus object so that you can query the status of the command whether waiting
             for completion or not (useful for progress bars etc)
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException"> if the copy operation can not be peformed with the parameters specified. </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nCustomHeader">
            
             <summary>This Class represent a single custom header field which will be used by javascript.</summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCustomHeader.#ctor(System.String,System.String,System.String)">
            
             <summary>A custom header deceleration for javascript.</summary>
            
             <param name="key"> the header value</param>
             <param name="value"> the header value (optional)</param>
             <param name="userAgents"> set this to '*' if you wish this to apply to all javascript communications or
             a comma separated list of specific user agents</param>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the key is less than 1 character</exception> 
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCustomHeader.getKey">
            
             <summary>The header key field</summary>
             <returns> the header key</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCustomHeader.getValue">
            
             <summary>The header value</summary>
             <returns> the header value</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCustomHeader.getUserAgents">
            
             <summary>The user agents this applies to</summary>
             <returns> the user agents</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCustomHeader.setMyValue(System.String)">
            
             <summary>Sets the value for the header field</summary>
             <param name="value"> the value of the header field</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nCustomHeader.setMyUserAgents(System.String)">
            
             <summary>Sets the user agents this header field will apply to</summary>
             <param name="myUserAgents"> sets the user agents this applies (* for all agents)</param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode">
            
             <summary>This class is an Admin API wrapper for a Data Group object (nDataGroup)</summary>
             
             <see cref="T:com.pcbsys.nirvana.client.nDataGroup"> </see>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.addListener(com.pcbsys.nirvana.client.nDataGroupListener)">
            
             <summary>Add an nDataGroup listener to this node. This allows multiple listeners to be added
             to an instance of the nDataGroup object this node represents</summary>
             <param name="listener"> the nDataGroupListener to receive callbacks when 
             streams or other groups are added/removed from this group</param>
             <see cref="T:com.pcbsys.nirvana.client.nDataGroupListener"></see>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.removeListener(com.pcbsys.nirvana.client.nDataGroupListener)">
            
             <summary>Remove the specified listener</summary>
             <param name="listener"> the nDataGroupListener to receive callbacks when 
             streams or other groups are added/removed from this group</param>
             <see cref="T:com.pcbsys.nirvana.client.nDataGroupListener"></see>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.getDataGroup">
            
             <summary>Get the client API nDataGroup object represented by this node</summary>
             <returns> the nDataGroup object</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.getLastEID">
            
             <summary>Returns the last EID that was used for the data group</summary>
            
             <returns> long the last event id used</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.getTotalStreamCount">
            
             <summary>Returns the total number of streams that have been connected to this data group</summary>
            
             <returns> long total number of streams</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.getStreamCount">
            
             <summary>Returns the current number of streams that are connected to this data group</summary>
            
             <returns> long total number of streams</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.getTotalConsumed">
            
             <summary>Returns the total number of events that this data group and nested groups have delivered to listeners</summary>
            
             <returns> long total number of events consumed</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.getTotalPublished">
            
             <summary>Returns the total number of events published to this data group and nested groups since the realm has started</summary>
            
             <returns> long total number of events written </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.getPublishRate">
            
             <summary>The number of events published per second</summary>
            
             <returns> int event publish rate</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.getFanoutTime">
            
             <summary>The total number of milliseconds it takes to fanout each event to all consumers</summary>
            
             <returns> long the fanout time in milliseconds</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupNode.getConsumedRate">
            
             <summary>The number of events consumed per second</summary>
            
             <returns> float value the rate at which messages are being consumed</returns>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer">
            
             <summary>This class is an Admin API wrapper for all configured Data Group objects (nDataGroup)
            This class also can also be used to obtain all known nDataStream objects,
            that have been added to the default data group.</summary>
            
             <see cref="T:com.pcbsys.nirvana.client.nDataGroup"></see>
             <see cref="T:com.pcbsys.nirvana.client.nDataStream"></see>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer.getDefaulDataGroup">
            
             <summary>Obtain the default nDataGroup object</summary>
             <returns> default nDataGroup </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer.getStreamCount">
            
             <summary>Get the current number of nDataStream objects connected.</summary>
            
             <returns> the current number of connected nDataStream objects</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer.getGroupCount">
            
             <summary>Get the number of known nDataGroup objects.
             </summary>
             <returns> the total number of nDataGroup objects</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer.getConsumedRate">
            
             <summary>The number of events consumed per second across all nDataGroup objects</summary>
            
             <returns> the rate at which events are being consumed</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer.getPublishRate">
            
             <summary>The number of events published per second across all nDataGroup objects</summary>
            
             <returns> the rate at which events are being written to the groups</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer.getTotalPublished">
            
             <summary>Returns the total number of events published to this all data groups since the realm has started</summary>
            
             <returns> total number of events published since the realm started</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer.getTotalConsumed">
            
             <summary>Returns the total number of events that delivered to listeners across all nDataGroup objects</summary>
            
             <returns> total number of events consumed since the realm started</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer.getTotalStreamCount">
            
             <summary>Returns the total number of streams that have been added to all data groups since the realm last started</summary>
            
             <returns> total number of streams </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataGroupsContainer.getAllStreams">
            
             <summary>Get all nDataStream objects connected to the Nirvana realm</summary>
             <returns> an IEnumerable of all nDataStream objects </returns>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nDataStreamNode">
            
             <summary>This class is an Admin API wrapper for a Data Stream object (nDataStream)</summary>
            
             <see cref="T:com.pcbsys.nirvana.client.nDataStream"></see>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDataStreamNode.getDataStream">
            
             <summary>Get the nDataStream client API object
             </summary>
             <returns> the nDataStream object </returns>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nDuplicateACLEntryException">
            
             <summary>represents the exception class that is thrown when
              a duplicate acl entry is attempted to be added </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDuplicateACLEntryException.#ctor">
            
               <summary>Creates the exception with the default message "ACL Entry already exists for the specified object"
               </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nDuplicateACLEntryException.#ctor(System.String)">
            
               <summary>Creates the exception with the specified message
               </summary>
              <param name="msg"> Message string </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface">
            
             <summary>This class contains all the configuration required by the Nirvana Realm server to start
              and control the HTTP interface. </summary>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nInterface">
            
             <summary>Abstract Class nInterface. This class exposes the common attributes to
              all Nirvana Realm interfaces. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.isAllowNIO">
             
              <summary>Returns whether NIO is enabled on this interface </summary>
             <returns> if NIO is enabled</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setAllowNIO(System.Boolean)">
             
              <summary>Set whether NIO is enabled on the interface </summary>
             <param name="allowNIO"> whether NIO is enabled</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getSelectThreadSize">
             
              <summary>Returns the number of select threads used by NIO </summary>
             <returns> the number of select threads used</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setSelectThreadSize(System.Int32)">
             
              <summary>Sets the number of select threads used by NIO </summary>
             <param name="selectThreadSize"> the number of select threads used</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.isInterRealmAllow">
             
              <summary>Returns whether this interface is allowed to be used in inter realm / cluster communication </summary>
             <returns> whether this interface is allowed for cluster communication </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setInterRealmAllow(System.Boolean)">
             
              <summary>Sets whether this interface is allowed to be used in inter realm / cluster communication </summary>
             <param name="interealmAllow"> whether this interface is allowed for cluster commincation </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.isClientConnectionsAllowed">
             
              <summary>Returns whether this interface can be used by clients to connect </summary>
             <returns> whether this interface is allowed for client communication </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setAllowClientConnections(System.Boolean)">
             
              <summary>Sets whether this interface can accept client connections or not </summary>
             <param name="clientconnections"> whether this interface can be used by clients </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getSendBufferSize">
             
              <summary>Return the socket buffer size in bytes used by this interface when sending data </summary>
             <returns> the outbound socket buffer size in bytes used by this interface </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setSendBufferSize(System.Int32)">
             
              <summary>Set the socket buffer size in bytes used by this interface when sending data </summary>
             <param name="mySendBufferSize"> the size to set the outbound buffer size to </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getRecvBufferSize">
             
              <summary>Return the socket buffer size in bytes used by this interface when receiving data </summary>
             <returns> the inbound socket buffer size in bytes used by this interface </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setRecvBufferSize(System.Int32)">
             
              <summary>Set the socket buffer size in bytes used by this interface when receiving data </summary>
             <param name="myRecvBufferSize"> the inbound socket buffer size in bytes used by this interface </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.canAdvertise">
             
              <summary>Will this interface be used by other realms to send client redirects to.
              </summary>
             <returns> Current value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.willAutostart">
             
              <summary>Will this interface automatically be started when the Realm Server starts
              </summary>
             <returns> Current value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setAdvertise(System.Boolean)">
             
              <summary>Change the current advertise status for this interface
              </summary>
             <param name="flag"> True or False </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setAutostart(System.Boolean)">
             
              <summary>Change the current Autostart status for this interface
              </summary>
             <param name="flag"> True or False </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getURL">
             
              <summary>Get the URL that specifies this interface. It is made up from the protocol
             the adapter and port
              </summary>
             <returns> URL string </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.ToString">
             
              <summary>Return a string representation of the interface details </summary>
             <returns> a string representation of the interface details </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getPort">
             
              <summary>Get the port that this interface will bind to at startup
              </summary>
             <returns> Integer value of the port </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getBacklog">
             
              <summary>The number of socket connect requests that the Operating System will queue before
             sending a reject to the remote client.
              </summary>
             <returns> The current setting </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setBacklog(System.Int32)">
             
              <summary>Changes the number of connections to queue before the Operating System will send rejects
             to the remote client
              </summary>
             <param name="backlog"> Must be between 1 and 100 </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getAdapter">
             
              <summary>Get the adapter that this interface will use. Reserved interfaces are
              *
             0.0.0.0 - Bind to all physical interfaces on the machine
             127.0.0.1 - Bind to local loopback
              </summary>
             <returns> The current interface </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getThreadCount">
             
              <summary>Returns the current Thread Pool size that handles client socket connections. Depending on the
             number of connections/second this size should be around 1 or 2 anything more may not really gain
             any improvement
              </summary>
             <returns> The current size </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getProtocol">
             
              <summary>Returns the protocol string used by this interface. Can be one of nsp, nsps, nhps or nhp
              </summary>
             <returns> The protocol used by this interface </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getAuthTimeOut">
             
              <summary>Returns the number of milliseconds that the remote client has to authenticate with the server before
             the server closes the communications with the client.
              </summary>
             <returns> The current timeout </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getAdapaterAlias">
            
             <summary>Returns the interfaces known alias's.
             
              This is used by the server to tell other servers how to contact it if it is behind a NAT or Proxy server. It is
              specified as a HOST:PORT syntax
             </summary>
              * <returns> String alias </returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setAdapterAlias(System.String)">
             
              <summary>Sets the interfaces alias.
              *
             This string is of the format HOST:PORT where HOST is the alias interface and port is the number used to communicate with
             the server.
              </summary>
             <param name="alias"> an alias hostname for the interface </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setAuthTimeOut(System.Int32)">
             
              <summary>Changes the number of milliseconds that the remote client has to authenticate with the server.
              </summary>
             <param name="timeout"> time in milliseconds </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setThreadCount(System.Int32)">
             
              <summary>Changes the thread pool size handling the client connections
              </summary>
             <param name="count"> Must be between 1 and 5 inclussive </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.getViaList">
            
             <summary>Retrieves the interfaces Via list. This list is contained in a nACL object.
             </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACL"/>
              <returns> nACL </returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setViaList(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Commits the nACL object passed in with the Realm Server. This causes these nInterfaceViaEntry to be active once the function
             returns. The nACL object can be retrieved by calling the getViaList() function which returns the interface
             current VIA list.
              </summary>
             <param name="acl"> A nACL containing nInterfaceViaEntry </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.lessThan(System.Int64)">
             
              <summary>used to sort interfaces </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.Equals(System.Int64)">
             
              <summary>used to sort interfaces </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.lessThan(System.Object)">
             
              <summary>used to sort interfaces </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.Equals(System.Object)">
             
              <summary>used to sort interfaces </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterface.setManager(com.pcbsys.nirvana.nAdminAPI.nInterfaceManager)">
            
             <summary> Sets the interface manager </summary>
             <param name="im"> The nInterFaceManager to set </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.#ctor(System.String,System.Int32)">
             
              <summary>Creates a HTTP interface on the supplied adapter:port
              </summary>
             <param name="adapter"> to bind to </param>
             <param name="port"> to bind to </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if adapter is null or the port range is invalid </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.#ctor(System.String,System.Int32,System.Boolean)">
             
              <summary>Creates a HTTP interface on the supplied adapter:port with the supplied autostart flag
              </summary>
             <param name="adapter"> to bind to </param>
             <param name="port"> to bind to </param>
             <param name="autostart"> Should be autostarted or not </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if adapter is null or the port range is invalid </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.getPlugin">
              
               <summary>Get the name of the plugin to use. Not yet implemented. For future use ONLY </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.setPlugin(System.Collections.ArrayList)">
             
              <summary>Get the name of the plugin to use. Not yet implemented. For future use ONLY </summary>
             <param name="config"> the configuration of the plugin </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.isHTTP_1_1_Enabled">
            
            <summary>Returns true if HTTP 1.1 is enabled.</summary>
            <returns>true if HTTP 1.1 is enabled</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.enabled_HTTP_1_1(System.Boolean)">
            
            <summary>set the use of HTTP1.1</summary>
            
            <param name="flag"> if true, interface will use HTTP 1.1</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.isWebSocketEnabled">
            
            <summary>Returns true if WebSockets are enabled</summary>
             <returns> true if WebSockets are enabled</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.enabledWebSockets(System.Boolean)">
            
            <summary>Sets the use of WebSockets</summary>
            
            <param name="flag"> if true, interface will use websockets</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.getAjaxLPActiveDelay">
            
            <summary>Returns the time to wait (for additional events) before delivering to Long Poll style subscribers</summary>
            <returns> the time in milliseconds</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.setAjaxLPActiveDelay(System.Int64)">
            
            <summary>Sets the time to wait (for additional events) before delivering to Long Poll style subscribers</summary>
            <param name="ajaxLPActiveDelay"> the time to wait in milliseconds</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.getAjaxLPIdleDelay">
            
            <summary>Returns the time to wait before returning from a Long Poll call if no events have been received</summary>
            <returns> the time in milliseconds</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.setAjaxLPIdleDelay(System.Int64)">
            
            <summary>Set the time to wait before returning from a Long Poll call if no events have been received</summary>
            <param name="ajaxLPIdleDelay"> the time in milliseconds</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.isNativeCometAllowed">
            
             <summary>Returns whether this interface has javascript enabled or not</summary>
             <returns> whether this interface has javascript enabled</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.setNativeCometAllowed(System.Boolean)">
            
             <summary>Sets whether javascript is enabled on the interface</summary>
             <param name="isNativeCometAllowed"> true to enable javascript communication via this interface</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.getCustomHeaders">
            
             <summary>Returns a List of nCustomHeader which will be sent to javascript clients</summary>
             <returns> a List of nCustomHeader</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.setCustomHeaders(System.Collections.Generic.List{com.pcbsys.nirvana.nAdminAPI.nCustomHeader})">
            
             <summary>Sets the custom headers that will be sent to javascript clients</summary>
             <param name="customHeaders"> List of nCustomHeader</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.getAllowedOrigins">
            
             Returns the currently set allowed origins for CORS
             @return the allowed origins for CORS support
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.setAllowedOrigins(System.String)">
            
             Sets the Allowed Origins for CORS
             @param allowedOrigins a comma seperated list of origins allowed with CORS or * to allow all
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.isAllowCrossOriginCredentials">
            
             This allows credentials header to be sent with CORS requests
             @return true if the allow credentials header is to be sent for CORS
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.setAllowCrossOriginCredentials(System.Boolean)">
            
             Set to true to send the allow credentails header to be sent with CORS requests
             @param myAllowCrossOriginCredentials true to enable header
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.isEnableGZIP">
            
             Enable GZIP compression for javascript longpoll connections
             @return true if GZIP compression is on
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.setEnableGZIP(System.Boolean)">
            
             Sets whether or not GZIP compression is enabled for javascript longpoll connections
             @param enableGZIP set to true to enable
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.getMinimumBytesBeforeGZIP">
            
             The minimum number of bytes in a packet before GZIP is enabled, default 1000.
             @return int the number of bytes before enabling GZIP
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPInterface.setMinimumBytesBeforeGZIP(System.Int32)">
            
             The minimum number of bytes in a packet before GZIP is enabled, default 1000.
             @param minimumBytesBeforeGZIP the number of bytes before GZIPing a packet, as smaller packets do not benefit due to CPU overhead.
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface">
            
             <summary>This class contains all the configuration required by the Nirvana Realm server to start
              and control the HTTPS interface. </summary>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI">
            
             <summary>This interface is used to expose the SSL attributes for all interfaces that are SSL enabled. If a class
              implements this interface it means that they support the listed API's and that SSL is active. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getEnabledCiphers">
             
              <summary>Returns an array of strings which represent the current Ciphers enabled for
             use by this interface
              </summary>
             <returns> a String[] containing the names of the ciphers enabled for use by this interface </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setEnabledCiphers(System.String[])">
             
              <summary>Specifies the names of the ciphers enabled for use by this interface.
              </summary>
             <param name="ciphers"> a String[] of ciphers enabled for use by this interface </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an empty or null array is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getAlias">
             
              <summary>Returns the certificate name/alias that this interface uses as its
             primary certificate
              </summary>
             <returns> the Name/Alias of the certificate as a String </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setPrivateKeyPassword(System.String)">
             
              <summary>Sets the private key password so that the key can be loaded from the key store
              </summary>
             <param name="password"> for the private key as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setAlias(System.String)">
             
              <summary>Sets the certificate name/alias that this interface will use to select its certificate
             from a keystore with multpiple entries.
              </summary>
             <param name="alias"> the name/alias to use as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getCertRequired">
             
              <summary>Returns whether this interface requires SSL client authentication or not.
             <para>
             If this is set to false then this interface allows anonymous connections
             using SSL.  Otherwise the client must have and present a valid certificate chain
             during the SSL handshake.
             </para> </summary>
             <returns> a boolean specifying the SSL client authentication setting </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setCertRequired(System.Boolean)">
             
              <summary>Specifies whether this interface requires SSL client authentication or not.
             <para>
             If this is set to false then this interface allows anonymous connections
             using SSL.  Otherwise the client must have and present a valid certificate chain
             during the SSL handshake.
             </para> </summary>
             <param name="required"> a boolean specifying if this interface will force client authentication </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getKeyStore">
             
              <summary>Returns the name of the keystore file that this interface uses to load the
             certificate from.
              </summary>
             <returns> The name of the keystore file to use as a String </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setKeyStore(System.String)">
             
              <summary>Sets the keystore file that this interface uses to load the certificate from
              </summary>
             <param name="keyStore"> the new keystore name as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setKeyStorePassword(System.String)">
             
              <summary>Sets the keystore password that this interface will use to access the keystore file
             specified.
              </summary>
             <param name="keyStorePassword"> the new password as a string </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getTrustStore">
             
              <summary>Returns the current truststore file that this interface uses to validate
             the client certificate chain against.
              </summary>
             <returns> the Truststore file name as a String </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setTrustStore(System.String)">
             
              <summary>Sets the truststore file that this interface uses to validate the client
             certificate against.
              </summary>
             <param name="trustStore"> the new truststore file to use </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getSupportedCiphers">
             
              <summary>Returns an array of ciphers this this interface can be configured for use by
             this interface.
              *
             If the cipher is not in this list then the interface can not support it.
              </summary>
             <returns> String[] of ciphers which can be configured for use by this interface </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setTrustStorePassword(System.String)">
             
              <summary>Changes the truststore's password that the server uses to access the trust
             store
              </summary>
             <param name="trustStorePassword"> the new password to use as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getRandomAlgorithm">
             
              <summary>Returns the SecureRandom algoritm used for this interface. If it is null it uses the system default
             algorithm.
              </summary>
             <returns> a String specifying the Random Algorithm used by this interface </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getRandomProvider">
             
              <summary>Returns the SecureRandom provider used by this interface. If it is null it uses the system default
             provider.
              </summary>
             <returns> a String specifying the Secure Random provider used by this interface </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setRandomAlgorithm(System.String)">
             
              <summary>Sets the SecureRandom algorithm to use for this interface
              </summary>
             <param name="alg"> the name of the new SecureRandom algorithm to use </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setRandomProvider(System.String)">
             
              <summary>Sets the SecureRandom provider to use for this interface
              </summary>
             <param name="prov"> the name of the new SecureRandom provider to use </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setCRLFile(System.String)">
             
              <summary>Sets the Certificate revocation list file name that the interface should use
             to check the incomming ssl connections. Is only used when client certificates
             are required.
              *
             The file should be in a standard X.509 Certificate Revocation List (CRL)
               </summary>
             <param name="fileName"> the CRL file name that the interface uses </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getCRLFile">
             
              <summary>Returns the Certificate revocation list that the server uses.
              </summary>
             <returns> the CRL file name that the interface uses </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getCRLValidationClassName">
             
              <summary>Any class that extends com.pcbsys.nirvana.server.api.nSSLCertficateValidator can be used
             by the server to perform CRL management. The class name can be supplied per interface and
             then when a client connects a callout is issued to this class to validate the connection.
              </summary>
             <returns> current class name of the CRL validation </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setCRLValidationClassName(System.String)">
             
              <summary>Any class that extends com.pcbsys.nirvana.server.api.nSSLCertficateValidator can be used
             by the server to perform CRL management. The class name can be supplied per interface and
             then when a client connects a callout is issued to this class to validate the connection.
              </summary>
             <param name="className"> the classname of the certificate validator to use within this interface </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setProvider(System.String)">
             
              <summary>Sets the name of the JSSE provider to use for the interface </summary>
             <param name="providerName"> the name of the JSSE provider to use </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getProvider">
             
              <summary>Get the name of the JSSE provider used by this SSL interface </summary>
              <returns> The name of the JSSE provider being used for the interface </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setPKCS11ConfigFile(System.String)">
            
             Sets the name of the PKCS11 configuration used by this SSL interface
             on the UM server.
             <param name="location"> the location/path of the PKCS11 configuration file. </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getPKCS11ConfigFile">
            
             Get the PKCS11 configuration file used by this SSL interface
             on the UM server.
             <returns> The name of the PKCS11 configuration file. </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.setPKCS11NSSName(System.String)">
            
             Sets the name of the PKCS11 NSS name that uniquely identifies the PKCS11
             configuration on the UM server.
             <param name="name"> The NSS name of the PKCS11 configuration file. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterfaceAPI.getPKCS11NSSName">
             
             Get the PKCS11 NSS name that unique identifies the PKCS11 configuration
             on the UM server.
             <returns> The NSS Name used in the PKCS11 configuration file. </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.#ctor(System.String,System.Int32)">
             
              <summary>Creates a new HTTPS interface bound to the adapter and port supplied
              </summary>
             <param name="adapter"> to bind to </param>
             <param name="port"> to bind to </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.#ctor(System.String,System.Int32,System.Boolean)">
             
              <summary>Creates a new HTTPS interface bound to the adapter and port supplied
              </summary>
             <param name="adapter"> to bind to </param>
             <param name="port"> to bind to </param>
             <param name="autostart"> Shoud it be autostarted </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getEnabledCiphers">
             
              <summary>Returns an array of strings which represent the current Ciphers enabled for
             use by this interface
              </summary>
             <returns> a String[] containing the names of the ciphers enabled for use by this interface </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setEnabledCiphers(System.String[])">
             
              <summary>Specifies the names of the ciphers enabled for use by this interface.
              </summary>
             <param name="ciphers"> a String[] of ciphers enabled for use by this interface </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an empty or null array is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setEnabledCiphers(System.String[],System.Boolean)">
             
              <summary>Specifies the names of the ciphers enabled for use by this interface.
              </summary>
             <param name="ciphers"> a String[] of ciphers enabled for use by this interface </param>
             <param name="checkSupported"> a boolean to indicate whether to validate the list against those ciphers supported by the server </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an empty or null array is specified
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getAlias">
             
              <summary>Returns the certificate name/alias that this interface uses as its
             primary certificate
              </summary>
             <returns> the Name/Alias of the certificate as a String </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setPrivateKeyPassword(System.String)">
             
              <summary>Sets the private key password so that the key can be loaded from the key store
              </summary>
             <param name="password"> for the private key as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setAlias(System.String)">
             
              <summary>Sets the certificate name/alias that this interface will use to select its certificate
             from a keystore with multpiple entries.
              </summary>
             <param name="alias"> the name/alias to use as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getCertRequired">
             
              <summary>Returns whether this interface requires SSL client authentication or not.
             <para>
             If this is set to false then this interface allows anonymous connections
             using SSL.  Otherwise the client must have and present a valid certificate chain
             during the SSL handshake.
             </para> </summary>
             <returns> a boolean specifying the SSL client authentication setting </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getProvider">
             
              <summary>Get the name of the JSSE provider used by this SSL interface </summary>
             <returns> The name of the JSSE provider being used for the interface </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setProvider(System.String)">
             
              <summary>Set the name of the JSSE provider to use </summary>
             <param name="provider"> the name of the JSSE provider to use </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setPKCS11ConfigFile(System.String)">
            
             Sets the name of the PKCS11 configuration used by this SSL interface
             on the UM server.
             <param name="location"> the location/path of the PKCS11 configuration file. </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getPKCS11ConfigFile">
            
             Get the PKCS11 configuration file used by this SSL interface
             on the UM server.
             <returns> The name of the PKCS11 configuration file. </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setPKCS11NSSName(System.String)">
            
             Sets the name of the PKCS11 NSS name that uniquely identifies the PKCS11
             configuration on the UM server.
             <param name="name"> The NSS name of the PKCS11 configuration file. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getPKCS11NSSName">
             
             Get the PKCS11 NSS name that unique identifies the PKCS11 configuration
             on the UM server.
             <returns> The NSS Name used in the PKCS11 configuration file. </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setCertRequired(System.Boolean)">
             
              <summary>Specifies whether this interface requires SSL client authentication or not.
             <para>
             If this is set to false then this interface allows anonymous connections
             using SSL.  Otherwise the client must have and present a valid certificate chain
             during the SSL handshake.
             </para> </summary>
             <param name="required"> a boolean specifying if this interface will force client authentication </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getKeyStore">
             
              <summary>Returns the name of the keystore file that this interface uses to load the
             certificate from.
              </summary>
             <returns> The name of the keystore file to use as a String </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setKeyStore(System.String)">
             
              <summary>Sets the keystore file that this interface uses to load the certificate from
              </summary>
             <param name="keyStore"> the new keystore name as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setKeyStorePassword(System.String)">
             
              <summary>Sets the keystore password that this interface will use to access the keystore file
             specified.
              </summary>
             <param name="keyStorePassword"> the new password as a string </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getTrustStore">
             
              <summary>Returns the current truststore file that this interface uses to validate
             the client certificate chain against.
              </summary>
             <returns> the Truststore file name as a String </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setTrustStore(System.String)">
             
              <summary>Sets the truststore file that this interface uses to validate the client
             certificate against.
              </summary>
             <param name="trustStore"> the new truststore file to use </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getSupportedCiphers">
             
              <summary>Returns an array of ciphers this this interface can be configured for use by
             this interface.
              *
             If the cipher is not in this list then the interface can not support it.
              </summary>
             <returns> String[] of ciphers which can be configured for use by this interface </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setTrustStorePassword(System.String)">
             
              <summary>Changes the truststore's password that the server uses to access the trust
             store
              </summary>
             <param name="trustStorePassword"> the new password to use as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getRandomAlgorithm">
             
              <summary>Returns the SecureRandom algoritm used for this interface. If it is null it uses the system default
             algorithm.
              </summary>
             <returns> a String specifying the Random Algorithm used by this interface </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getRandomProvider">
             
              <summary>Returns the SecureRandom provider used by this interface. If it is null it uses the system default
             provider.
              </summary>
             <returns> a String specifying the Secure Random provider used by this interface </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setRandomAlgorithm(System.String)">
             
              <summary>Sets the SecureRandom algorithm to use for this interface
              </summary>
             <param name="alg"> the name of the new SecureRandom algorithm to use </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setRandomProvider(System.String)">
             
              <summary>Sets the SecureRandom provider to use for this interface
              </summary>
             <param name="prov"> the name of the new SecureRandom provider to use </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setCRLFile(System.String)">
             
              <summary>Sets the Certificate revocation list file name that the interface should use
             to check the incomming ssl connections. Is only used when client certificates
             are required.
              *
             The file should be in a standard X.509 Certificate Revocation List (CRL)
              </summary>
             <param name="fileName"> the full path of the CRL file to use </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getCRLFile">
             
              <summary>Returns the Certificate revocation list that the server uses.
              </summary>
             <returns> the CRL file name that the interface uses </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.getCRLValidationClassName">
             
              <summary>Any class that extends com.pcbsys.nirvana.server.api.nSSLCertficateValidator can be used
             by the server to perform CRL management. The class name can be supplied per interface and
             then when a client connects a callout is issued to this class to validate the connection.
              </summary>
             <returns> current class name of the CRL validation </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface.setCRLValidationClassName(System.String)">
             
              <summary>Any class that extends com.pcbsys.nirvana.server.api.nSSLCertficateValidator can be used
             by the server to perform CRL management. The class name can be supplied per interface and
             then when a client connects a callout is issued to this class to validate the connection.
              </summary>
             <param name="className"> the classname of the certificate validator to use within this interface </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException">
            
             <summary>represents the exception class that is thrown when
              an operation is performed and there are insufficient privillages to complete it </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException.#ctor">
            
               <summary>Creates the exception with the default message "Insufficient privileges for attempted operation"
               </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException.#ctor(System.String)">
            
               <summary>Creates the exception with the specified message
               </summary>
              <param name="msg"> Message string </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager">
            
             <summary>This class exposes the Realm Servers interface management API so that the control and management of the interfaces
              can be performed by an authorised Administrator. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.closed(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
            
             <summary> Called when the nRealmNode is closed,  for internal use only. </summary>
             <param name="node"> The nRealmNode which has been closed </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.getPluginConfiguration">
             
              <summary>Returns an ArrayList of nInterfacePluginConfiguration objects </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nInterfacePluginConfiguration"/>
             <returns> ArrayList </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.addInterface(com.pcbsys.nirvana.nAdminAPI.nInterface)">
             
              <summary>Adds a new interface to the Realm Server. If Autostart is set to true then the interface is also started
              </summary>
             <param name="newInterface"> The new interface configuration </param>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> is thrown if the underlying session to perform the AdminAPI request is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> is thrown if the server responds with an unexpected protocol response </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> is thrown if the protocol request times out </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> is thrown if null is passed as the interface to be added </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.delInterface(com.pcbsys.nirvana.nAdminAPI.nInterface)">
             
              <summary>Deletes an existing Interface from the Realm Server. All current connections on this interface are
             disconnected immediatly.
              </summary>
             <param name="delInterface"> The interface to delete </param>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> is thrown if the underlying session to perform the AdminAPI request is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> is thrown if the server responds with an unexpected protocol response </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> is thrown if the protocol request times out </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if null is passed as the interface to be added </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.modInterface(com.pcbsys.nirvana.nAdminAPI.nInterface)">
             
              <summary>Changes the existing interface so that it takes the new settings supplied.
             This method will automatically start and stop the interface.
              *
             Note : When this method is called in the interface that you are connected to, the interface will drop your connection and you will be either reconnected and this method will return or an Exception will be thrown.
              </summary>
             <param name="modInterface"> Changed settings for the interface </param>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> is thrown if the underlying session to perform the AdminAPI request is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> is thrown if the server responds with an unexpected protocol response </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> is thrown if the protocol request times out </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if null is passed as the interface to be deleted </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.getNumberOfSHM">
             
              <summary>Returns the number of SHM interfaces that are currently configured on the Realm Server
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus"/>
             <returns> a count of SHM interfaces</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.getNumberOfNSP">
             
              <summary>Returns the number of NSP interfaces that are currently configured on the Realm Server
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus"/>
             <returns> a count of NSP interfaces</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.getNumberOfNHP">
             
              <summary>Returns the number of NHP interfaces that are currently configured on the Realm Server
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus"/>
             <returns> a count of NHP interfaces</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.getNumberOfNHPS">
             
              <summary>Returns the number of NHPS interfaces that are currently configured on the Realm Server
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus"/>
             <returns> a count of NHPS interfaces</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.getNumberOfNSPS">
             
              <summary>Returns the number of NSPS interfaces that are currently configured on the Realm Server
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus"/>
             <returns> a count of NSPS interfaces</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.getInterfaces">
             
              <summary>Returns an ArrayList of nInterfaceStatus objects that are currently configured on the Realm Server
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus"/>
             <returns> ArrayList of nInterfaceStatus objects </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.findInterface(System.String)">
             
              <summary>Finds the nInterface object identified by the string supplied
              </summary>
             <param name="name"> null if the interface does not exist </param>
             <returns> an nInterface Status object for the nInterface found or null of none could be found. </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if null or a zero length string is passed as the name of the interface to be found </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.stopInterface(com.pcbsys.nirvana.nAdminAPI.nInterface)">
             
              <summary>Stops the specified interface on the Realm Server
              </summary>
             <param name="inter"> The interface to stop </param>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> is thrown if the underlying session to perform the AdminAPI request is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> is thrown if the protocol request times out </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if null is passed as the interface to be stopped, or the interface specified
             can not be found </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager.startInterface(com.pcbsys.nirvana.nAdminAPI.nInterface)">
             
              <summary>Starts the interface, specified in the nInterface object, on the Realm Server
              </summary>
             <param name="inter"> The interface to start </param>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> is thrown if the underlying session to perform the AdminAPI request is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> is thrown if the protocol request times out </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if null is passed as the interface to be started, or
             the interface specified can not be found </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nInterfacePluginConfiguration">
            
             <summary>This class contains the plugin static information used by the plugin instances. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfacePluginConfiguration.getKeys">
            
             <summary>Returns an IEnumerator of strings which are the keys for the plugin. </summary>
              <returns> IEnumerator of strings. </returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfacePluginConfiguration.getDescription(System.String)">
            
             <summary>Returns the description for the key specified. </summary>
              * <param name="key"> string. </param>
              <returns> String description for the key. </returns>
             
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nInterfacePluginConfiguration.Name">
            
             <summary>Returns the name of the plugin. </summary>
              <returns> String name. </returns>
             
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nInterfacePluginConfiguration.Description">
            
             <summary>Returns a string containing information regarding this plugin.
             </summary>
              * <returns> String description. </returns>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus">
            
             <summary>Contains the status of a Nirvana Realm server interface </summary>
             
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.s_stopped">
             
              <summary>Indicates a stopped state on an interface </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.s_started">
             
              <summary>Indicates a started state on an interface </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.s_error">
             
              <summary>Indicates an interface with an error during startup </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getStatus">
             
              <summary>Returns the current status of this interface. Can be one of stopped, started, paused or error
              </summary>
             <returns> current status </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getInterface">
             
              <summary>This method returns the interface configuration details
              </summary>
             <returns> nInterface object containing the interface details </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getTotalAuthenticationTime">
             
              <summary>Return the total time spent authenticating connections
              </summary>
             <returns> long milliseconds </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getErrorMessage">
             
              <summary>Only valid if the state is s_error
              </summary>
             <returns> Exception message created during interface startup </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getWaitTime">
             
              <summary>Returns the total milliseconds that there was no accept thread processing
             new connections
              </summary>
             <returns> long milliseconds </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getPoolExhaused">
             
              <summary>Returns the total number of times the thread pool reached 0 idle
              </summary>
             <returns> long count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getTotalConnections">
             
              <summary>Returns the total number of connections created by this interface
              </summary>
             <returns> long count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getCurrentIdleCount">
             
              <summary>Returns the number of idle threads waiting for connections
              </summary>
             <returns> long count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getTotalFailedConnections">
             
              <summary>Returns the total number of connections which failed during the initial
             security handshake and validation
              </summary>
             <returns> long count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getTxBytes">
             
              <summary>Returns the number of bytes this interface has transmitted
              </summary>
             <returns> long byte count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getRxBytes">
             
              <summary>Returns the number of bytes this interface has received
              </summary>
             <returns> long byte count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getReadBandWidth">
            <summary>
            Return the amount of MBs read by this interface / second
            </summary>
            <returns>Current rate of MBs read</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getWriteBandWidth">
            <summary>
            Return the total amount of MBs written by this interface / second
            </summary>
            <returns>Total MBs written</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getTotalReads">
            <summary>
            Return the total amount of MBs read by this interface
            </summary>
            <returns>Total MBs read</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.getTotalWrites">
            <summary>
            Return the total amount of MBs written by this interface
            </summary>
            <returns>Total MBs written</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceStatus.ToString">
             
              <summary>Return a string repsentation of the interface configuration
              </summary>
             <returns> the string that represents the interface configuration </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceViaEntry">
            
             <summary>This contains the user@host parameters which are bound to an Interface. When a client connects the configured interfaces
              scan the Via list looking for a matching user@*, *@host and user@host. If a match is found and the client is not connecting
              via that interface the connection is disallowed. A client can appear in more than one interface.
             </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceViaEntry.#ctor(System.String,System.String)">
             
              <summary>Creates a new nInterfaceViaEntry for the name@host supplied. This will cause the server to confirm
             that when the client with name@host connects that they connect on the interface specified only.
              </summary>
             <param name="name"> Name for the subject </param>
             <param name="host"> Host name for the subject </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceViaEntry.#ctor(System.String)">
             
              <summary>Creates a new nInterfaceViaEntry for the name@host supplied. This will cause the server to confirm
             that when the client with name@host connects that they connect on the interface specified only.
              </summary>
             <param name="subject"> of the form user@host </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nInterfaceViaEntry.#ctor(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup)">
             
              <summary>Creates a new nInterfaceViaEntry for the name@host supplied. This will cause the server to confirm
             that when the client with name@host connects that they connect on the interface specified only.
              </summary>
             <param name="subject"> of the form user@host </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nJoinable">
            
             <summary>All classes that can be joined from one part of the namespace to another implement
              this interface. This allows easy manipulation of the nirvana namespace objects that
              can be joined together i.e. channels </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinable.join(com.pcbsys.nirvana.nAdminAPI.nNode,System.Boolean,System.Int32,System.String)">
             
              <summary>This method enables the joining of the object from one node to another, specifying a
             selector, and a maximum hop count for the events
              </summary>
             <param name="p_toNode"> the nNode object to join this node to </param>
             <param name="p_isRouted"> Reserved for future use. </param>
             <param name="p_hopcount"> if an event is published directly to this node (i.e. does not
             arrive here through another join), this is the maximum number of hops it will follow </param>
             <param name="p_Selector"> a message selector specifying a filter for this message route
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException"> thrown if join is not supported (e.g. on queues) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> is thrown if the join creation fails
              *
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinable.join(com.pcbsys.nirvana.nAdminAPI.nNode,System.Boolean,System.Int32,System.String,System.Boolean)">
             
              <summary>This method enables the joining of the object from one node to another, specifying a
             selector, and a maximum hop count for the events
              </summary>
             <param name="p_toNode"> the nNode object to join this node to </param>
             <param name="p_isRouted"> Reserved for future use. </param>
             <param name="p_hopcount"> if an event is published directly to this node (i.e. does not
             arrive here through another join), this is the maximum number of hops it will follow </param>
             <param name="p_Selector"> a message selector specifying a filter for this message route </param>
             <param name="allowPurge"> specifies whether the join will permit purges to be propogated to all subsequent channels in the join path
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException"> thrown if join is not supported (e.g. on queues) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> is thrown if the join creation fails
              *
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinable.join(com.pcbsys.nirvana.nAdminAPI.nNode,System.String)">
             
              <summary>This method enables the joining of the object from one node to another, specifying a
             selector for filtered joins
              </summary>
             <param name="p_toNode"> the nNode object to join this node to </param>
             <param name="p_selector"> a message selector specifying a filter for this message route
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException"> thrown if join is not supported (e.g. on queues) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> is thrown if the join creation fails
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nJoinDetails">
            
             <summary>This class contains information about a join between two channels. There is
              a nJoinDetails for both sides of a join. On a channel which sends the events
              this is known as a source channel and this class will return true to isSource()
              function.
             
              The source can also have a selector associacted with it while the channel
              receiving the events, the destination, has no selector associated with it.
             </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinDetails.ToString">
            
             <summary> Returns a string representation of this object </summary>
             <return> string representation of object </return>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinDetails.allowPurgeRequests">
             
              <summary>Return whether purge requests are permitted in this join. When you purge an event from a channel, you can specify whether to purge from any subsequent joined channels, like a cascade deletion.
             If this flag is set to true, any purge requests from the source channel to the destination channel / queue will be enforced. If false, purge requests will not be enforced on the destination channel / queue. </summary>
             <returns> whether purge requests are honoured </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinDetails.getSelector">
             
              <summary>Returns the selector used for the join. This is only applicable if the join is the source
             since the destination side of a join is not informed of the selector
              </summary>
             <returns> String selector </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinDetails.getRemoteNode">
             
              <summary>Returns the nLeafNode of the remote end of the join, if this is a source join then this returns
             the destination else it returns the source.
              </summary>
             <returns> nLeafNode remote channel / queue </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinDetails.isSource">
             
              <summary>Returns a boolean flag representive of whether the channel is the source side of the join
              </summary>
             <returns> boolean flag indicating if the channel to which the join details belongs is the source channel for the join </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinDetails.getLastEID">
             
              <summary>Returns the last Event ID sent to the remote join
              </summary>
             <returns> long eid </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinDetails.getHopCount">
             
              <summary>Returns the number of times an event will be passed over a join. Useful if you wish to limit the
             number of time an event is sent over the network.
              </summary>
             <returns> int hop count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nJoinDetails.isArchival">
            
             <summary>
             Returns true if this join is an archival join
             
             <returns> boolean is archival </returns>
             </summary>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode">
            
             <summary>This class represents the Nirvana Channel or Queue on the Nirvana Realm. The super class is nNode which implements
              Observable. When any details change for this object any registered Observers are notified with the change.
              The status functions may return 0 until the status events are received from the server.
             </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nNode"/>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nRemovable">
            
             <summary>All classes that can be removed from the namespace implement
              this interface. This allows easy manipulation of the nirvana namespace objects that
              can be deleted </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemovable.remove(System.Boolean)">
             
              <summary>This method enables the removal of the object from the namespace.
             If you specify true, all child nodes, including channels, queues and services
             will also be removed
              </summary>
             <param name="removeChildren"> a boolean specifying whether siblings should be removed too
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedRemoveException"> thrown if the remove operation is not supported on this node </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> is thrown if an error occurs in the remove operation
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLinkNode"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.closed(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
            
             <summary> Called when the nRealmNode is closed,  for internal use only. </summary>
             <param name="node"> The nRealmNode which has been closed </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getRealm">
             
              <summary>Returns the Realm Node this leaf node is associated with. Please note this might not be the root of the namespace
             but a federated realm.
              </summary>
             <returns> nRealmNode value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getCacheHitRatio">
             
              <summary>Retreives the channel/queues cache ratio. This ratio represents the (number of cache hits)/(Total Access).
             This cache is only active when the channel/queue is a persistant store and the server caches the event instead
             of re-reading it from the store again.
              </summary>
             <returns> float value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getCurrentNoOfConnections">
             
              <summary>Retrieves the current number of connections to this channel
              </summary>
             <returns> long value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getCurrentNumberOfEvents">
             
              <summary>Returns the number of events within the channel/queue
              </summary>
             <returns> long value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getLastEID">
             
              <summary>Returns the last EID that was used for the channel/queue
              </summary>
             <returns> long value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getPercentageFreeInStore">
             
              <summary>Returns the amount of free space within a store as a percentage of the overall space used
              </summary>
             <returns> int value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getTotalConsumed">
             
              <summary>Returns the total number of events that this channel has delivered to subscribers
              </summary>
             <returns> long value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getTotalNoOfConnections">
             
              <summary>Returns the total number of connections that this channel has had since the realm started
              </summary>
             <returns> long value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getTotalPublished">
             
              <summary>Returns the total number of events published/pushed to this channel/queue since the realm has started
              </summary>
             <returns> long value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getPublishRate">
             
              <summary>The number of events published per second
              </summary>
             <returns> int value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getFanoutTime">
            
             <summary>The total number of milliseconds it takes to fanout each event to all consumers</summary>
            
             <returns>long value</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getConsumedRate">
             
              <summary>The number of events published per second
              </summary>
             <returns> float value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getConnectionRate">
             
              <summary>The number of subscriptions made to this store per second
              </summary>
             <returns> float value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getUsedSpace">
             
              <summary>Returns the number of bytes that this channel/queue consumes on the server
              </summary>
             <returns> long value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.freeUnusedSpace">
             
              <summary>Requests that the Realm frees the unused space within this channel/queue. If the Channel/Queue has a large number
             of events it could take some time to perform. It is recommended to do this during quiet periods.
              </summary>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> If the user does not have the permission to request this </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getAttributes">
             
              <summary>Returns the channel attributes for this channel/queue.
              </summary>
             <see cref="T:com.pcbsys.nirvana.client.nChannelAttributes"/>
             <returns> nChannelAttributes </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.findDeadEventStore">
            
             <summary> Returns the dead event store if one exists </summary>
             <return> The dead event store if one exists, null otherwise </return>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getInboundJoins">
             
              <summary>Returns an IEnumerator of nJoinDetails objects containing information about channels
             sending events to this channel
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nJoinDetails"/>
             <returns> IEnumerator </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getOutboundJoins">
             
              <summary>Returns an IEnumerator of nJoinDetails objects containing information about channels
             that this channel will pass events to
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nJoinDetails"/>
             <returns> IEnumerator </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getOutboundJoinCount">
             
              <summary>Returns a count of outbound joins from this channel
              
              </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nJoinDetails"/>
              <returns> count of joins </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.isChannel">
             
              <summary>Returns true if this represents a nirvana channel
              </summary>
             <returns> boolean value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.isQueue">
             
              <summary>Returns true if this represents a nirvana queue
              </summary>
             <returns> boolean value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.isClusterWide">
             
              <summary>Returns true if this represents a nirvana channel or queue that is part of a cluster
              </summary>
             <returns> boolean value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.addACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Adds a specific acl entry to the leaf node acl
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to add to the leaf node acl </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.addACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
              <summary>Adds a list of acl entries to the leaf nodes acl</summary>
            
              <param name="entries"> an nACL object containing the list of nACLEntries to add to the existing ACL for this leaf node </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.removeACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>removes a specific acl entry from the leaf node acl.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to remove from the leaf node acl </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.removeACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
              <summary>Removes the acl entries from the leaf nodes ACL</summary>
            
              <param name="entries"> an nACL object containing the list of nACLEntries to remove from the existing ACL for this leaf node </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.modACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>modifies a specific acl entry's permissions in the leaf node acl.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to modify in the leaf node acl </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.modACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
              <summary>Modifies the acl entries for the leaf nodes ACL</summary>
            
              <param name="entries"> an nACL object containing the list of nACLEntries to be modified for the existing ACL for this leaf node </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.setACLs(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Commits the ACL passed in with the Realm Server. This causes these ACLs to be active once the function
             returns. The nACL object can be retrieved by calling the getACLs() function which returns the channel/queues
             current list.
              </summary>
             <param name="acl"> A nACL containing nChannelACLEntry </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.getACLs">
             
              <summary>Retrieves the channel/queues ACLs which can then be modified and committed with the setACLs() function
              </summary>
             <returns> The list of nChannelACLEntry in a nACL object </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If this user is not permissioned to view this data </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.addListener(com.pcbsys.nirvana.nAdminAPI.nConnectionListener)">
             
              <summary>Registers the listener object with the channel/queue so that whenever a connection is made or lost with the channel
             such as a subscriber is added the listener is notified of the change in state of the channel.
             Currently only one listener per session is supported.
              </summary>
             <param name="listener"> the connection listener to be added to the leaf node (channel or queue) </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionListener"/>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if the user is not permitted to access these lists, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.delListener">
             
              <summary>Removes the registered listener from the channel so no further callbacks are made to the listener
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionListener"/>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if the user is not permitted to access these lists </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.createACL">
               
             <summary>This method allows you to construct a new nACL object, useful when creating new channels with an initial ACL list
             </summary>
             * <returns> new nACL object </returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.remove(System.Boolean)">
             
              <summary>This method removes this leafNode (channel or queue) from its parent RealmNode.
              </summary>
             <param name="removeChildren"> a boolean specifying whether siblings should be removed too. Specify false,
             as leafNodes do not have children
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedRemoveException"> thrown if join is not supported (e.g. on queues) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> is thrown if an error occurs in the remove operation
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLinkNode"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.copy(com.pcbsys.nirvana.nAdminAPI.nNode,System.String,System.Boolean,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nCommandStatus)">
             
              <summary>Copies this leafNode (channel or queue) to a new LeafNode (channel or queue) within the RealmNode
             passed as a parameter, with the specfied channel name.
              *
             Using this method, allows LeafNodes to be copied to other realms within the namespace
              *
             The channel name used for the new copied LeafNode must be unique in the destination realm
              </summary>
             <param name="p_toNode"> The nRealmNode to copy the channel to </param>
             <param name="p_toName"> The name of the new LeafNode (channel or queue) </param>
             <param name="p_waitForComplete"> Specifies whether the method returns before copy operation has completed </param>
             <param name="acl"> an optional initial acl object that will be set on the object being copied </param>
             <param name="cmdStatus"> an optional nCommandStatus object that will inform you of the operation status </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException"> Thrown if copy is not supported
             @deprecated As of version 2.0 </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.copy(System.String,System.Boolean,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nCommandStatus)">
             
              <summary>Copies this leafNode (channel or queue) to a new LeafNode (channel or queue) within same realm
             with the specfied channel name.
              *
             The channel name used for the new copied LeafNode must be unique in the realm
              </summary>
             <param name="p_toName"> The name of the new LeafNode (channel or queue) </param>
             <param name="p_waitForComplete"> Specifies whether the method returns before copy operation has completed </param>
             <param name="acl"> an optional initial acl object that will be set on the object being copied </param>
             <param name="cmdStatus"> an optional nCommandStatus object that will inform you of the operation status </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException"> Thrown if copy is not supported
             @deprecated As of version 2.0 </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.copy(com.pcbsys.nirvana.nAdminAPI.nNode,System.Boolean,com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nCommandStatus)">
             
              <summary>Copies this leafNode (channel or queue) to a new LeafNode (channel or queue) within the RealmNode
             passed as a parameter, with the specfied channel attributes.
              *
             Using this method, allows LeafNodes to be copied to other realms within the namespace
              *
             Attributes can be different on the copied channel, such as ttl, capacity and type
              </summary>
             <param name="p_toNode"> The nRealmNode to copy the channel to </param>
             <param name="p_waitForComplete"> Specifies whether the method returns before copy operation has completed </param>
             <param name="p_attr"> The channel attributes of the new LeafNode </param>
             <param name="acl"> an optional initial acl object that will be set on the object being copied </param>
             <param name="cmdStatus"> an optional nCommandStatus object that will inform you of the operation status </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException"> Thrown if copy is not supported </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.copy(com.pcbsys.nirvana.nAdminAPI.nNode,System.Boolean,com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nCommandStatus)">
             
              <summary>Copies this leafNode (channel or queue) to a new LeafNode (channel or queue) within the RealmNode
             passed as a parameter, with the specfied channel attributes.
              *
             Using this method, allows LeafNodes to be copied to other realms within the namespace
              *
             Attributes can be different on the copied channel, such as ttl, capacity and type
              </summary>
             <param name="p_toNode"> The nRealmNode to copy the channel to </param>
             <param name="p_waitForComplete"> Specifies whether the method returns before copy operation has completed </param>
             <param name="p_attr"> The channel attributes of the new LeafNode </param>
             <param name="cmdStatus"> an optional nCommandStatus object that will inform you of the operation status </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException"> Thrown if copy is not supported </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.copy(System.Boolean,com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nCommandStatus)">
             
              <summary>Copies this leafNode (channel or queue) to a new LeafNode (channel or queue) within the same
             realm node with the specfied channel attributes.
              *
             Attributes can be different on the copied channel, such as ttl, capacity and type
              </summary>
             <param name="p_waitForComplete"> Specifies whether the method returns before copy operation has completed </param>
             <param name="p_attr"> The channel attributes of the new LeafNode </param>
             <param name="acl"> an optional initial acl object that will be set on the object being copied </param>
             <param name="cmdStatus"> an optional nCommandStatus object that will inform you of the operation status </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException"> Thrown if copy is not supported </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.deleteJoin(com.pcbsys.nirvana.nAdminAPI.nNode)">
             
              <summary>This method deletes the join between nodes. This is only supported where the source node is a channel
              </summary>
             <param name="p_toNode"> the nNode object this node is joined to
              </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException"> thrown if join is not supported (e.g. from queues) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> is thrown if the join deletion fails
             </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.join(com.pcbsys.nirvana.nAdminAPI.nNode,System.Boolean,System.Int32,System.String)">
             
              <summary>This method enables the joining of the object from one node to another, specifying a
             selector, and a maximum hop count for the events. This is only supported on channel
             objects.
              </summary>
             <param name="p_toNode"> the nNode object to join this node to </param>
             <param name="p_isRouted"> Reserved for future use. </param>
             <param name="p_hopcount"> if an event is published directly to this node (i.e. does not
             arrive here through another join), this is the maximum number of hops it will follow </param>
             <param name="p_Selector"> a message selector specifying a filter for this message route
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException"> thrown if join is not supported (e.g. on queues) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> is thrown if the join creation fails
             </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.join(com.pcbsys.nirvana.nAdminAPI.nNode,System.Boolean,System.Int32,System.String,System.Boolean)">
             
              <summary>This method enables the joining of the object from one node to another, specifying a
             selector, and a maximum hop count for the events. This is only supported on channel
             objects.
              </summary>
             <param name="p_toNode"> the nNode object to join this node to </param>
             <param name="p_isRouted"> Reserved for future use. </param>
             <param name="p_hopcount"> if an event is published directly to this node (i.e. does not
             arrive here through another join), this is the maximum number of hops it will follow </param>
             <param name="p_Selector"> a message selector specifying a filter for this message route </param>
             <param name="allowPurges"> whether purges will be propagated to the joined channel
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException"> thrown if join is not supported (e.g. on queues) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> is thrown if the join creation fails
             </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.join(com.pcbsys.nirvana.nAdminAPI.nNode,System.String)">
             
              <summary>This method enables the joining of the object from one node to another, specifying a
             selector for filtered joins
              </summary>
             <param name="p_toNode"> the nNode object to join this node to </param>
             <param name="p_Selector"> the filter to be applied to the join
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException"> thrown if join is not supported (e.g. on queues) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> is thrown if the join creation fails
             </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.archiveJoin(com.pcbsys.nirvana.nAdminAPI.nNode,System.String)">
            
            <summary> This method enables the joining of the object from one node to another, specifying a
            selector for filtered joins</summary>
            
             <param name="p_toNode"> the nNode object to join this node to</param>
             <param name="p_Selector"> the filter to be applied to the join</param>
            
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException">  thrown if join is not supported (e.g. on queues)</exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException">is thrown if the join creation fails</exception> 
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.nChannelListener.newConnection(System.String,System.String[],System.String,System.String,System.String)">
               
                <summary>
                </summary>
                <param name="connectionId">  </param>
                <param name="subject">  </param>
                <param name="filter">  </param>
                
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLeafNode.nChannelListener.delConnection(System.String)">
               
                <summary>
                </summary>
                <param name="connectionId">  </param>
                
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nLinkNode">
            
             <summary>Since the Nirvana namespace can contain multiple links to Nirvan Realm servers at
              different parts of the namespace, including namespace loops, this node represents
              a RealmServer which has been mounted elseware in the namespace. It is basically
              a placeholder within the namespace and can be used by the application to stop looping
              through the namespace and to render the node differently or perhaps display a link
              between this node and the other nRealmNode.
             </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLinkNode.closed(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
            
             <summary> Called when the nRealmNode is closed,  for internal use only. </summary>
             <param name="node"> The nRealmNode which has been closed </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLinkNode.getRealmNode">
             
              <summary>Returns the actual nRealmNode to the application
              </summary>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
             <returns> nRealmNode object of the real Realm Server </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLinkNode.remove(System.Boolean)">
             
              <summary>This method enables the removal of the object from the namespace, in this case a RealmNode from
             the namespace.
             If you specify true, all child nodes, including channels, queues and services
             will also be removed from the realm before removing it from its parent
              </summary>
             <param name="removeChildren"> a boolean specifying whether siblings should be removed too
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedRemoveException"> thrown if remove is not supported (e.g. on the namespace root Realm) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> is thrown if an error occurs in the remove operation
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nLogListener">
            
             <summary>Classes that implement this interface can register with the nRealmNode.addLogListener() to receive
              the realms log events. Depending on the fLogger setting in the configuration for the realm this could
              result in a large amount of data being delivered. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nLogListener.report(System.String)">
             
              <summary>This method is called by the nRealmNode to inform the user object of a new log event. The event
             contains the date/time, the severity and the text of the event
              </summary>
             <param name="message"> date/time:severity:text message </param>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.DigestNames">
            <summary>
            This property is for internal use only
            </summary>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.EncryptionLevel">
            <summary>
            This property is for internal use only
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.#ctor(System.String,System.String)">
             Creates a new multicast configuration with the supplied values
            
             @param multicastAddress The multicast address to use to bind to
             @param adapter the address of the adapter to bind the multicast too.
             @throws nAdminIllegalArgumentException if the adapter is null or the port is in an invalid range
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.#ctor(System.String,System.String,System.Boolean)">
             Creates a new multicast configuration with the supplied values
            
             @param multicastAddress The multicast address to use to bind to
             @param adapter the address of the adapter to bind the multicast too.
             @param enabled Specifies whether to enable this configuration
             @throws nAdminIllegalArgumentException if
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getMulticastAddress">
             Returns the multicast address for this configuration
            
             @return String of the address
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setMulticastAddress(System.String)">
             Sets the multicast address for this configuration
            
             @param multicastAddress as a string
             @throws nAdminIllegalArgumentException if an invalid multicast address is used
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getMode">
             Get the acknowledgement mode
            
             @return the currently used ack mode
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setMode(System.Byte)">
             Set the acknowledgement mode
            
             @param mode the multicast ack mode
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getOutstandingPacketsQueueSize">
             Gets the allowable size of the outstanding packets queue on the sending side.
            
             These packets are outstanding from receivers to be acknowledge
            
             @return OutstandingPacketsQueueSize as a int
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setOutstandingPacketsQueueSize(System.Int32)">
             Sets the allowable size of the outstanding packets queue on the sending side.
             These packets are outstanding from receivers to be acknowledge
            
             @param outstandingPacketsQueueSize as a int
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getAckWindowSize">
             Returns the number of packets before sending an ack for received events
            
             @return ackWindowSize as a int
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setAckWindowSize(System.Int32)">
             Sets the number of packets before sending an ack for received events
            
             @param ackWindowSize ackWindowSize as a int
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getUnAckedWindowSize">
             Returns the number of outstanding packets allowed to be on the wire without acknowledgement.
            
             @return int amount of packets on the wire.
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setUnAckedWindowSize(System.Int32)">
             Returns the number of outstanding packets allowed to be on the wire without acknowledgement.
            
             @param unAckedWindowSize amount of packets on the wire.
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getRotateEncryptionKeyCount">
             Returns the packet count to wait before rotating the new encryption key into use.
            
             @return int packet count
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setRotateEncryptionKeyCount(System.Int32)">
            Sets the packet count to wait before rotating the new encryption key into use.
            @param rotateEncryptionKeyCount int
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getRotateEncryptionKeyTime">
             Returns the time between encryption key changes.
            
             @return int the encryption key rotation time
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setRotateEncryptionKeyTime(System.Int32)">
             Sets the time between encryption key changes.
            
             @param rotateEncryptionKeyTime int
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getCRCType">
             Returns the CRC type for guaranteed data integrity, will need to be compared to nMulticastConfiguration.DigestNames.
            
             Possible values are:
             nMulticastConfiguration.DigestNames[0], disables CRC checking.
             nMulticastConfiguration.DigestNames[1], uses CRC32 for CRC checks.
             nMulticastConfiguration.DigestNames[2], uses MD5 digest for CRC checks.
             nMulticastConfiguration.DigestNames[3], uses SHA-5 digest for CRC checks.
            
             @return returns a byte of CRC type
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setCRCType(System.Byte)">
             Sets the CRC type for guaranteed data integrity, will need to be compared to nMulticastConfiguration.DigestNames.
            
             Possible values are:
             0, disables CRC checking.
             1, uses CRC32 for CRC checks.
             2, uses MD5 digest for CRC checks.
             3, uses SHA-5 digest for CRC checks.
            
             @param CRCType one of the DigestNames
             @throws nAdminIllegalArgumentException if CRCType outside of possible values
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getEncryptionLevel">
             Returns the encryption level, can be one of nMulticastConfiguration.EncryptionLevel
            
             Possible values are:
             nMulticastConfiguration.EncryptionLevel[0], disables encryption.
             nMulticastConfiguration.EncryptionLevel[1], uses AES-128 encryption.
             nMulticastConfiguration.EncryptionLevel[2], uses AES-192 encryption.
             nMulticastConfiguration.EncryptionLevel[3], uses AES-256 encryption.
            
             @return byte encryption level
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setEncryptionLevel(System.Byte)">
             Sets the encryption level, can be one of nMulticastConfiguration.EncryptionLevel
            
             Possible values are:
             nMulticastConfiguration.EncryptionLevel[0], disables encryption.
             nMulticastConfiguration.EncryptionLevel[1], uses AES-128 encryption.
             nMulticastConfiguration.EncryptionLevel[2], uses AES-192 encryption.
             nMulticastConfiguration.EncryptionLevel[3], uses AES-256 encryption.
            
             @param encryptionLevel one of the above possible values
             @throws nAdminIllegalArgumentException if encryptionLevel outside of possible values
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getFlusherInterval">
             Returns the interval in milliseconds between flushes to the wire for packets.
            
             Higher intervals increase latency and throughput.
            
             @return int flusher interval
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setFlusherInterval(System.Int32)">
             Sets the interval in milliseconds between flushes to the wire for packets.
            
             Higher intervals increase latency and throughput.
            
             Minimum time between flushes is 1ms
            
             @param flusherInterval the time between flushes.
             @throws nAdminIllegalArgumentException if flusherInterval less than 1
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getKeepAliveInterval">
             Returns the interval between keep alive messages sent.
            
             @return int keep alive interval in milliseconds
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setKeepAliveInterval(System.Int32)">
             Sets the interval between sending of keep alive messages, must be greater than 0.
            
             @param keepAliveInterval interval in milliseconds
             @throws nAdminIllegalArgumentException if keepAliveInterval less than 1
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getMaxOutstandingPackets">
             Returns the number of allowable unprocessed packets on the receiving side whilst rebuilding missed or out of order packets.
            
             @return int maxOutstandingPackets
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setMaxOutstandingPackets(System.Int32)">
            Sets the number of allowable unprocessed packets on the receiving side whilst rebuilding missed or out of order packets.
            @param maxOutstandingPackets int
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getPeakRate">
             Returns the quantity of Nirvana messages per second that when exceeded will enable peak writing mode.
            
             @return int Nirvana messages per second for peak writing.
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setPeakRate(System.Int32)">
             Sets the quantity of Nirvana messages per second that when exceeded will enable peak writing mode.
            
             @param messagesPerSecond Nirvana messages per second for peak writing.
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.isUseForCluster">
             Gets the flag to allow use of this configuration in a cluster
            
             @return boolean indicating if its enabled or not
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setUseForCluster(System.Boolean)">
            Sets the flag to allow use of this configuration in a cluster
            @param useForCluster boolean indicating whether to use for clustering or not
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.isUseForDataGroups">
             Gets the flag to allow use of this configuration for datagroups
            
             @return boolean indicating if its enabled or not
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setUseForDataGroups(System.Boolean)">
            Sets the flag to allow use of this configuration for datagroups
            @param useForDataGroups boolean indicating whether to use for data groups or not
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.isUseForStatusUpdate">
             Gets the flag to allow use of this configuration for status updates
            
             @return boolean indicating if its enabled or not
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setUseForStatusUpdae(System.Boolean)">
            Sets the flag to allow use of this configuration for status updates from the ream
            @param useForStatusUpdates boolean indicating whether to use for status updates or not
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.isUseForChannels">
             Gets the flag to allow use of this configuration for channels
            
             @return boolean indicating if its enabled or not
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setUseForChannel(System.Boolean)">
            Sets the flag to allow use of this configuration for channels
            @param useForChannel boolean indicating whether to use for channels or not
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getClientEstablishmentTimeout">
             The time to wait for a client to establish multicast, if they do not receive any multicast data within this time its assumed they are unable to use multicast.
            
             @return the time in seconds to wait before removing a client from multicast.
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setClientEstablishmentTimeout(System.Int64)">
            The time to wait for a client to establish multicast, if they do not receive any multicast data within this time its assumed they are unable to use multicast.
            @param clientEstablishmentTimeout seconds to wait before removing a client from trying multicast
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getAdapter">
            Returns the adapter that will be bound too for sending multicast.
            @return the adapter address for multicast to bind on.
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setAdapter(System.String)">
            Sets the adapter to bind the multicast server to.
            @param adapter the local adapters IP address for multicast to bind to
            @throws nAdminIllegalArgumentException if an invalid address is given
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getAdapterBufferSize">
            Returns the size of the adapter buffers to use for both sending and receiving of packets
            @return int adapter buffer size in bytes
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setAdapterBufferSize(System.Int32)">
            Sets the size of the adapter buffers to use for both sending and receiving of packets
            @param adapterBufferSize int size fo adapter buffer in bytes
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getTrafficClass">
            Returns the multicast traffic class set for this configuration
            @return byte multicast traffic class
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setTrafficClass(System.Byte)">
            Returns the multicast traffic class set for this configuration
            @param myQOS multicast traffic class
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getPacketSize">
            Maximum data size for a datagram, excludes the datagram headers
            @return int maximum datagram size
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setPacketSize(System.Int32)">
            Maximum data size for a datagram, excludes the datagram headers
            @param myPacketSize int maximum packet size
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getUniqueSessionIDSize">
            Returns the length of the session ID used for ensuring integrity and increasing security of data
            @return int the length of the session ID
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setUniqueSessionIDSize(System.Int32)">
            Sets the length of the session ID used for ensuring integrity and increasing security of data
            @param myUniqueSessionIDSize the length of the session ID
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.getTTL">
            Returns the TTL for the multicast socket, this is the count of hops a datagram can traverse before being dropped.
            @return short of hops before dropping packet
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration.setTTL(System.Int16)">
            Sets the TTL for the multicast socket, this is the count of hops a datagram can traverse before being dropped.
            @param myTTL short count of hops to traverse
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfigurationStatus.getBytesSent">
            Returns the number of bytes sent by this multicast instance
            @return int bytes sent
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfigurationStatus.getMulticastName">
            Returns the name of this multicast instance
            @return string name of the multicast instance
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfigurationStatus.getResetsSent">
            Returns the number of connection resets by this multicast instance.
            @return The number of resets
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfigurationStatus.getRetransmittedPackets">
            Returns the number of retransmitted packets due to loss or delay
            @return int number of retransmitted packets
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfigurationStatus.getTotalPacketsSent">
            Returns the total packets sent by this multicast instance
            @return int total packets sent
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfigurationStatus.getUnAckedPacketQueueSize">
            The size of unacked/outstanding packet queue size on the server
            @return int outstanding packet queue size
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfigurationStatus.getResourceName">
            
                 <summary> Returns the name of the resource associated with this status instance </summary>
                 <returns> a String name for the resource </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastConfigurationStatus.getCurrentClientCount">
            The Count of currently connected clients to this multicast Instance
            @return int count of current clients
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastManager.getMulticastConfigurations">
             Returns a vector of nMulticastConfiguration objects that are currently configured on the Realm Server
            
             @return a Vector of nMulticastConfiguration objects
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastManager.addMulticastConfiguration(com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration)">
             Adds a new multicast configuration to the Realm Server. If Autostart is set to true then the interface is also started
            
             @param newConfiguration The new multicast configuration
             @throws com.pcbsys.nirvana.client.nSessionNotConnectedException  is thrown if the underlying session to perform the AdminAPI request is not connected
             @throws com.pcbsys.nirvana.client.nUnexpectedResponseException   is thrown if the server responds with an unexpected protocol response
             @throws com.pcbsys.nirvana.client.nRequestTimedOutException      is thrown if the protocol request times out
             @throws nAdminIllegalArgumentException is thrown if null is passed as the interface to be added
             @throws nAdminSecurityException        is thrown if used on a virtual realm
             @throws com.pcbsys.nirvana.client.nSessionPausedException        is thrown if session paused
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastManager.delMulticastConfiguration(com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration)">
             Deletes an existing multicast configuration from the Realm Server.
            
             @param delConfiguration The configuration to delete
             @throws nSessionNotConnectedException  is thrown if the underlying session to perform the AdminAPI request is not connected
             @throws nUnexpectedResponseException   is thrown if the server responds with an unexpected protocol response
             @throws nRequestTimedOutException      is thrown if the protocol request times out
             @throws nAdminIllegalArgumentException if null is passed as the interface to be added
             @throws nAdminSecurityException        is thrown if used on a virtual realm
             @throws nSessionPausedException        is thrown if session paused
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastManager.modifyMulticastConfiguration(com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration)">
             Changes the existing multicast configuration so that it takes the new settings supplied.
            
             @param modMulticastConfiguration Changed the multicast configuration
             @throws nSessionNotConnectedException  is thrown if the underlying session to perform the AdminAPI request is not connected
             @throws nUnexpectedResponseException   is thrown if the server responds with an unexpected protocol response
             @throws nRequestTimedOutException      is thrown if the protocol request times out
             @throws nAdminIllegalArgumentException if null is passed as the interface to be deleted
             @throws nSessionPausedException        is thrown if session paused
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastManager.getNumberOfConfigurations">
             Returns the number of multicast configurations that are currently on the Realm Server
            
             @return a count of multicast configurations
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastManager.findInterface(System.String)">
             Finds the nMulticastConfiguration object identified by the string supplied
            
             @param name to find
             @return an nMulticastConfiguration object for the configuration found or null of none could be found.
             @throws nAdminIllegalArgumentException if null or a zero length string is passed as the name of the configuration to be found
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastManager.disableConfiguration(com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration)">
             Disables the specified configuration on the Realm Server
            
             @param config The configuration to disable
             @throws nSessionNotConnectedException  is thrown if the underlying session to perform the AdminAPI request is not connected
             @throws nRequestTimedOutException      is thrown if the protocol request times out
             @throws nAdminIllegalArgumentException if null is passed as the configuration to be disabled, or the configuration specified can not be found
             @throws nSessionPausedException        if session is paused
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nMulticastManager.enableConfiguration(com.pcbsys.nirvana.nAdminAPI.nMulticastConfiguration)">
             Enables the configuration, specified in the nMulticastConfiguration object, on the Realm Server
            
             @param config The configuration to enable
             @throws nSessionNotConnectedException  is thrown if the underlying session to perform the AdminAPI request is not connected
             @throws nRequestTimedOutException      is thrown if the protocol request times out
             @throws nAdminIllegalArgumentException if null is passed as the configuration to be enabled, or the configuration specified can not be found
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nNodeException">
            
             <summary>represents the exception class that is thrown when
              errors occur constructing the nodes to be administered </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nNodeException.#ctor">
            
               <summary>Creates the exception with the default message "Unknown exception occurred during node operation"
               </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nNodeException.#ctor(System.String)">
            
               <summary>Creates the exception with the specified message
               </summary>
              <param name="msg"> Message string </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.nAdminEventListener">
            
             <summary>This interface should be implemented by any object that wishes to register
              itself as a subscriber to nirvana admin events </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminEventListener.adminEvent(com.pcbsys.nirvana.nbase.events.nEvent)">
             
               <summary>This method is asynchronously called by the nirvana admin API to deliver
               * status events to a registered subscriber.
               </summary>
               * <param name="evt"> The nConsumeEvent object specifying the event being delivered. </param>
               
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.nConfigListener">
            
             <summary>This interface should be implemented by any object that wishes to register
              itself to receive Nirvana Realm Server configuration data </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nConfigListener.go(System.Collections.ArrayList)">
            
              <summary>This method is asynchronously called by the nirvana client API to deliver
             an configuration data to a registered subscriber.
              </summary>
             <param name="evt"> The nConsumeEvent object specifying the event being delivered. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nConnectionListener.newConnection(System.String,com.pcbsys.foundation.security.fSubject,System.String,System.String)">
             
              <summary>This method is called asynchronously when a new connection is added to the
             nirvana channel.
              </summary>
             <param name="connectionId"> The channel connection's iD </param>
             <param name="subject"> A string representation of the subject associated with the channel connection </param>
             <param name="filter"> A string representation of the filter associated with the channel connection
             </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nConnectionListener.delConnection(System.String,System.Boolean)">
             
              <summary>This method is called asynchronously when a connection is removed from the
             nirvana channel.
              </summary>
             <param name="connectionId"> The channel connection's iD
             </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.nStatusListener">
            
             <summary>This interface should be implemented by any object that wishes to register
              itself as a subscriber to a nirvana status channel </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nStatusListener.go(com.pcbsys.nirvana.nbase.nServerStatus)">
            
              <summary>This method is asynchronously called by the nirvana admin API to deliver
             status events to a registered subscriber.
              </summary>
             <param name="evt"> The nConsumeEvent object specifying the event being delivered. </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nPluginConfigEntry">
            
             <summary> Contains information for a plugin configuration entry.
             
              This data contains the name of the configuration, a description of what this entry does and the current value. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nPluginConfigEntry.ToString">
            
             <summary>String of the object. </summary>
              <returns> string representation. </returns>
             
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nPluginConfigEntry.Name">
            
             <summary>Returns the name of the configuration entry.
             </summary>
              <returns> name. </returns>
             
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nPluginConfigEntry.Description">
            
             <summary>Returns the a string describing what this configuration entry is. </summary>
              <returns> description. </returns>
             
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nPluginConfigEntry.Value">
            
             <summary>Returns the current value. </summary>
              <returns> value. </returns>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nPluginConfiguration">
            
             <summary>This class contains the configuration context for a single plugin on a single HTTP type interface.
             
              A single interface can have many nPluginConfiguration objects defined, each one specifying what type of processing
              is done within the URI of the request.
             </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nPluginConfiguration.#ctor(com.pcbsys.nirvana.nAdminAPI.nInterfacePluginConfiguration,System.String)">
            
             <summary> Constructs an empty configuration object binding the specified nInterfacePluginConfiguration to the URI. </summary>
              <param name="config"> to bind. </param>
              <param name="URI"> where to bind. </param>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nPluginConfiguration.getMountPoint">
            
             <summary>Returns the URI where the Realm Server will pass the request off to this plugin.
             </summary>
              <returns> URI mount point. </returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nPluginConfiguration.size">
            
             <summary>Returns the total number of configuration entries for this plugin. </summary>
              <returns> integer size. </returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nPluginConfiguration.elementAt(System.Int32)">
            
             <summary>Get the Config Entry specified by the index.
             </summary>
              <param name="index"> of the config entry to retreive </param>
              <returns> config entry. </returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nPluginConfiguration.ToString">
            
             <summary>Returns the name of the configuration
             </summary>
              <returns> String name </returns>
             
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nPluginConfiguration.Name">
            
             <summary>Return the name of the plugin.
              This would be the type of plugin, XML, SOAP, file etc.
             </summary>
              <returns> string name. </returns>
             
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry">
            
             <summary>Extends the nACLEntry class to expose the Realm specific permissions
             </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.#ctor(System.String,System.String)">
             
              <summary>Creates a new nRealmACLEntry with the supplied name@host. This class is used to manage
             subjects and their privileges they have on a realm.
              </summary>
             <param name="name"> The name of the subject </param>
             <param name="host"> The host name for the subject </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.#ctor(System.String)">
            
              <summary>Creates a new nRealmACLEntry with the supplied name@host. This class is used to manage
             subjects and their privileges they have on a realm.
              </summary>
             <param name="subject"> of the form user@host </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.#ctor(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup)">
            
              <summary>Creates a new nRealmACLEntry with the supplied name@host. This class is used to manage
             subjects and their privileges they have on a realm.
              </summary>
             <param name="subject"> of the form user@host </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.#ctor(System.String,com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
            
              <summary>Creates a new nRealmACLEntry with the supplied name@host. This class is used to manage
             subjects and their privileges they have on a realm.
              </summary>
             <param name="subject"> of the form user@host </param>
             <param name="copy"> An nACLEntry to copy the current permissions from </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canUseAdminAPI">
             
              <summary>Any subject with this permission set can perform the following functions on a realm
              *
             Disconnect users from the realm
             Set ACLs for channels, queues and the realm
             Retrieve a list of all channels, queues, joins and connected realms
             Set Client Timeout values
             Set/Get Realm Configuration values for the realm
              *
             Some of these functions also depend on other permissions being set as well
              </summary>
             <returns> The current configuration </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setUseAdminAPI(System.Boolean)">
             
              <summary>Allows/Disallows this subject from accessing the realms Admin API functions
              </summary>
             <param name="val"> Boolean value to set </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canManageRealm">
             
              <summary>Can this Subject add/remove remote realms into this realms namespace.
              </summary>
             <returns> The current configuration </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setManageRealm(System.Boolean)">
             
              <summary>Allows/Disallows this client from adding/removing remote realms into the namespace
              </summary>
             <param name="val"> Boolean value to set </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canManageJoins">
             
              <summary>Can this subject create/remove/list joins between channels within the namespace
              </summary>
             <returns> The current configuration </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setManageJoins(System.Boolean)">
             
              <summary>Allows/Disallows this subject from managing the joins between channels within the namespace
              </summary>
             <param name="val"> Boolean value to set </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canManageChannels">
             
              <summary>Can this subject make/delete or perform maintance on channels within this realm. This
             permission is extends only for this realm within the namespace.
              </summary>
             <returns> The current configuration </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setManageChannels(System.Boolean)">
             
              <summary>Allow/Disallows this subject from making/deleteing or performing maintenance on any channel on the realm
              </summary>
             <param name="val"> Boolean value to set </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canAccessTheRealm">
             
              <summary>Can this Subject connect and use this realm. If false the subject will be disconnected during
             the authentication stage.
              </summary>
             <returns> The current configuration </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setAccessTheRealm(System.Boolean)">
             
              <summary>Allows/Disallows this subject the ability to connect and use the realm
              </summary>
             <param name="val"> Boolean value to set </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canOverrideConnectionCount">
             
              <summary>Can this subject bypass the Realms maximum connection count. Typically all administrators would
             have this set so that a realm could be started with the user count set to a low number to allow
             a managed restart for example. Any user with this set will not check the current user count. This is
             not a license restriction, rather it is up to the end user to set the user count and these settings
             accordingly
              </summary>
             <returns> The current configuration </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setOverrideConnectionCount(System.Boolean)">
             
              <summary>Allow/Disallows the subject from overriding the maximum connection count
              </summary>
             <param name="val"> Boolean value to set </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canConfigureRealm">
             
              <summary>Can this subject set/get runtime configuration values for the realm
              </summary>
             <returns> The current configuration </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setConfigureRealm(System.Boolean)">
             
              <summary>Allows/Disallows setting realm configuration values
              </summary>
             <param name="val"> Boolean value to set </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canManageDataGroups">
            
               <summary>Can this subject manage datagroups for the realm
               </summary>
              <returns> The current configuration </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canPublishToGlobalDataGroup">
            
               <summary>Can this subject publish to the default datagroup for the realm
               </summary>
              <returns> The current configuration </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.canTakeOwnershipOfDataGroup">
            
               <summary>Can this subject take ownership of datagroups on this realm
               </summary>
              <returns> The current configuration </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setManageDataGroups(System.Boolean)">
            
               <summary>Allows/Disallows datagroup management operations
               </summary>
              <param name="val"> Boolean value to set </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setPublishToGlobalDataGroup(System.Boolean)">
            
               <summary>Allows/Disallows publishing to the default datagroup
               </summary>
              <param name="val"> Boolean value to set </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry.setTakeOwnershipOfDataGroup(System.Boolean)">
            
               <summary>Allows/Disallows taking ownership of datagroups
               </summary>
              <param name="val"> Boolean value to set </param>
            
        </member>
        <!-- Badly formed XML comment ignored for member "T:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin" -->
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.#ctor(com.pcbsys.nirvana.client.nSessionAttributes)">
             
              <summary> Constructs a link with the realm server for admin operations
              </summary>
              <param name="sAttr"> nSessionAttributes representing the realm you wish to communicate with </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorised for admin functions </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.#ctor(com.pcbsys.nirvana.client.nSessionAttributes,System.Boolean)">
             
              <summary> Constructs a link with the realm server for admin operations
              </summary>
              <param name="sAttr">        nSessionAttributes representing the realm you wish to communicate with </param>
              <param name="followMaster"> if set, this class will attempt to stay connected to the master realm </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorised for admin functions </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.#ctor(com.pcbsys.nirvana.client.nSessionAttributes,System.String,System.Security.SecureString)">
             
              <summary>Constructs a link with the realm server for admin operations
              </summary>
              <param name="sAttr">    nSessionAttributes representing the realm you wish to communicate with </param>
              <param name="username"> Username to use to login to the server </param>
              <param name="password"> Password to use to login to the server </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorised for admin functions </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.#ctor(com.pcbsys.nirvana.client.nSessionAttributes,System.String,System.Boolean)">
             
              <summary>Constructs a link with the realm server for admin operations
              </summary>
              <param name="sAttr">        nSessionAttributes representing the realm you wish to communicate with </param>
              <param name="username">     Username to use to login to the server </param>
              <param name="followMaster"> if set, this class will attempt to stay connected to the master realm </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorised for admin functions </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.#ctor(com.pcbsys.nirvana.client.nSessionAttributes,System.String,System.Security.SecureString,System.Boolean)">
             
              <summary>Constructs a link with the realm server for admin operations
              </summary>
              <param name="sAttr">        nSessionAttributes representing the realm you wish to communicate with </param>
              <param name="username">     Username to use to login to the server </param>
              <param name="password">     Password to use to login to the server </param>
              <param name="followMaster"> if set, this class will attempt to stay connected to the master realm </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorised for admin functions </exception>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.getSession" -->
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.close">
             
              <summary>Closes the session with the remote Realm </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.getConnectedRealmName">
             
              <summary>Return the name of the Nirvana Realm currently connected to
              </summary>
              <returns> the name of the Nirvana Realm currently connected to </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.isConnectedToMaster">
             
              <summary>If follow master has been set, then when the nRealmAdmin is disconnected, the underlying nSession will be set to the master realm when a new
              master is elected after losing quorum. This method will determine whether the underlying nSession is actually connected to the master realm
              </summary>
              <returns> true when connected to the master realm, false if not </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL,System.Int64,com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Creates a new channel on the realm this session is connected.
              <p/>
              </summary>
              <param name="attr">       The channel attributes object containing the parameters for
                              the new channel to be created </param>
              <param name="initialACL"> The initial ACLs to apply to the channel at creation time </param>
              <param name="initialEID"> The value to start the event id at </param>
              <param name="deadStore">  The dead event store that will contain all purged, aged and dead events </param>
              <returns> an nChannel object representing the newly created nirvana channel </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">        The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL,System.Int64)">
             
              <summary>Creates a new channel on the realm this session is connected.
              <p/>
              </summary>
              <param name="attr">       The channel attributes object containing the parameters for
                              the new channel to be created </param>
              <param name="initialACL"> The initial ACLs to apply to the channel at creation time </param>
              <param name="initialEID"> The value to start the event id at </param>
              <returns> an nChannel object representing the newly created nirvana channel </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">        The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Creates a new channel on the realm this session is connected.
              <p/>
              </summary>
              <param name="attr">       The channel attributes object containing the parameters for
                              the new channel to be created </param>
              <param name="initialACL"> The initial ACLs to apply to the channel at creation time </param>
              <returns> an nChannel object representing the newly created nirvana channel </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">        The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.createChannel(com.pcbsys.nirvana.client.nChannelAttributes)">
             
              <summary>Creates a new channel on the realm this session is connected.
              <p/>
              </summary>
              <param name="attr"> The channel attributes object containing the parameters for
                        the new channel to be created @ param initialEID The channel
                        will be created with the first eid being set to this value by
                        default it is set to 0 but the user can set it to any
                        positive value </param>
              <returns> an nChannel object representing the newly created nirvana channel </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">        The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.createQueue(com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Creates a new queue on the realm this session is connected.
              <p/>
              </summary>
              <param name="attr">       The channel attributes object containing the parameters for
                              the new queue to be created </param>
              <param name="initialACL"> The initial ACLs to apply to the queue at creation time </param>
              <param name="deadStore">  The dead event store that will contain all purged, aged and dead events </param>
              <returns> an nQueue object representing the newly created nirvana queue </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">        The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.createQueue(com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Creates a new queue on the realm this session is connected.
              <p/>
              </summary>
              <param name="attr">       The channel attributes object containing the parameters for
                              the new queue to be created </param>
              <param name="initialACL"> The initial ACLs to apply to the queue at creation time </param>
              <returns> an nQueue object representing the newly created nirvana queue </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">        The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.createQueue(com.pcbsys.nirvana.client.nChannelAttributes)">
             
              <summary>Creates a new queue on the realm this session is connected.
              <p/>
              </summary>
              <param name="attr"> The channel attributes object containing the parameters for
                        the new queue to be created </param>
              <returns> an nQueue object representing the newly created nirvana queue </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">        The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.addRealmACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Adds a specific acl entry to the realm acl
              </summary>
              <param name="entry"> An nACL entry containing the subject and permissions to add to the realm acl </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.addRealmACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Adds a list of acl entries to the realm acl
              </summary>
              <param name="entry"> An nACL list containing the subjects and permissions to add to the realm acl </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.removeRealmACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Removes a specific acl entry from the realm acl.
              </summary>
              <param name="entry"> An nACL entry containing the subject and permissions to remove from the realm acl </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.removeRealmACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Removes a list of acl entries from the realm acl.
              </summary>
              <param name="entry"> An nACL list containing the subjects and permissions to remove from the realm acl </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.modRealmACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Modifies a specific acl entry's permissions in the realm acl.
              </summary>
              <param name="entry"> An nACL entry containing the subject and permissions to modify in the realm node </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.modRealmACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Modifies the acl entries in the list of realm acl entries.
              </summary>
              <param name="entry"> An nACL list containing the subjects and permissions to modify in the realm </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.addACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry,com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Adds a specific acl entry to the channel or queue acl
              </summary>
              <param name="entry"> An nACL entry containing the subject and permissions to add to the channel or queue acl </param>
              <param name="obj">   the channel or queue </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.addACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Adds a list of acl entries to the channel or queue acl
              </summary>
              <param name="entries"> An nACL list containing the subjects and permissions to add to the channel or queue acl </param>
              <param name="obj">     the channel or queue </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.removeACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry,com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Removes a specific acl entry from the channel or queue acl.
              </summary>
              <param name="entry"> An nACL entry containing the subject and permissions to remove from the channel or queue acl </param>
              <param name="obj">   the channel or queue </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.removeACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Removes a list of acl entries from the channel or queue acl.
              </summary>
              <param name="entries"> An nACL list containing the subjects and permissions to remove from the channel or queue acl </param>
              <param name="obj">     the channel or queue </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.modACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry,com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Modifies a specific acl entry's permissions in the channel or queue
              </summary>
              <param name="entry"> An nACL entry containing the subject and permissions to modify in the channel or queue acl </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.modACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Modifies a list of acl entries in the channel or queue acl.
              </summary>
              <param name="entries"> An nACL list containing the subjects and permissions to remove from the channel or queue acl </param>
              <param name="obj">     the channel or queue </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.addACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.client.nAbstractChannel[])">
             
              <summary>Adds a list of acl entries to all objects in an array of channels and / or queues
              </summary>
              <param name="acl">  the acl to apply </param>
              <param name="objs"> the channels and / or queues to apply the acl to </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.addACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry,com.pcbsys.nirvana.client.nAbstractChannel[])">
             
              <summary>Adds an acl entry to all objects in an array of channels and / or queues
              </summary>
              <param name="entry"> the acl to apply </param>
              <param name="objs">  the channels and / or queues to apply the acl to </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.removeACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.client.nAbstractChannel[])">
             
              <summary>Removes a list of acl entries from all objects in an array of channels and / or queues
              </summary>
              <param name="acl">  the acl to apply </param>
              <param name="objs"> the channels and / or queues to apply the acl to </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.removeACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry,com.pcbsys.nirvana.client.nAbstractChannel[])">
             
              <summary>Removes an acl entry from all objects in an array of channels and / or queues
              </summary>
              <param name="entry"> the acl to apply </param>
              <param name="objs">  the channels and / or queues to apply the acl to </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.setRealmACL(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Replaces the ACL on the Nirvana Realm with that which is passed in. This method is synchronous and will return once the operation
            has been completed by the server or cluster.
              <p/>
            This method should be used with extreme caution. Unlike the nRealmNode, the nRealmAdmin does not maintain an up
            to date image of the Realm ACL. This function will overwrite the acl at the server with the acl entries passed in.
              </summary>
              <param name="acl"> A nACL containing nRealmACLEntry </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If unable to successfully perform this operation, check the message for more information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.getRealmACL">
             
              <summary>Returns the current ACL on the Nirvana Realm. This call makes a synchronous call to the realm to obtain the current acl list.
              </summary>
              <returns> The realm nACL </returns>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If unable to successfully perform this operation, check the message for more information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.getACLGroups">
            <summary>
            Returns a list of all ACL groups defined on the realm.
            </summary>
            <returns>A collection of ACL groups</returns>
            <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation,
            check the message for further information
            </exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.setACL(com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Replaces the ACL on the Realm Server for this channel / queue with the acl list passed in. This will entirely replace the channel / queue acl
            with the contents of the acl passed into the function.
              <p/>
            This method should be used with extreme caution. Unlike the nRealmNode, the nRealmAdmin does not maintain an up
            to date image of any of the channel ACL lists. This function will overwrite the acl at the server for the specific channel / queue with the acl entries passed in.
              </summary>
              <param name="acl"> A nACL containing list of subjects and permissions </param>
              <param name="obj"> The channel or queue to set the acl on </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.getACL(com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary>Returns the current ACL for the specified channel or queue on the Nirvana Realm. This call makes a synchronous call to the realm to obtain the current acl.
              </summary>
              <param name="obj"> the channel or queue to obtain the current permissions for </param>
              <returns> The channel or queue nACL </returns>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If unable to successfully perform this operation, check the message for more information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.setInterfaceACL(System.String,com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Commits the nACL object passed in with the Realm Server for the specified interface
              </summary>
              <param name="iface"> The name of the interface </param>
              <param name="acl">   A nACL containing nInterfaceViaEntry objects </param>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.getInterfaceACL(System.String)">
             
              <summary>Returns the nACL object passed for the interface in question
              </summary>
              <param name="iface"> The name of the interface </param>
              <returns> An nACL containing nInterfaceViaEntry objects </returns>
              <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmAdmin.addReconnectHandler(com.pcbsys.nirvana.client.nReconnectHandler)">
             
              <summary>Add a session reconnect handler to the underlying admin session.
              </summary>
              <param name="handler"> - the nReconnectHandler object for the underlying admin session </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode">
            
             <summary>This class represents a Realm within the Nirvana namespace. This object allows the user to access the current
              status of the RealmServer, the current configuration parameters, change the ACL entries for the realm and access
              to the nodes that this RealmServer manages. It extents nContainer which is a Observable via nNode, if any status
              parameters change then the observer is notified via the notofy method.
              <p/>
              This class also allows you to monitor connections to the realm by implementing a nConnectionListener and calling
              addConnectionListener with the object. Then when connections are added or deleted the callbacks will be executed
              with the details of the connections.
             </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nContainer"/>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nNode"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.setAsyncUpdateFlag(System.Boolean)">
             
              <summary>Flag indicating whether the realm node will receive asynchronous updates from the server. </summary>
             <param name="flag"> inidcating whether asynchronous updates will be received </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getAsyncUpdateFlag">
             
              <summary>Return whether realm node will receive asynchronous updates from the server. </summary>
             <returns> whether asynchronous updates will be received </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.#ctor(com.pcbsys.nirvana.client.nSessionAttributes)">
             
              <summary>Constructs a link with the realm server and builds up the realm servers namespace
             which can be retrieved using the getNameSpace() function
              </summary>
             <param name="sAttr"> nSessionAttributes representing the realm you wish to communicate with </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorised for admin functions </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.#ctor(com.pcbsys.nirvana.client.nSessionAttributes,System.Net.NetworkCredential)">
             
              <summary>Constructs a link with the realm server and builds up the realm servers namespace
             which can be retrieved using the getNameSpace() function
              </summary>
             <param name="sAttr">    nSessionAttributes representing the realm you wish to communicate with </param>
             <param name="creds"> Credentials to use to login to the server </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorised for admin functions </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.#ctor(com.pcbsys.nirvana.client.nSessionAttributes,System.String,System.Security.SecureString)">
             
              <summary>Constructs a link with the realm server and builds up the realm servers namespace
             which can be retrieved using the getNameSpace() function
              </summary>
             <param name="sAttr">    nSessionAttributes representing the realm you wish to communicate with </param>
             <param name="username"> Username to use to login to the server </param>
             <param name="password"> Password to use to login to the server </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorised for admin functions </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.close">
             
              <summary>Closes the session with the remote Realm and all realms from this point in the namespace. </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getFreeMemory">
             
              <summary>Returns the amount of free memory the Realm Server has within the JVM. This indicates
             the difference between what the JVM has currently allocated and what the Realm Server has
             used. The JVM may increase its memory usage if the free memory falls below a set threshold
             depending on the JVM parameters passed during the realm server startup script.
              </summary>
             <returns> Long value of bytes </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getNoOfChannels">
             
              <summary>Return the number of channels in the Realm Server. 
              </summary>
             <returns> Number of channels </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getNoOfQueues">
             
              <summary>Return the number of queues in the Realm Server. 
              </summary>
             <returns> Number of queues </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getNoOfThreads">
             
              <summary>Return the number of thread the JVM has allocated for the Realm Server. This includes all
             the threads used by the JVM as well.
              </summary>
             <returns> Number of threads </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getThreadPoolDetails">
             
              <summary>Return an ArrayList of nThreadPool objects that represent the different thread pools deployed within the realm.
              </summary>
             <returns> ArrayList of nThreadPool objects</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getTotalGCCount">
            <summary>
            Return the total number of GCs that the JVM has performed since the realm has started
            </summary>
            <returns>GC count</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getTotalGCTime">
            <summary>
            Returns the total time in milliseconds that the JVM jas spent doing GCs
            </summary>
            <returns>time in ms used by the GC</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getFanoutBacklog">
            <summary>
            Returns the number of events waiting to be processed by the fanout engine
            </summary>
            <returns>number of events</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getInternalSchedulerSize">
             
              <summary>Return the total number of scheduled tasks currently running within the realm </summary>
             <returns> the number of tasks within the realm</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getReUsedThreads">
             
              <summary>Return the number of reused threads within the realm </summary>
             <returns> the number of reused threads within the realm</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getVendedThreads">
             
              <summary>Get the total number of threads that have been allocated threads within the realm </summary>
             <returns> the total number of threads allocated</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getQueuedThreads">
             
              <summary>Number of threads currently queued ready to execute tasks </summary>
             <returns> number of queued threads</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getBuffersCreated">
             
              <summary>Number of data buffers created within the realms and for use within event fanout </summary>
             <returns> the number of buffers created</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getBuffersReused">
             
              <summary>Number of data buffers reused by the event fanout </summary>
             <returns> number of reused buffers</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.isClustered">
            <summary>
            Returns the current cluster membership state of this realm
            </summary>
            <returns>true if the node is a member of a cluster</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getStartTime">
             
              <summary>Returns the Date that the realm server was started
              </summary>
             <returns> Date of realm start </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getServerTime">
             
              <summary>Returns the last status update date that the server sent
              </summary>
             <returns> Server Date </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getTotalConnections">
             
              <summary>Total number of connections served by this realm from the time it started
              </summary>
             <returns> long count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getTotalMemory">
             
              <summary>Returns the total number of bytes that the JVM has allocated from the unerlying OS. This number may
             move depending on the Realm Server startup parameters.
              </summary>
             <returns> long byte count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getTotalPublished">
             
              <summary>Returns the total number of events published on this realm from the time it has started
              </summary>
             <returns> lone event count </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getTotalSubscribed">
             
              <summary>Returns the total number of events that this realm has sent to clients from the time it started
              </summary>
             <returns> Number if events sent to clients </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.isAnEmbeddedServer">
             
              <summary>If the realm is running within an application then this will be set to true
               </summary>
             <returns> true if the realm is running as an embedded server </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addRealmACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Adds a specific acl entry to the realm acl
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to add to the realm acl </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addRealmACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Adds list of acl entries to the realm acl
              </summary>
             <param name="entry"> An nACL object containing the subject and permissions to add to the realm acl </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.removeRealmACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>removes a specific acl entry from the realm acl.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to remove from the realm acl </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.removeRealmACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>removes a list of acl entries from the realm acl.
              </summary>
             <param name="entry"> An nACL object containing the subject and permissions to remove from the realm acl </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.modRealmACLEntry(com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>modifies a specific acl entry's permissions in the realm acl.
              </summary>
             <param name="entry"> An nACL entry containing the subject and permissions to modify in the realm node </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.modRealmACLEntries(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>modifies a list of acl entries permissions in the realm acl.
              </summary>
             <param name="entry"> An nACL object containting the subject and permissions to modify in the realm node </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException"> If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException"> if the ACLs being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if unable to perform the operation, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.setACLs(com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Commits the ACL passed in with the Realm Server. This causes these ACLs to be active once the function
             returns. The nACL object can be retrieved by calling the getACLs() function which returns the realms
             current list.
              </summary>
             <param name="acl"> A nACL containing nRealmACLEntry </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nInsufficientPrivilegesException">
                                         If the user is not permissioned to perform this operation </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException">      If the acls being set are invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If unable to successfully perform this operation, check the message for more information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.findConfigGroup(System.String)">
             
              <summary>Finds a configuration group by the name specified by the String argument
              </summary>
             <param name="groupName"> Name of the config group to find </param>
             <returns> nConfigGroup object corresponding to the name or null if not found </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.findNode(System.String)">
             
               <summary>Given a name of the form /container1/container2/name this function will try to locate the name
               object locally and return it, or null if that object can not be found.
               This method will not wait for the server to update our local state so if a node is created in one
               session and this method is called immediately after in another session, the local state may not be up
               to date and therefore the node may not be found.  Optionally you can call findNode(name,true) to force
               the method to wait for a maximum of 5 seconds for the local state to update.
               </summary>
               * <param name="name"> the name of the node to locate as a String </param>
               * <returns> a nNode which could be a nRealmNode, nLeafNode or a nContainer </returns>
               * <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if null is passed as the nNode </exception>
               * <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
               * <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
               * <see cref="T:com.pcbsys.nirvana.nAdminAPI.nContainer"/>
               
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.findNode(System.String,System.Boolean)">
            
               <summary>Given a name of the form /container/container/name this function will locate the name object and
               * return it, or null if that object can not be found.
               </summary>
               * <param name="name"> the name of the node to locate as a String </param>
               * <param name="flag"> Boolean flag indicating if we wait for the server to update our state or not </param>
               * <returns> a nNode which could be a nRealmNode, nLeafNode or a nContainer </returns>
               * <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> thrown if null is passed as the nNode </exception>
               * <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmNode"/>
               * <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
               * <see cref="T:com.pcbsys.nirvana.nAdminAPI.nContainer"/>
               
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getConfigGroups">
             
              <summary>Returns an IEnumerator containing nConfigGroup objects
              </summary>
             <returns> IEnumerator of nConfigGroup </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getConfigGroupsLength">
             
              <summary>Returns the size of the nConfigGroup, i.e. how many nConfigEntry objects
              </summary>
             <returns> Count of nConfigEntry objects </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getConfigGroup(System.String)">
             
              <summary>Returns the nConfigGroup specified by the name
              </summary>
             <param name="name"> the name of the config group to locate </param>
             <returns> nConfigGroup of the specified name </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.commitConfig(com.pcbsys.nirvana.nAdminAPI.nConfigGroup)">
             
              <summary>Calling this function with causes all changes within the group to be committed on the
             realm and activated. All config changes are immediate and do not require the realm server
             to be restarted.
              </summary>
             <param name="changedGroup"> The nConfigGroup containing the changed nConfigEntry </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nConfigurationException"> If the user is not authorized for this function, Check the message for more information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createChannel(com.pcbsys.nirvana.client.nChannelAttributes)">
             
              <summary>Creates a new channel on the realm this session is connected.
             <p/>
             If the channel attributes specify a realm different than the one this session is
             connected to, a transparent redirection will occur and the channel will be created on
             that realm.
              </summary>
             <param name="attr"> The channel attributes object containing the parameters for
                         the new channel to be created </param>
             <returns> an nChannel object representing the newly created nirvana channel </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">
                                                   The remote node responded with an unknown exception </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException">
                                                   The requested channel already exists </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occured, since we received a response from the server out of sequence </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nLeafNode)">
             
              <summary>Creates a new channel on the realm this session is connected.
             <p/>
             If the channel attributes specify a realm different than the one this session is
             connected to, a transparent redirection will occur and the channel will be created on
             that realm.
              </summary>
             <param name="attr"> The channel attributes object containing the parameters for
                         the new channel to be created </param>
             <param name="dead">         The dead event store that will contain all purged, aged and dead events </param>
             <returns> an nChannel object representing the newly created nirvana channel </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">
                                                   The remote node responded with an unknown exception </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException">
                                                   The requested channel already exists </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occured, since we received a response from the server out of sequence </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,System.Int64)">
             
              <summary>Creates a new channel on the realm this session is connected.
             <p/>
             If the channel attributes specify a realm different than the one this session is
             connected to, a transparent redirection will occur and the channel will be created on
             that realm.
              </summary>
             <param name="attr">         The channel attributes object containing the parameters for
                                 the new channel to be created @ param initialEID The channel
                                 will be created with the first eid being set to this value by
                                 default it is set to 0 but the user can set it to any
                                 positive value </param>
             <param name="p_initialEID"> The value to start the event id at </param>
             <returns> an nChannel object representing the newly created nirvana channel </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,System.Int64,com.pcbsys.nirvana.nAdminAPI.nLeafNode)">
             
              <summary>Creates a new channel on the realm this session is connected.
             <p/>
             If the channel attributes specify a realm different than the one this session is
             connected to, a transparent redirection will occur and the channel will be created on
             that realm.
              </summary>
             <param name="attr">         The channel attributes object containing the parameters for
                                 the new channel to be created @ param initialEID The channel
                                 will be created with the first eid being set to this value by
                                 default it is set to 0 but the user can set it to any
                                 positive value </param>
             <param name="p_initialEID"> The value to start the event id at </param>
             <param name="dead">         The dead event store that will contain all purged, aged and dead events </param>
             <returns> an nChannel object representing the newly created nirvana channel </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,System.Int64,com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Creates a new channel on the realm this session is connected.
             <p/>
             If the channel attributes specify a realm different than the one this session is
             connected to, a transparent redirection will occur and the channel will be created on
             that realm.
              </summary>
             <param name="attr">         The channel attributes object containing the parameters for
                                 the new channel to be created @ param initialEID The channel
                                 will be created with the first eid being set to this value by
                                 default it is set to 0 but the user can set it to any
                                 positive value </param>
             <param name="p_initialEID"> The value to start the event id at </param>
             <param name="initialACL">   The initial ACLs to apply to the channel at creation time </param>
             <returns> an nChannel object representing the newly created nirvana channel </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getACLGroups" -->
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,System.Int64,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nLeafNode)">
             
              <summary>Creates a new channel on the realm this session is connected.
             <p/>
             If the channel attributes specify a realm different than the one this session is
             connected to, a transparent redirection will occur and the channel will be created on
             that realm.
              </summary>
             <param name="attr">         The channel attributes object containing the parameters for
                                 the new channel to be created @ param initialEID The channel
                                 will be created with the first eid being set to this value by
                                 default it is set to 0 but the user can set it to any
                                 positive value </param>
             <param name="p_initialEID"> The value to start the event id at </param>
             <param name="initialACL">   The initial ACLs to apply to the channel at creation time </param>
             <param name="dead">         The dead event store that will contain all purged, aged and dead events </param>
             <returns> an nChannel object representing the newly created nirvana channel </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createQueue(com.pcbsys.nirvana.client.nChannelAttributes)">
             
              <summary>Creates a new queue on the realm this session is connected.
             <p/>
             If the queue attributes specify a realm different than the one this session is
             connected to, a transparent redirection will occur and the queue will be created on
             that realm.
              </summary>
             <param name="attr"> The queue attributes object containing the parameters for the new queue to be created </param>
             <returns> an nLeafNode object representing the newly created nirvana queue </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createQueue(com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL)">
             
              <summary>Creates a new queue on the realm this session is connected.
             <p/>
             If the queue attributes specify a realm different than the one this session is
             connected to, a transparent redirection will occur and the queue will be created on
             that realm.
              </summary>
             <param name="attr">       The queue attributes object containing the parameters for the new queue to be created </param>
             <param name="initialACL"> The initial ACLs to apply to the queue at creation time </param>
             <returns> an nLeafNode object representing the newly created nirvana queue </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.delLeafNode(com.pcbsys.nirvana.nAdminAPI.nLeafNode)">
             
              <summary>Removes the specified channel/queue from the server
              </summary>
             <param name="node"> LeafNode to delete </param>
             <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">  if the path to the realm has been lost </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            If the current user has no authority to delete the resource </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The channel/queue has already been deleted </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The current session is not currently connected </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  The request resulted in an unknown response from the server </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The request exceeded the specified time out period </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     The argument supplied is invalid </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createQueue(com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nLeafNode)">
             
                <summary>Creates a new queue on the realm this session is connected.
                <p/>
                If the queue attributes specify a realm different than the one this session is
                connected to, a transparent redirection will occur and the queue will be created on
                that realm.
                </summary>
                <param name="attr"> The queue attributes object containing the parameters for the new queue to be created </param>
                <param name="dead">         The dead event store that will contain all purged, aged and dead events </param>
                <returns> an nLeafNode object representing the newly created nirvana queue </returns>
                <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createQueue(com.pcbsys.nirvana.client.nChannelAttributes,com.pcbsys.nirvana.nAdminAPI.nACL,com.pcbsys.nirvana.nAdminAPI.nLeafNode)">
             
                <summary>Creates a new queue on the realm this session is connected.
                <p/>
                If the queue attributes specify a realm different than the one this session is
                connected to, a transparent redirection will occur and the queue will be created on
                that realm.
                </summary>
                <param name="attr">       The queue attributes object containing the parameters for the new queue to be created </param>
                <param name="initialACL"> The initial ACLs to apply to the queue at creation time </param>
                <param name="dead">         The dead event store that will contain all purged, aged and dead events </param>
                <returns> an nLeafNode object representing the newly created nirvana queue </returns>
                <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getACLs">
             
              <summary>Retrieves the current realms ACL so that the user can add/remove/modify the entries within.
             This nACL contains nRealmACLEntry objects.
              </summary>
             <returns> nACL containing nRealmACLEntry obejcts </returns>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if the user is not permitted to access these lists, check the message for more information </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nRealmACLEntry"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addConnectionListener(com.pcbsys.nirvana.nAdminAPI.nConnectionListener)">
             
              <summary>Registers the listener object with the realm so that whenever a connection is made or lost with the realm
             the listener is notified of the change in state of the realm. Currently only one listener per session is
             supported.
              </summary>
             <param name="listener"> The instance of the nConnectionListener to be called when connections are made or disconnected </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if the user is not permitted to access these lists, check the message for further information </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionListener"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addConnectionListenerToAllLeafNodes(com.pcbsys.nirvana.nAdminAPI.nConnectionListener)">
             
              <summary>Registers a nConnectionListener to each nLeaNode of the nRealmNode.
              </summary>
             <param name="listener"> The instance of the nConnectionListener to be called when connections are made or disconnected </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if the user is not permitted to access these lists, check the message for further information </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionListener"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.hasConnectionListener">
             
              <summary>Checks if there is a connection listener object associated with the realm.
              </summary>
             <returns> true if connection listener has been set  </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionListener"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.removeConnection(System.String)">
             
              <summary>This method will cause the server to disconnect the connection described by the connection ID. The default
             behaviour of the client is to reconnect so calling this alone will basically bounce the client. If your intent
             is to disable the remote user, you must first disable the user@host from the realm and then call this function.
              </summary>
             <param name="connectionId"> The connectionId to disconnect </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorized for this function, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.removeConnection(System.String,System.Boolean)">
             
              <summary>This method will cause the server to disconnect the connection described by the connection ID. The default
             behaviour of the client is to reconnect so calling this alone will basically bounce the client. If your intent
             is to disable the remote user, you must first disable the user@host from the realm and then call this function.
              </summary>
             <param name="connectionId"> The connectionId to disconnect </param>
             <param name="sendRedirection"> Tells the server to send a Server Redirection event to this client </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorized for this function, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addLogListener(com.pcbsys.nirvana.nAdminAPI.nLogListener)">
             
              <summary>This will register the nLogListener for all log events from this realm. This can become quiet busy if the
             log level on the realm is set for verbose.
              </summary>
             <param name="listener"> The listener object to call when new log events happen </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addPluginAccessListener(com.pcbsys.nirvana.nAdminAPI.nLogListener)">
            
              <summary>This will register the nLogListener for all Access events from the plugin manager.
              </summary>
             <param name="listener"> The listener object to call when new log events happen </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addPluginErrorListener(com.pcbsys.nirvana.nAdminAPI.nLogListener)">
             
               <summary>This will register the nLogListener for all error events from the plugin manager.
               </summary>
               * <param name="listener"> The listener object to call when new log events happen </param>
               
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addPluginLogListener(com.pcbsys.nirvana.nAdminAPI.nLogListener)">
             
               <summary>This will register the nLogListener for all events from the plugin manager.
               </summary>
               * <param name="listener"> The listener object to call when new log events happen </param>
               
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addAuditListener(com.pcbsys.nirvana.nAdminAPI.nAuditListener)">
             
              <summary>This will register the nAuditListener for all audit events from this realm.
              </summary>
             <param name="listener"> The listener object to call when new log events happen </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.addAuditListener(com.pcbsys.nirvana.nAdminAPI.nAuditListener,System.Boolean)">
             
              <summary>This will register the nAuditListener for all audit events from this realm.
              </summary>
             <param name="listener"> The listener object to call when new log events happen </param>
             <param name="replay">   specify true to replay the entire audit contents </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.rollAuditFile">
             
              <summary>This will cause the realm server to close the current audit log, rename it to the current date and start
             a new audit log
              </summary>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorized for this function, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.delLogListener(com.pcbsys.nirvana.nAdminAPI.nLogListener)">
             
              <summary>This will remove the log listener from receiving future log events
              </summary>
             <param name="listener"> The listener object to remove </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.delPluginAccessListener(com.pcbsys.nirvana.nAdminAPI.nLogListener)">
             
              <summary>This will remove the log listener from receiving future log events
              </summary>
             <param name="listener"> The listener object to remove </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.delPluginErrorListener(com.pcbsys.nirvana.nAdminAPI.nLogListener)">
             
              <summary>This will remove the log listener from receiving future log events
              </summary>
             <param name="listener"> The listener object to remove </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.delPluginLogListener(com.pcbsys.nirvana.nAdminAPI.nLogListener)">
             
              <summary>This will remove the log listener from receiving future log events
              </summary>
             <param name="listener"> The listener object to remove </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.delAuditListener(com.pcbsys.nirvana.nAdminAPI.nAuditListener)">
             
              <summary>This will remove the audit listener from receiving future audit events.
              </summary>
             <param name="listener"> The listener object to remove </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.changeTransactionChannel(System.Int32,System.Int64,System.Int32)">
             
              <summary>This will cause the realm server to close the current transaction file, delete it and recreate the file using the attributes specified.
              </summary>
             <param name="age"> the ttl which will be assigned as default to each nirvana transaction </param>
             <param name="capacity"> set the maximum number of transactions to store within the channel </param>
             <param name="type"> change the type of the transaction channel (default is mixed)
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorized for this function, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.changeStatusChannel(System.Int32,System.Int64,System.Int32)">
             
              <summary>This will cause the realm server to close the current status file, delete it and recreate the file using the attributes specified.
              </summary>
             <param name="age"> the ttl which will be assigned as default to each nirvana status event stored into the status channel file </param>
             <param name="capacity"> set the maximum number of status events to store within the channel </param>
             <param name="type"> change the type of the status channel (default is mixed)
             </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> If the user is not authorized for this function, check the message for further information </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.delConnectionListener(com.pcbsys.nirvana.nAdminAPI.nConnectionListener)">
             
              <summary>Removes the registered listener from the realm so no further callbacks are made to the listener.
              </summary>
             <param name="listener"> The listener object to remove </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nBaseAdminException"> if the user is not permitted to access these lists </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nConnectionListener"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.isNamespaceComplete">
             
              <summary>This method returns true when the namespace discovery process is complete. Since the process
             of walking the entire namespace is asynchronous this method is useful to find out it the namespace
             is complete for this Realm. If this Realm contains other Realms then you need to call this function
             on subsequent Realms to see if the namespace is complete for them.
             <p/>
             Alternative, you could add a listener to this object and you will be notified when new nRealmNodes
             are added to this object.
              </summary>
             <returns> boolean if the name space has been completed </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.isAuthorised">
             
              <summary>This function returns true if the user is authorised for admininstration functions on the
             remote realm. If the user is not authorised then this will return false and any functions
             performed against the realm will result in a nSecurityException
              </summary>
             <returns> boolean True if the user is authorised </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.waitForNameSpace(System.Int64)">
             
              <summary>This method will block the calling thread until the namespace discovery is complete for this node or the
             supplied timeout, in milliseconds, is reached. If the discovery is already complete the method will
             return immediately.
              </summary>
             <param name="timeout"> milliseconds to wait for the namespace to be discovered </param>
             <exception cref="T:System.Exception"> If the name space is not completed with in the time specified </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.waitForNameSpace">
             
              <summary>This method will block the calling thread until the namespace discovery is complete for this node.
             If the discovery is already complete the method will return immediatly. </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.isEntireNamespaceComplete">
             
              <summary>This method returns true when the namespace discovery process is complete for the entire namespace
             from this node down.
             <p/>
             Please refer to the isNamespaceComplete() function
              </summary>
             <returns> boolean </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.waitForEntireNameSpace(System.Int64)">
             
              <summary>This method will block the calling thread until all of the namespace has been resolved. This
             could take some time depending on the number of realms within the namespace.
              </summary>
             <param name="timeout"> milliseconds to wait for the namespace to be discovered </param>
             <exception cref="T:System.Exception"> if unable to complete the namespace within the time specified </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.waitForEntireNameSpace">
             
              <summary>This method will block the calling thread until all of the namespace has been resolved. This
             could take some time depending on the number of realms within the namespace. </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.isConnected">
             
              <summary>This method returns true if the connection to the remote realm is still valid
              </summary>
             <returns> boolean current state </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.requestThreadDump">
             
              <summary>Sends a request to the Realm Server to produce a Thread dump. </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.rollLogFile">
            <summary>
            Rolls the servers log file
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.releaseCachedMemory">
             
              <summary>Sends a request to the Realm Server to release cached memory. </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getRealmScheduledThreadList">
             
              <summary>Sends a request to the Realm Server to produce a Thread dump.
              </summary>
             <returns> list of Thread Entries that the server will execute at the specified time </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.remove(System.Boolean)">
             
              <summary>This method enables the removal of the object from the namespace, in this case a RealmNode from
             the namespace.
             If you specify true, all child nodes, including channels, queues and services
             will also be removed from the realm before removing it from its parent
              </summary>
             <param name="removeChildren"> a boolean specifying whether siblings should be removed too </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedRemoveException"> thrown if remove is not supported (e.g. on the namespace root Realm) </exception>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nNodeException">              is thrown if an error occurs in the remove operation </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLeafNode"/>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nLinkNode"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getCurrentConnections">
             
              <summary>Returns the number of connections on this realm
              </summary>
             <returns> int number of clients connected </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getInterfaceManager">
             
              <summary>Returns the Realms Interface Manager
              </summary>
             <returns> The com.pcbsys.nirvana.nAdminAPI.nInterfaceManager object </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getMulticastManager">
             
              <summary>Returns the Realms Interface Manager
              </summary>
             <returns> The com.pcbsys.nirvana.nAdminAPI.nInterfaceManager object </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nInterfaceManager"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getRealm">
             
              <summary>Returns the nRealm object for this RealmNode
              </summary>
             <returns> The com.pcbsys.nirvana.client.nRealm object </returns>
             <see cref="T:com.pcbsys.nirvana.client.nRealm"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getRealmList">
             
              <summary>Method to return an ArrayList of known realms
              </summary>
             <returns> ArrayList of all realms known by this realm </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getSession">
             
              <summary>Returns the nSession object for this RealmNode
              </summary>
             <returns> The com.pcbsys.nirvana.client.nSession object </returns>
             <see cref="T:com.pcbsys.nirvana.client.nSession"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getUpdateInterval">
             
              <summary>Returns the update interval for status updates
              </summary>
             <returns> a long representing the number of milliseconds between each update </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getCluster">
             
              <summary>Return the cluster node if one exists, i.e. if this realm is part of a cluster
              </summary>
             <returns> the cluster node for thsi realm, otherwise null </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.createACL">
             
              <summary>Return a new nACL object </summary>
             <returns> a new nACL object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getDefaultDataGroup">
            
            <summary>Get the default data group node</summary>
            <returns> the default data group node</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getDataGroupListener">
            
            <summary>Get the default data group listener</summary>
            <returns> return the data group listener</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getDataGroups">
            
                 <summary> Provides a collection of all datagroups created on this realm </summary>
                 <returns> A nDataGroupsContainer object containing the datagroups on this realm </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.onMessage(com.pcbsys.nirvana.client.nConsumeEvent)">
            <summary>
            This method is for internal use only
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getSecurityGroupManager">
            <summary>
            Return the securityGroupManager object for this realm
            </summary>
            <returns>
            The security group manager object for this realm, which can be used to introspect, add, remove, and modify security groups.
            </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getRemoteInterestManager">
            <summary>
            The remote interest manager is an object that allows the user to control propagation of messages between realms.
            </summary>
            <returns>returns the remote interest manager for the given realm node</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRealmNode.getZoneManager">
            <summary>
            Return the Zone Manager object for this realm
            </summary>
            <returns>The Zone Manager object for this realm, which can be used to interact with and modify the realm's zones.</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemoteInterestManager.closed(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
            
             <summary> Called when the nRealmNode is closed, for internal use only. </summary>
             <param name="node"> The nRealmNode which has been closed </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemoteInterestManager.add(System.String,System.Boolean,System.Boolean)">
            <summary>Adds a new remote interest entry with the given name, send and receive properties.
            Adding an entry with the canSend and canReceive properties of the entry as false is the same as removing the entry from the realm.
            </summary>
            <param name="channelName">the name of the channel</param>
            <param name="canSend">if the channel can send events to other realms connected to its parent realm</param>
            <param name="canReceive">if the channel can receive events from other realms connected to its parent realm</param>
            <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException">if the given channelName does not represent a channel, this exception is thrown</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if there was some problem with adding the entry to the realm server, this exception is thrown</exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemoteInterestManager.add(com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry)">
            <summary> Adds a single remote interest entry to the realm to enable sending and receiving of messages between different realms.
            Adding an entry with the canSend and canReceive properties of the entry as false is the same as removing the entry from the realm.
            </summary>
            <param name="entry">the entry to add to the realm server</param>
            <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException">if the given channelName does not represent a channel, this exception is thrown</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if there was some problem with adding the entry to the realm server, this exception is thrown</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemoteInterestManager.add(System.Collections.Generic.IEnumerable{com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry})">
            <summary>Adds a collection of remote interest entries to the realm to enable sending and receiving of messages between realms.
            This is a composite operation, if one entry would fail being added to the realm in question, then no entry is added.
            Adding an entry with the canSend and canReceive parameters of false is the same as performing a remove operation.
            </summary>
            <param name="entries">the collection of entries to add to the realm server</param>
            <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException">if the given channelName of any entry does not represent a channel, this exception is thrown</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if there was some problem with adding the entries to the realm server, this exception is thrown</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemoteInterestManager.remove(System.String)">
            <summary>
            Removes a single entry from the realm, disabling sending and receiving of messages if previously enabled.
            </summary>
            <param name="channelName">the name of the channel to remove interest propagation from</param>
            <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException">if the given channelName does not represent a channel, this exception is thrown</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if there was some problem removing the entry from the server, this exception is thrown</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemoteInterestManager.remove(com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry)">
            <summary>
            Removes a single entry from the realm, disabling sending and receiving of messages if previously enabled.
            The canSend and canReceive values of the entry have no effect on the outcome of this operation.
            </summary>
            <param name="entry">the entry to remove interest propagation from the realm for</param>
            <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException">if the given channelName contained within the entry does not represent a channel, this exception is thrown</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if there was some problem removing the entry from the server, this exception is thrown.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemoteInterestManager.remove(System.Collections.Generic.IEnumerable{com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry})">
            <summary>
            Removes a collection of entries from the realm, disabling sending and receiving of messages if previously enabled.
            This operation is composite, if removing one entry from the realm would result in failure then all entries will remain attached to the realm.
            The canSend and canReceive values of any entry in the collection have no effect on the outcome of this operation.
            </summary>
            <param name="entries">the collection of entries to remove interest propagation from the realm for</param>
            <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException">if any of the given entries to not contain a channelName which represents a channel, this exception is thrown</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if there was some problem removing the entries from the server, this exception is thrown.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemoteInterestManager.canSend(com.pcbsys.nirvana.nAdminAPI.nLeafNode)">
            <summary>
            Queries whether a given leaf node has the ability to propagate messages to other realms its parent realm is connected to
            </summary>
            <param name="channelNode">the given leaf node to test</param>
            <returns>
            returns true if the given leaf node will propagate messages to other realms, providing the correct canReceive value is set on them.
            It returns false if there is no interest entry for this realm or if the sending flag is explicitly disabled for this leaf node.
            </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nRemoteInterestManager.canReceive(com.pcbsys.nirvana.nAdminAPI.nLeafNode)">
            <summary>
            Queries whether a given leaf node has the ability to receive propagated messages from other realms.
            </summary>
            <param name="channelNode">the given leaf node to test</param>
            <returns>
            returns true if the given leaf node will receive messages from other realms, providing the correct canSend value is set on them.
            It returns false if there is no interest entry for this leaf node or if the receipt flag is explicitly set to false.
            </returns>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup">
            
             <summary> * This class represents a "Security Group" that contains entries for nSubject objects, and other nSecurityGroup objects.
             *
             * The class can be used in conjunction with the nACLEntry (and any subclass of this object) in order to add
             * nSecurityGroup objects into nACL objects for Nirvana Realm ACLs, Channel / Queue ACLs or Interface Via Lists. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup.#ctor(System.String)">
             
              <summary> * Construct the nSecurityGroup with it's name
              * </summary>
              * <param name="name"> the name of the group </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup.#ctor(System.String,com.pcbsys.nirvana.client.nSubject[])">
             
              <summary> * Construct the nSecurityGroup with a name and members
              * </summary>
              * <param name="name"> the name of the security group </param>
              * <param name="members"> the initial members of the group </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup.#ctor(com.pcbsys.foundation.security.fAclGroup)">
            <summary>
            Constructor for nSecurity Group taking an fACLGroup representation of a group
            </summary>
            <param name="group">the fACLGroup to generate this SecurityGroup from</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup.add(com.pcbsys.nirvana.client.nSubject)">
             
              <summary> * Add a member to the group
              * </summary>
              * <param name="member"> the member to add </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup.contains(com.pcbsys.nirvana.client.nSubject)">
             
              <summary> * Checks whether this nSecurityGroup contains a specific nSubject
              * </summary>
              * <param name="member"> the member to check within this group and sub groups </param>
              * <returns> true if the member exists, else false </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup.contains(System.String)">
             
              <summary> * Checks whether this nSecurityGroup contains a specific member (could be another nSecurityGroup or an nSubject
              * </summary>
              * <param name="member"> the member to check within this group and sub groups </param>
              * <returns> true if the member exists, else false </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup.lookup(com.pcbsys.nirvana.client.nSubject)">
             
              <summary> * Locate the nSubject within this nSecurityGroup or it's member nSecurityGroup objects
              * </summary>
              * <param name="member"> the member being searched for </param>
              * <returns> the nSubject or nSecurityGroup that represents the nSubject passed in </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup.getSubject">
            <summary>
            Returns the fACLGroup representation of the Security Group.
            </summary>
            <returns>the fACLGroup which is used to represent this SecurityGroup.</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroup.getMembers">
            <summary>
            Returns the members of this security group as a collection of nSubjects.
            </summary>
            <returns>a collection of nSubject objects, representing the members of this security group.</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.#ctor(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
            <summary>
            Create a new nSecurityGroupManager for the nRealmNode provided
            </summary>
            <param name="node">the realmNode which this securityGroupManager will control.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.registerSecurityGroup(System.String)">
            <summary>
            Register a new group with the Nirvana Realm
            </summary>
            <param name="name">the name of the group to register</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the group could not be registered on the realm</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.removeSecurityGroupMember(System.String,System.String)">
            <summary>
            Remove a member of a group.
            </summary>
            <param name="group">The name of the group to remove the member from</param>
            <param name="name">The subject to be removed from the group</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the member could not be removed from the group</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.removeSecurityGroupMember(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup,com.pcbsys.nirvana.client.nSubject)">
            <summary>
            Remove a member from a security group.
            </summary>
            <param name="group">The group which the member should be removed from</param>
            <param name="sub">The subject to be removed from the group</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the subject could not be removed from the group</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.removeSecurityGroupMembers(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup,System.Collections.Generic.IList{com.pcbsys.nirvana.client.nSubject})">
            <summary>
            Remove a collection of group members from a given group.
            </summary>
            <param name="group">The group these members should be removed from</param>
            <param name="subsToRemove">The members to be removed from the group</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the members could not be removed from the specified group</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.removeSecurityGroupMembers(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup,System.String[])">
            <summary>
            Remove a collection of members from a specified group
            </summary>
            <param name="group">The group the subjects should be removed from</param>
            <param name="subsToRemove">The subjects to be removed from the group</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the operation cannot be performed</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.removeSecurityGroupMembers(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup[],System.String[])">
            <summary>
            Remove a set of members from a set of security groups
            </summary>
            <param name="groups">The groups the specified members should eb removed from</param>
            <param name="subsToRemove">The members to be removed from the specified groups</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the operation cannot be performed</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.deregisterSecurityGroup(System.String)">
            <summary>
            Deregister a security group on the realm. This will also remove the group from all ACLs it is currently part of.
            </summary>
            <param name="name">the name a the group to be deregistered</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the group cannot be deregistered from the realm</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.deregisterSecurityGroup(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup)">
            <summary>
            Deregister a security group on the realm. This will also remove the group from all ACLs it is currently part of.
            </summary>
            <param name="grp">the group to be deregistered</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the group cannot be deregistered from the realm</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.registerGroupMembers(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup,System.Collections.Generic.List{com.pcbsys.nirvana.client.nSubject})">
            <summary>
            Register a collection of nSubject members as members of a security group
            </summary>
            <param name="group">The group to add the specified members to</param>
            <param name="members">The list of (nSubject) members to add to the group</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the operation cannot be performed</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.registerGroupMembers(System.String,System.Collections.Generic.List{com.pcbsys.foundation.security.fSubject})">
            <summary>
            Register a collection of nSubject members as members of a security group
            </summary>
            <param name="name">The name of the group to add the specified members to</param>
            <param name="members">The collection of (nSubject) members to add to the group</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the operation cannot be performed</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.registerGroupMember(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup,com.pcbsys.nirvana.client.nSubject)">
            <summary>
            Register an nSubject member as a members of a security group
            </summary>
            <param name="group">The group to add the specified member to</param>
            <param name="member">The (nSubject) member to add to the group</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the operation cannot be performed</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.registerGroupMember(System.String,com.pcbsys.nirvana.client.nSubject)">
            <summary>
            Register an nSubject member as a members of a security group
            </summary>
            <param name="group">The name of the group to add the specified member to</param>
            <param name="member">The (nSubject) member to add to the group</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the operation cannot be performed</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.registerGroupMembers(System.Collections.Generic.IList{com.pcbsys.nirvana.nAdminAPI.nSecurityGroup},System.Collections.Generic.IList{com.pcbsys.nirvana.client.nSubject})">
            <summary>
            Register a collection of (nSubject) members as a members in each of a collection of security groups
            </summary>
            <param name="groups">The groups to add the specified members to</param>
            <param name="subs">The members to add to each of the specified groups</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the operation cannot be performed</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.getGroups">
            <summary>
            Returns a collection containing all groups currently registered on the realm.
            </summary>
            <returns>a collection of nSecurityGroups, containing all groups currently registered on the realm.</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.getStore">
            <summary>
            For Internal use only.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.process(com.pcbsys.nirvana.nAdmin.events.nGroupEvent)">
            <summary>
            For Internal use only
            </summary>
            <param name="grpEvt"></param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.update(com.pcbsys.nirvana.client.Observable,System.Object)">
            <summary>
            Used internally to monitor changes to the security groups.
            </summary>
            <param name="observable"></param>
            <param name="o"></param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.registerSecurityGroup(com.pcbsys.nirvana.nAdminAPI.nSecurityGroup)">
            <summary>
            Register a new security group on the realm
            </summary>
            <param name="grp">the nSecurityGroup to be registered with the realm</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the operation cannot be performed</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupManager.registerSecurityGroups(System.Collections.Generic.IList{com.pcbsys.nirvana.nAdminAPI.nSecurityGroup})">
            <summary>
            Register a collection of security groups on the realm
            </summary>
            <param name="groups">the nSecurityGroups to be registered with the realm</param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">if the operation cannot be performed</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.#ctor(System.Collections.Generic.List{com.pcbsys.foundation.security.fAclGroup})">
            <summary>
            Create a new nSecurityGroupStore from a collection of groups
            </summary>
            <param name="initialGroups">the collection of groups to populate this store.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.addGroup(com.pcbsys.foundation.security.fAclGroup)">
            <summary>
            Add a group to this store
            </summary>
            <param name="group">the fACLGroup to be added to the store.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.addGroupMembers(System.String[],System.Collections.Generic.List{com.pcbsys.foundation.security.fSubject})">
            <summary>
            Add a collection of members to all gorups in the provided list.
            </summary>
            <param name="groupNames">an array of groupNames for these Subjects to be added to, as Strings.</param>
            <param name="members">A collection of subjects to be added to all of the groups.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.addGroups(System.Collections.Generic.List{com.pcbsys.foundation.security.fAclGroup})">
            <summary>
            Add groups to this store.
            </summary>
            <param name="groups">a collection of fAclGroups to be added to the store.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.deleteGroup(com.pcbsys.foundation.security.fAclGroup)">
            <summary>
            Remove a group from the store
            </summary>
            <param name="group">the fAclGroup to be removed</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.deleteGroups(System.String[])">
            <summary>
            Remove a set of groups
            </summary>
            <param name="groups">the names of the groups to be removed as an array of strings.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.deleteGroupMembers(System.String[],System.String[])">
            <summary>
            Delete a set of members from each of a set of groups
            </summary>
            <param name="groups">an array of the names of the groups the members should be removed from (as Strings).</param>
            <param name="members">the string representation of the members to be removed rom each group.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.getGroup(System.String)">
            <summary>
            Return the fACLGroup which corresponds with a particular String (if present)
            </summary>
            <param name="groupName">the name of the group to be retrieved.</param>
            <returns>the fACLGroup corresponding with this name</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.getGroups">
            <summary>
            Returns a collection of fACLGroups which are in this store
            </summary>
            <returns>the fACLGroups in this store.</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSecurityGroupStore.update(com.pcbsys.nirvana.client.Observable,System.Object)">
            <summary>
            Used internally to monitor changes to groups
            </summary>
            <param name="observable"></param>
            <param name="o"></param>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nServiceACLEntry">
            
             <summary>Allows the ability to programmatically allow or deny access to a service
             </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nServiceACLEntry.#ctor(System.String,System.String)">
             
              <summary>Creates a new nServiceACLEntry for the name@host supplied.
              *
             By default this subject has NO privileges and they must be set.
              </summary>
             <param name="name"> Name for the subject </param>
             <param name="host"> Host name for the subject </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nServiceACLEntry.#ctor(System.String)">
             
              <summary>Creates a new nServiceACLEntry for the name@host supplied.
              *
             By default this subject has NO privileges and they must be set.
              </summary>
             <param name="subject"> The entire user@host </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nServiceACLEntry.#ctor(System.String,com.pcbsys.nirvana.nAdminAPI.nACLEntry)">
             
              <summary>Creates a new nServiceACLEntry for the name@host supplied.
              *
             By default this subject has NO privileges and they must be set.
              </summary>
             <param name="subject"> The entire user@host </param>
             <param name="copy"> An nACLEntry to copy the current permissions from </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an invalid or null argument is passed
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nACLEntry"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nServiceACLEntry.canConnect">
             
              <summary>Can the subject connect to the service
              </summary>
             <returns> current state </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nServiceACLEntry.setConnect(System.Boolean)">
             
              <summary>Allow or deny the subject to connect to the service
              </summary>
             <param name="val"> boolean value </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSharedMemoryInterface.#ctor(System.Int64)">
             Creates a shared memory configuration with the supplied timeout and autostart flag
            
             @param timeout driver timeout for read / write
            
             @throws nAdminIllegalArgumentException if adapter is null or the port range is invalid
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSharedMemoryInterface.#ctor(System.String)">
             Creates a shared memory configuration with the supplied timeout and autostart flag
            
             @param path the path to use for the memory mapped files
            
             @throws nAdminIllegalArgumentException if adapter is null or the port range is invalid
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSharedMemoryInterface.getDirectoryPath">
             Get the path where the shared memory files wil be stored, default will be the temp directory on the host machine
            
             @return the directory path used by teh shared memory configurations
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSharedMemoryInterface.setDirectoryPath(System.String)">
             Set the path where the shared memory files will be stored.
            
             @param path the path where the shared memory files will be created - such as /tmp or c:/temp
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSharedMemoryInterface.getBufferSize">
             Gets the size of the shared memory buffers used
            
             @return the size of the shared memory buffers
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSharedMemoryInterface.setBufferSize(System.Int32)">
             Sets the size of the shared memory buffers used
            
             @param size of the shared memory buffer
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSharedMemoryInterface.setTimeout(System.Int32)">
            Set the timeout value used
            @param timeout value used for read / write timeouts
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSharedMemoryInterface.getTimeout">
             Get the value for the Shared Memory Configuration read / write timeout
            
             @return the timeout value
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSharedMemoryInterface.getURL">
            Get the String representation of this interface
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nSocketInterface">
            
             <summary>Socket Interface class. This class exposes the current settings for a nsp
              protocol adapter on the Nirvana Realm server. It is also used to construct a
              new interface on the Realm server, however, the name is only valid when the
              Realm server has added the interface. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSocketInterface.#ctor(System.String,System.Int32)">
             
              <summary>Creates a new Socket Interface with the supplied values
              </summary>
             <param name="adapter"> The adapter to bind to </param>
             <param name="port"> The port to bind to </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if the adapter is null or the port is in an invalid range </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSocketInterface.#ctor(System.String,System.Int32,System.Boolean)">
             
              <summary>Creates a new Socket Interface with the supplied values
              </summary>
             <param name="adapter"> The adapter to bind to </param>
             <param name="port"> The port to bind to </param>
             <param name="autostart"> Specifies whether to autostart this interface </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nSSLInterface">
            
             <summary>This class contains all the configuration required by the Nirvana Realm server to start
              and control the SSL interface.
             </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.#ctor(System.String,System.Int32)">
             
              <summary>Creates a new SSL interface bound to the adapter and port supplied
              </summary>
             <param name="adapter"> to bind to </param>
             <param name="port"> to bind to </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if the adapter is null or the port is in an invalid range </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.#ctor(System.String,System.Int32,System.Boolean)">
             
              <summary>Creates a new SSL interface bound to the adapter and port supplied
              </summary>
             <param name="adapter"> to bind to </param>
             <param name="port"> to bind to </param>
             <param name="autostart"> Shoud it be autostarted </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if the adapter is null or the port is in an invalid range </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getEnabledCiphers">
             
              <summary>Returns an array of strings which represent the current Ciphers enabled for
             use by this interface
              </summary>
             <returns> a String[] containing the names of the ciphers enabled for use by this interface
             </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setEnabledCiphers(System.String[])">
             
              <summary>Specifies the names of the ciphers enabled for use by this interface.
              </summary>
             <param name="ciphers"> a String[] of ciphers enabled for use by this interface </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an empty or null array is specified
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setEnabledCiphers(System.String[],System.Boolean)">
             
              <summary>Specifies the names of the ciphers enabled for use by this interface.
              </summary>
             <param name="ciphers"> a String[] of ciphers enabled for use by this interface </param>
             <param name="checkSupported"> a boolean to indicate whether to validate the list against those ciphers supported by the server </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an empty or null array is specified
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getAlias">
             
              <summary>Returns the certificate name/alias that this interface uses as its
             primary certificate
              </summary>
             <returns> the Name/Alias of the certificate as a String
             </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getProvider">
             
              <summary>Get the name of the JSSE provider used by this SSL interface </summary>
             <returns> The name of the JSSE provider being used for the interface </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setProvider(System.String)">
             
              <summary>Sets the name of the JSSE provider to use for the interface </summary>
             <param name="provider"> the name of the JSSE provider to use </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setPKCS11ConfigFile(System.String)">
            
             Sets the name of the PKCS11 configuration used by this SSL interface
             on the UM server.
             <param name="location"> the location/path of the PKCS11 configuration file. </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getPKCS11ConfigFile">
            
             Get the PKCS11 configuration file used by this SSL interface
             on the UM server.
             <returns> The name of the PKCS11 configuration file. </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setPKCS11NSSName(System.String)">
            
             Sets the name of the PKCS11 NSS name that uniquely identifies the PKCS11
             configuration on the UM server.
             <param name="name"> The NSS name of the PKCS11 configuration file. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getPKCS11NSSName">
             
             Get the PKCS11 NSS name that unique identifies the PKCS11 configuration
             on the UM server.
             <returns> The NSS Name used in the PKCS11 configuration file. </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setPrivateKeyPassword(System.String)">
             
              <summary>Sets the private key password so that the key can be loaded from the key store
              </summary>
             <param name="password"> for the private key as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setAlias(System.String)">
             
              <summary>Sets the certificate name/alias that this interface will use to select its certificate
             from a keystore with multpiple entries.
              </summary>
             <param name="alias"> the name/alias to use as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getCertRequired">
             
              <summary>Returns whether this interface requires SSL client authentication or not.
             <para>
             If this is set to false then this interface allows anonymous connections
             using SSL.  Otherwise the client must have and present a valid certificate chain
             during the SSL handshake.
             </para> </summary>
             <returns> a boolean specifying the SSL client authentication setting
             </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setCertRequired(System.Boolean)">
             
              <summary>Specifies whether this interface requires SSL client authentication or not.
             <para>
             If this is set to false then this interface allows anonymous connections
             using SSL.  Otherwise the client must have and present a valid certificate chain
             during the SSL handshake.
             </para> </summary>
             <param name="required"> a boolean specifying if this interface will force client authentication
             </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getKeyStore">
             
              <summary>Returns the name of the keystore file that this interface uses to load the
             certificate from.
              </summary>
             <returns> The name of the keystore file to use as a String
             </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setKeyStore(System.String)">
             
              <summary>Sets the keystore file that this interface uses to load the certificate from
              </summary>
             <param name="keyStore"> the new keystore name as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setKeyStorePassword(System.String)">
             
              <summary>Sets the keystore password that this interface will use to access the keystore file
             specified.
              </summary>
             <param name="keyStorePassword"> the new password as a string </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setCRLFile(System.String)">
             
              <summary>Sets the Certificate revocation list file name that the interface should use
             to check the incomming ssl connections. Is only used when client certificates
             are required.
              *
             The file should be in a standard X.509 Certificate Revocation List (CRL)
              </summary>
             <param name="fileName"> the file name used as the CRL </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getCRLFile">
             
              <summary>Returns the Certificate revocation list that the server uses.
              </summary>
             <returns> the CRL file name that the interface uses </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getCRLValidationClassName">
             
              <summary>Any class that extends com.pcbsys.nirvana.server.api.nSSLCertficateValidator can be used
             by the server to perform CRL management. The class name can be supplied per interface and
             then when a client connects a callout is issued to this class to validate the connection.
              </summary>
             <returns> current class name of the CRL validation </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setCRLValidationClassName(System.String)">
             
              <summary>Any class that extends com.pcbsys.nirvana.server.api.nSSLCertficateValidator can be used
             by the server to perform CRL management. The class name can be supplied per interface and
             then when a client connects a callout is issued to this class to validate the connection.
              </summary>
             <param name="className"> the classname of the certificate validator to use within this interface </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getTrustStore">
             
              <summary>Returns the current truststore file that this interface uses to validate
             the client certificate chain against.
              </summary>
             <returns> the Truststore file name as a String
             </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setTrustStore(System.String)">
             
              <summary>Sets the truststore file that this interface uses to validate the client
             certificate against.
              </summary>
             <param name="trustStore"> the new truststore file to use </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getSupportedCiphers">
             
              <summary>Returns an array of ciphers this this interface can be configured for use by
             this interface.
              *
             If the cipher is not in this list then the interface can not support it.
              </summary>
             <returns> String[] of ciphers which can be configured for use by this interface
             </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setTrustStorePassword(System.String)">
             
              <summary>Changes the truststore's password that the server uses to access the trust
             store
              </summary>
             <param name="trustStorePassword"> the new password to use as a String </param>
             <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> if an illegal argument is specified
             </exception>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getRandomAlgorithm">
             
              <summary>Returns the SecureRandom algoritm used for this interface. If it is null it uses the system default
             algorithm.
              </summary>
             <returns> a String specifying the Random Algorithm used by this interface
             </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.getRandomProvider">
             
              <summary>Returns the SecureRandom provider used by this interface. If it is null it uses the system default
             provider.
              </summary>
             <returns> a String specifying the Secure Random provider used by this interface
             </returns>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setRandomAlgorithm(System.String)">
             
              <summary>Sets the SecureRandom algorithm to use for this interface
              </summary>
             <param name="alg"> the name of the new SecureRandom algorithm to use
             </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nSSLInterface.setRandomProvider(System.String)">
             
              <summary>Sets the SecureRandom provider to use for this interface
              </summary>
             <param name="prov"> the name of the new SecureRandom provider to use
             </param>
             <see cref="T:com.pcbsys.nirvana.nAdminAPI.nHTTPSInterface"/>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nThreadEntry">
            
             <summary>This class is used to represent instances of tasks within a thread pool
              running within a Nirvana realm
             
              Each entry consists of a label and an execution time in milliseconds
             </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nThreadPool"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nThreadEntry.getExecutionTime">
             
              <summary>Method used to obtain the execution time for this entry in the thread pool </summary>
             <returns> the execution time of this entry </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nThreadEntry.Name">
             
              <summary>Method used to obtain the name / label associated with this thread pool entry
              </summary>
             <returns> the label associated with this task </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nThreadPool">
            
             <summary>This class is used to represent an instance of a thread pool beign used within
              a Nirvana realm
             
              Each threadpool is known by a name, and has a number of values that can be accessed
             </summary>
              <see cref="T:com.pcbsys.nirvana.nAdminAPI.nThreadEntry"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nThreadPool.getSize">
             
              <summary>Get the size of the pool, i.e. the number of threads allocated to the pool </summary>
             <returns> the number of threads used within the pool </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nThreadPool.getIdle">
             
              <summary>Get the number of idle threads within the thread pool </summary>
             <returns> the number of idle threads </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nThreadPool.getQueue">
             
              <summary>Get the number of current tasks queued within the thread pool </summary>
             <returns> the current number of queued tasks </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nThreadPool.getTotal">
             
              <summary>Get the total number of tasks executed by the thread pool during it's lifetime </summary>
             <returns> the total number of tasks executed </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.nThreadPool.Name">
             
              <summary>Get the name of this thread pool </summary>
             <returns> the trhead pool name </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException">
            
             <summary>represents the exception class that is thrown when
              a copy operation is attempted but cannot be completed </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException.#ctor">
            
               <summary>Creates the exception with the default message "Copy operation attempted is not supported"
               </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nUnsupportedCopyException.#ctor(System.String)">
            
               <summary>Creates the exception with the specified message
               </summary>
              <param name="msg"> Message string </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException">
            
             <summary>represents the exception class that is thrown when
              a join operation is attempted but cannot be completed </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException.#ctor">
            
               <summary>Creates the exception with the default message "Join operation attempted is not supported"
               </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nUnsupportedJoinException.#ctor(System.String)">
            
               <summary>Creates the exception with the specified message
               </summary>
              <param name="msg"> Message string </param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nUnsupportedRemoveException">
            
             <summary> represents the exception class that is thrown when
              a remove operation is attempted but cannot be completed </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nUnsupportedRemoveException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nUnsupportedRemoveException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nZone">
            <summary>
            Represents a Zone
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nZone.#ctor(System.String)">
            <summary>
            Constructor for nZone
            Equivalent to Zone(zoneName, null)
            </summary>
            <param name="zoneName">The name of the zone</param>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nZone.#ctor(System.String,System.String)">
            <summary>
            Constructor for nZone.
            </summary>
            <param name="zoneName">The name of the zone</param>
            <param name="uniqueIdentifier">Unique ID for this zone. If null, a unique ID will be generated for you.</param>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.nZoneManager">
            <summary>
            Represents a Zone manager
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nZoneManager.closed(com.pcbsys.nirvana.nAdminAPI.nRealmNode)">
            
             <summary> Called when the nRealmNode is closed, for internal use only. </summary>
             <param name="node"> The nRealmNode which has been closed </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nZoneManager.createZone(System.String)">
            <summary>
            Creates a new Zone object with the given name and a globally unique identifier. Zones may have the same name,
            but different unique identifiers which differentiate them from each other.
            </summary>
            <param name="zoneName">The String value for the Zone name</param>
            <returns>A Zone object with the given name and a randomly generated unique identifier</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nZoneManager.getZone">
            <summary>
            
            </summary>
            <returns>The Zone that this realm is a member of, if any. Otherwise returns null</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nZoneManager.joinZone(com.pcbsys.nirvana.nAdminAPI.nZone)">
            <summary>
            The Realm of this ZoneManager will attempt to join the given Zone. If the Realm is already a member of a Zone, or if
            the Zone specified is not valid then this method will throw an Exception.
            </summary>
            <param name="zone">The Zone to join.</param>
            <returns>True if joining the zone is successful.</returns>
            <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException">If the Realm is already a member of another Zone then this exception will be thrown</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">If there was some problem in applying the joinZone operation then this exception will be thrown</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.nAdminAPI.nZoneManager.leaveZone(com.pcbsys.nirvana.nAdminAPI.nZone)">
            <summary>
            The Realm of this ZoneManager will attempt to leave the given Zone. If the Realm is not a member of this Zone, or
            if the Zone specified is not valid then this method will throw an Exception.
            </summary>
            <param name="zone">The Zone to leave</param>
            <returns>True is the Realm successfully leaves the given Zone. False if the operation was not attempted as the underlying connection is down</returns>
            <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException">If the Realm is not a member of a Zone, or is a member of a different Zone then this exception will be thrown.</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">If there was some problem in applying the leaveZone operation then this exception will be thrown</exception>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.RealmConfiguration">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.RealmPermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.ClusterSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.RealmSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.ChannelSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.QueueSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.DataGroupSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.RealmInterfaces">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.RealmSecurityGroupSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.RealmSchedulerSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.exportDate">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NirvanaRealm.comment">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ConfigGroup">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConfigGroup.ConfigItem">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConfigGroup.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConfigGroup.description">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ConfigItem">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConfigItem.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConfigItem.value">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConfigItem.description">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConfigItem.warning">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.ACKmode">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.KeepAliveInterval">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.PacketTTL">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.TrafficClass">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.FlusherInterval">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.AckWindowsize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.UnackedWindowsize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.PacketSize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.ReceiverOutstandingPacketSize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.SenderOutstandingPacketSize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntry.PeakDetectionRate">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntryACKmode">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntryACKmode.ACKWINDOW">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntryACKmode.NACKWINDOW">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastAdvancedConfigurationEntryACKmode.BROADCAST">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntry.CRCtype">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntry.encryptionlevel">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntry.RotateEnryptionKeyWait">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntry.RotateEncryptionKeyTime">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntry.SessionIDSize">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryCRCtype">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryCRCtype.NONE">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryCRCtype.CRC">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryCRCtype.MD5">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryCRCtype.SHA">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryEncryptionlevel">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryEncryptionlevel.NONE">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryEncryptionlevel.AES128">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryEncryptionlevel.AES192">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastSecurityConfigurationEntryEncryptionlevel.AES256">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastBasicConfigurationEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastBasicConfigurationEntry.Name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastBasicConfigurationEntry.MulticastAddress">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastBasicConfigurationEntry.AdapterAddress">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastBasicConfigurationEntry.AdapterBufferSize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastBasicConfigurationEntry.Clientestablishmenttimeout">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastBasicConfigurationEntry.useforClusters">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastBasicConfigurationEntry.useforDatagroups">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastBasicConfigurationEntry.useforStatusUpdates">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastConfigurationEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastConfigurationEntry.RealmMulticastBasicConfigurationEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastConfigurationEntry.RealmMulticastSecurityConfigurationEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmMulticastConfigurationEntry.RealmMulticastAdvancedConfigurationEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmSHMConfigurationEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSHMConfigurationEntry.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSHMConfigurationEntry.directory">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSHMConfigurationEntry.buffersize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSHMConfigurationEntry.timeout">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.RealmInterface">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.RealmInterfacePlugin">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.InterfacePermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.RealmInterfaceSSLConfig">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.RealmInterfaceSupportedCipherSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.JavascriptConfigEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.EnableWebSockets">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.EnableWebSocketsSpecified">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.EnableNativeComet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.EnableNativeCometSpecified">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.AjaxLPIdleDelay">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.AjaxLPIdleDelaySpecified">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.AjaxLPActiveDelay">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.AjaxLPActiveDelaySpecified">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.InitialJavascript">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPSInterfaceEntry.type">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.port">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.adapter">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.autostart">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.advertise">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.authtime">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.backlog">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.acceptThreads">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.alias">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.sendbuffersize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.receivebuffersize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.allowforinterrealm">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.allowclientconnections">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.allowclientconnectionsSpecified">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.randomprovider">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceEntry.randomalgorithm">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfacePluginEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfacePluginEntry.PluginConfigEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfacePluginEntry.mountPoint">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfacePluginEntry.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfacePluginEntry.type">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.PluginConfigEntryType">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.PluginConfigEntryType.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.PluginConfigEntryType.value">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.PluginConfigEntryType.description">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.InterfacePermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.InterfacePermissionSet.InterfaceACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.InterfacePermissionSet.InterfaceGroupACLEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.InterfaceACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.InterfaceACLEntry.host">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.InterfaceACLEntry.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.InterfaceGroupACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.InterfaceGroupACLEntry.groupname">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSSLConfig">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSSLConfig.enableClientValidation">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSSLConfig.keyStorePath">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSSLConfig.trustStorePath">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSSLConfig.certificateAlias">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSSLConfig.CRLFile">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSupportedCipher">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSupportedCipher.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.JavascriptConfigEntryType">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.JavascriptConfigEntryType.CustomHeadersConfig">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.JavascriptConfigEntryType.EnableWebSockets">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.JavascriptConfigEntryType.EnableNativeComet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.JavascriptConfigEntryType.AjaxLPIdleDelay">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.JavascriptConfigEntryType.AjaxLPActiveDelay">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.JavascriptConfigEntryType.InitialJavascript">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.CustomHeadersConfigEntryType">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.CustomHeadersConfigEntryType.Key">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.CustomHeadersConfigEntryType.Value">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.CustomHeadersConfigEntryType.UserAgents">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPSInterfaceEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPSInterfaceEntry.RealmInterface">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPSInterfaceEntry.InterfacePermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPSInterfaceEntry.RealmInterfaceSSLConfig">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPSInterfaceEntry.RealmInterfaceSupportedCipherSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPSInterfaceEntry.type">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPInterfaceEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPInterfaceEntry.RealmInterface">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPInterfaceEntry.RealmInterfacePlugin">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPInterfaceEntry.InterfacePermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPInterfaceEntry.JavascriptConfigEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNHPInterfaceEntry.type">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPInterfaceEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPInterfaceEntry.RealmInterface">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPInterfaceEntry.InterfacePermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmNSPInterfaceEntry.type">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSet.RealmNSPInterface">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSet.RealmNHPInterface">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSet.RealmNSPSInterface">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSet.RealmNHPSInterface">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSet.RealmSHMConfiguration">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSet.RealmMulticastConfiguration">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmPermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmPermissionSet.RealmACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmPermissionSet.RealmGroupACLEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.listACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.modifyACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.fullControl">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.connectToRealm">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.changeRealmConfig">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.addremoveChannels">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.addremoveJoins">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.createP2PService">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.addremoveRealms">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.overrideConnectionCount">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.useAdminAPI">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.manageDatagroups">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.publishDatagroups">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.ownDatagroups">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.host">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmACLEntry.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.listACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.modifyACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.fullControl">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.connectToRealm">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.changeRealmConfig">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.addremoveChannels">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.addremoveJoins">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.createP2PService">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.addremoveRealms">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.overrideConnectionCount">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.useAdminAPI">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.manageDatagroups">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.publishDatagroups">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.ownDatagroups">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmGroupACLEntry.groupname">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ClusterEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterEntry.ClusterMember">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterEntry.ClusterSite">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterEntry.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ClusterMember">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterMember.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterMember.rname">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterMember.canBeMaster">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ClusterSite">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterSite.SiteMember">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterSite.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterSite.isPrime">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.SiteMember">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.SiteMember.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmEntry.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmEntry.rname">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmEntry.mountpoint">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelEntry.ChannelAttributesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelEntry.StorePropertiesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelEntry.ChannelPermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelEntry.ChannelKeySet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelEntry.ChannelJoinSet">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntry.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntry.TTL">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntry.capacity">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntry.EID">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntry.clusterWide">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntry.jmsEngine">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntry.mergeEngine">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntry.type">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntryType">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntryType.RELIABLE_TYPE">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntryType.PERSISTENT_TYPE">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.ChannelAttributesEntryType.MIXED_TYPE">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.HonorCapacityWhenFull">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.SyncOnEachWrite">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.SyncMaxBatchSize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.SyncBatchTime">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.PerformAutomaticMaintenance">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.ClientMergeEngineClassname">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.EnableCaching">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.CacheOnReload">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.EnableReadBuffering">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.ReadBufferSize">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.FanoutArchiveTarget">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.Priority">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.PrioritySpecified">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.StampDictionary">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.StorePropertiesEntry.StampDictionarySpecified">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelPermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelPermissionSet.ChannelACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelPermissionSet.ChannelGroupACLEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.listACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.modifyACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.fullControl">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.getLastEID">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.purgeEvents">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.subscribe">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.publish">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.useNamedSubcription">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.host">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelACLEntry.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry.listACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry.modifyACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry.fullControl">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry.getLastEID">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry.purgeEvents">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry.subscribe">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry.publish">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry.useNamedSubcription">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelGroupACLEntry.groupname">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelKeyEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelKeyEntry.keyName">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelKeyEntry.keyDepth">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelJoinEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelJoinEntry.filter">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelJoinEntry.hopcount">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelJoinEntry.to">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelJoinEntry.from">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelJoinEntry.allowPurge">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.QueueEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueEntry.ChannelAttributesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueEntry.StorePropertiesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueEntry.QueuePermissionSet">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.QueuePermissionSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueuePermissionSet.QueueACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueuePermissionSet.QueueGroupACLEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry.listACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry.modifyACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry.fullControl">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry.purge">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry.peek">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry.push">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry.pop">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry.host">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueACLEntry.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.QueueGroupACLEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueGroupACLEntry.listACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueGroupACLEntry.modifyACLEntries">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueGroupACLEntry.fullControl">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueGroupACLEntry.purge">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueGroupACLEntry.peek">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueGroupACLEntry.push">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueGroupACLEntry.pop">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueGroupACLEntry.groupname">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupEntry.DataGroupAttributesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupEntry.ConflationAttributesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupEntry.DataGroupPublisherEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupEntry.NestedGroupEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupAttributesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupAttributesEntry.name">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupAttributesEntry.id">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupAttributesEntry.priority">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupAttributesEntry.multicastenabled">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ConflationAttributesEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConflationAttributesEntry.interval">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConflationAttributesEntry.type">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ConflationAttributesEntry.typeSpecified">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ConflationAttributesEntryType">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.ConflationAttributesEntryType.MERGE_EVENTS_TYPE">
            <remarks/>
        </member>
        <member name="F:com.pcbsys.nirvana.nAdminAPI.xml.ConflationAttributesEntryType.DROP_EVENTS_TYPE">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupPublisherEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupPublisherEntry.host">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupPublisherEntry.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.NestedGroupEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.NestedGroupEntry.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmSecurityGroup">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSecurityGroup.RealmSecurityGroupEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSecurityGroup.SecurityGroupSubjectEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSecurityGroup.SecurityGroupReferenceEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmSecurityGroupEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSecurityGroupEntry.groupname">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.SecurityGroupSubjectEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.SecurityGroupSubjectEntry.host">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.SecurityGroupSubjectEntry.name">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.SecurityGroupReferenceEntry">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.SecurityGroupReferenceEntry.groupname">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.Scheduler">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.Scheduler.source">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.Scheduler.subject">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.Scheduler.clusterWide">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ClusterSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ClusterSet.ClusterEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSet.RealmEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmConfiguration">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmConfiguration.ConfigGroup">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmSchedulerSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSchedulerSet.Scheduler">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmSecurityGroupSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmSecurityGroupSet.RealmSecurityGroup">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelKeySet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelKeySet.ChannelKeyEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelSet.ChannelEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.DataGroupSet.DataGroupEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.QueueSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.QueueSet.QueueEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.ChannelJoinSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.ChannelJoinSet.ChannelJoinEntry">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSupportedCipherSet">
            <remarks/>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdminAPI.xml.RealmInterfaceSupportedCipherSet.RealmInterfaceSupportedCipher">
            <remarks/>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nAdminContainer">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nAdminContainer.myEvent" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nAdminContainer.#ctor(com.pcbsys.nirvana.nbase.events.nEvent)">
             
              <summary> </summary>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nAdminEventFactory">
            
             <summary>This class implements the base Event Factory.
             
              It is used to construct the basic nirvana nEvent object. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nAdminEventFactory.#ctor">
             
              <summary>Constructor </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nAdminEventFactory.getEvent(System.Int32)">
             
              <summary>Creates a class corresponding to the ID passed in
              </summary>
             <param name="id"> The class Id to create </param>
             <returns> The class instance </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nAdminEventFactory.getObject(System.Int32)">
             
              <summary>
              </summary>
             <param name="id">  </param>
             <returns>  </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nChannelMaintenance">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nChannelMaintenance.myChannelName" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMaintenance.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMaintenance.#ctor(System.String)">
             
              <summary>
              </summary>
             <param name="channelName">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMaintenance.getChannelName">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMaintenance.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="!:Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMaintenance.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="!:Exception">  </exception>
             <exception cref="!:ClassNotFoundException">  </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nChannelMap">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nChannelMap.myChannelList" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nChannelMap.myChannel" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMap.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMap.#ctor(System.String)">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMap.addChannel(com.pcbsys.nirvana.nbase.nSecureChannel)">
             
              <summary>
              </summary>
             <param name="channel">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMap.getChannels">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMap.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nChannelMap.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nDiagEvent.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="!:Exception">  </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nDisconnectionRequestEvent">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nDisconnectionRequestEvent.myConnectionID" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nDisconnectionRequestEvent.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nDisconnectionRequestEvent.#ctor(System.String,System.Boolean,System.Boolean)">
             
              <summary>
              </summary>
             <param name="aconnectionID">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nDisconnectionRequestEvent.getConnectionID">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nDisconnectionRequestEvent.isSynchronous">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nDisconnectionRequestEvent.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="!:Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nDisconnectionRequestEvent.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="!:Exception">  </exception>
             <exception cref="!:ClassNotFoundException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nJoinFind.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="!:Exception">  </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nJoinRestart">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nJoinRestart.myEID" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nJoinRestart.myKey" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nJoinRestart.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nJoinRestart.#ctor(System.String,System.Int64)">
             
              <summary>
              </summary>
             <param name="key">  </param>
             <param name="EID">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nJoinRestart.isSynchronous">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nJoinRestart.getEID">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nJoinRestart.getJoinKey">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nJoinRestart.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="!:Exception">  </exception>
             <exception cref="!:ClassNotFoundException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nJoinRestart.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="!:Exception">  </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nParentRealm">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nParentRealm.myRealm" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nParentRealm.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nParentRealm.#ctor(com.pcbsys.nirvana.nbase.nRealm)">
             
              <summary>
              </summary>
             <param name="newRealm">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nParentRealm.getRealm">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nParentRealm.isSynchronous">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nParentRealm.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="!:Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nParentRealm.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="!:Exception">  </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nRealmMap">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nRealmMap.myRealmList" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nRealmMap.myRealm" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nRealmMap.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nRealmMap.addRealm(com.pcbsys.nirvana.nbase.nSecureRealm)">
             
              <summary>
              </summary>
             <param name="aRealm">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nRealmMap.getRealms">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nRealmMap.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nRealmMap.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent.myACL" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent.myName" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent.myEntry" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent.#ctor(System.Int32,System.String,com.pcbsys.foundation.security.fAclList)">
             
              <summary>
              </summary>
             <param name="requestId">  </param>
             <param name="name">  </param>
             <param name="list">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent.getAcl">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="T:System.Exception">  </exception>
             <exception cref="!:ClassNotFoundException">  </exception>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nAdmin.events.nSecurityEvent.Name">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nServerJoin">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nServerJoin.myEvent" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nServerJoin.myEID" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nServerJoin.myDestination" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nAdmin.events.nServerJoin.myKey" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes,com.pcbsys.nirvana.nbase.nChannelAttributes,System.String,System.Int64)">
             
              <summary>
              </summary>
             <param name="src">  </param>
             <param name="dst">  </param>
             <param name="eid">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes,com.pcbsys.nirvana.nbase.nChannelAttributes,System.String,com.pcbsys.nirvana.nbase.events.nPublishedJoin)">
             
              <summary>
              </summary>
             <param name="src">  </param>
             <param name="dst">  </param>
             <param name="evt">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.getEvent">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.getEID">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.getDestinationId">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.isSynchronous">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.getJoinKey">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="!:Exception">  </exception>
             <exception cref="!:ClassNotFoundException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerJoin.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="!:Exception">  </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nServerMap">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerMap.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerMap.getFQRI">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerMap.setHostName(System.String)">
             
              <summary>
              </summary>
             <param name="host">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerMap.getHostName">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerMap.setRealmName(System.String)">
             
              <summary>
              </summary>
             <param name="realm">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerMap.getRealmName">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerMap.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="!:Exception">  </exception>
             <exception cref="!:ClassNotFoundException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nServerMap.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="!:Exception">  </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.events.nStatusEvent">
            
             <summary> </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nAdmin.events.nStatusEvent.createInstance" -->
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nStatusEvent.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nStatusEvent.#ctor(com.pcbsys.nirvana.nbase.events.nPublished)">
             
              <summary>
              </summary>
             <param name="request">  </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.events.nStatusEvent.isSynchronous">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.nAdminSession">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.findStatusChannel">
             
              <summary>This method locates the status channel for the realm that this session is
             bound to. There are no parameters since the status channel is a server bound
             instance.
              *
             The status channel contains ServerStatus events which contains information about the
             realm and the channels contained within it. The status channel can not be published
             too it is a read only channel.
              </summary>
             <returns> The realm status channel </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> If unable to complete the function </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.findTXChannel">
             
              <summary>This method locates the tx channel for the realm that this session is
             bound to. There are no parameters since the status channel is a server bound
             instance.
              </summary>
             <returns> The realm tx channel </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> If unable to complete the function </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.setClientTimeouts(System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             
               <summary>Sets the nirvana clients timeout. These settings will be used by
               * ALL clients and is automatically sent to new clients as they connect
               * as part of the initial client - server handshake
               </summary>
               * <param name="eventWait"> This is the time in milliseconds that the client wait for a server response. If this is set too low the client
               * will get event timed out exceptions. </param>
               * <param name="discWait"> Reserved for future functionality </param>
               * <param name="txPubWait"> Reserved for future functionality </param>
               * <param name="kaWait"> Client Keep Alive delay. This is the time in milliseconds that a keep alive will be sent if no other traffic
               * has been sent. </param>
               * <param name="low"> Client low watermark. Must be lower than the HighWater mark </param>
               * <param name="high"> Client high watermark. This is the point at which the client will
               * request the server to stop sending events until the client </param>
               * <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> If the function was unsuccessful </exception>
               
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.setContainerACL(com.pcbsys.foundation.security.fAclEntry,System.String,System.Boolean)">
             
              <summary>
              </summary>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.setContainerACL(com.pcbsys.foundation.security.fAclList,System.String)">
             
              <summary>
              </summary>
             <param name="acl">  </param>
            <param name="container"></param>
            <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.setRealmACL(com.pcbsys.nirvana.nbase.nSecureRealm)">
             
              <summary>
              </summary>
             <param name="nr">  </param>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.disconnectConnection(System.String,System.Boolean,System.Boolean)">
             
              <summary>Disconnects a client from the server. The Client ID is a unique ID which specifies the client
             that you wish to disconnect from the server
              </summary>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> If the function failed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.defragStorage(System.String)">
             
              <summary>This function requests the server to free up the unused space in the specified channel. This is useful
             if the amount of free space is large. This is a asynchronous request and the server may take some time to
             complete the operation.
              </summary>
             <param name="channelName"> The name of the channel to free the disk space up on </param>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> if the user is not authorized to perform this operation </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.getJoinInformation">
             
              <summary>This method returns a list of joins the realm knows about
              </summary>
             <returns> A Vector of join information </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> If the client is not authorized to perform this operation </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.addConfigListener(com.pcbsys.nirvana.nAdmin.nConfigListener)">
             
              <summary>Registers the passed nConfigListener to receive all Realm server configuration events
              </summary>
             <param name="listener"> The object to handle the changes to the configuration </param>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> If the function could not complete </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.removeConfigListener(com.pcbsys.nirvana.nAdmin.nConfigListener)">
             
              <summary>Deregisters the listener and stops it receiving Realm Server configuration events
              </summary>
             <param name="listener"> The registered listener </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.getConfiguration">
             
              <summary>This method returns the current Realm Server configuration in a Vector
              </summary>
             <returns> A Vector of fConfigObject </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.getServerStats">
             
              <summary>
              </summary>
             <returns>  </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.getRealmStats">
             
              <summary>
              </summary>
             <returns>  </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.getRealmStats(System.String)">
             
              <summary>
              </summary>
             <param name="sRealmName">  </param>
             <returns>  </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.getChannelStats">
             
              <summary>
              </summary>
             <returns>  </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.getChannelStats(System.String)">
             
              <summary>
              </summary>
             <returns>  </returns>
             <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.setConfiguration(System.Collections.ArrayList)">
             
              <summary>
              </summary>
             <param name="newConfig">  </param>
             <exception cref="T:com.pcbsys.nirvana.nbase.nException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.#ctor(com.pcbsys.nirvana.client.nSessionAttributes)">
             
              <summary>
              </summary>
             <param name="attr">  </param>
             <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.#ctor(com.pcbsys.nirvana.client.nSessionAttributes,com.pcbsys.nirvana.client.nReconnectHandler,System.Net.NetworkCredential)">
             
              <summary>
              </summary>
             <param name="attr">  </param>
            <param name="handler"></param>
            <param name="username"></param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.handleAsynchronousEvents(com.pcbsys.nirvana.nbase.events.nEvent)">
             
              <summary>
              </summary>
             <param name="evt">  </param>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.getZone">
             
               <summary> If the realm this session is connected to is part of a Zone then this function will return a reference to that Zone.
               Otherwise, it returns a null.
               </summary>
               <returns> The Zone for this session's realm, otherwise null </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">   User is not authorised for the function </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> If the function was unsuccessful</exception>
               
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.joinZone(com.pcbsys.nirvana.nAdminAPI.nZone)">
             
               <summary> Sets the passed Zone on the realm this session is connected to.
               </summary>
               <param name="zone"> The zone which needs to be set on the realm </param>
               <returns> void </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
               <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> Illegal parameter, check the message for more information </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">           If the function was unsuccessful</exception>
               
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSession.leaveZone(com.pcbsys.nirvana.nAdminAPI.nZone)">
             
               <summary> Removes the realm, which this session is connected to, from the given Zone.
               </summary>
               <param name="zone"> The zone from which we need to remove the realm </param>
               <returns> void </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
               <exception cref="T:com.pcbsys.nirvana.nAdminAPI.nAdminIllegalArgumentException"> Illegal parameter, check the message for more information </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException">           If the function was unsuccessful</exception>
               
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.nAdminSessionFactory">
            
             <summary>This class is used with a nSessionAttrib object to create a Nirvana Admin session. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSessionFactory.createAdmin(com.pcbsys.nirvana.client.nSessionAttributes,System.String)">
              
               <summary>Creates an nAdminSession object (Nirvana admin session) based on the nSessionAttrib object and username supplied
               </summary>
              <param name="attr"> The nSessionAttrib object containing the parameters for the session to be created </param>
              <param name="username"> The username to be used during authentication with the server </param>
              <returns> the newly created nAdminSession object </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSessionFactory.createAdmin(com.pcbsys.nirvana.client.nSessionAttributes,System.Net.NetworkCredential)">
             
              <summary>Creates an nAdminSession object (Nirvana admin session) based on the nSessionAttrib object and credentials supplied
              </summary>
             <param name="attr"> The nSessionAttrib object containing the parameters for the session to be created </param>
             <param name="creds"> The NetworkCredential containing a username and password to be used during authentication (optional) </param>
             <returns> the newly created nAdminSession object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSessionFactory.createAdmin(com.pcbsys.nirvana.client.nSessionAttributes,com.pcbsys.nirvana.client.nReconnectHandler,System.String)">
            
               <summary>Creates an nAdminSession object (Nirvana admin session) based on the parameters supplied
               </summary>
              <param name="attr"> The nSessionAttrib object containing the parameters for the session to be created </param>
              <param name="handler"> A reconnect handler to use for the session </param>
              <param name="username"> The username to be used during authentication with the server </param>
              <returns> the newly created nAdminSession object </returns>
               
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nAdminSessionFactory.createAdmin(com.pcbsys.nirvana.client.nSessionAttributes,com.pcbsys.nirvana.client.nReconnectHandler,System.Net.NetworkCredential)">
            
               <summary>Creates an nAdminSession object (Nirvana admin session) based on the parameters supplied
               </summary>
              <param name="attr"> The nSessionAttrib object containing the parameters for the session to be created </param>
              <param name="handler"> A reconnect handler to use for the session </param>
              <param name="creds"> The NetworkCredential containing a username and password to be used during authentication (optional) </param>
              <returns> the newly created nAdminSession object </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry.#ctor(System.String,System.Boolean,System.Boolean)">
                   
            <summary> Creates a new remote interest entry for a given channel name
            </summary>
            <param name="channelName"> channelName the name of the channel to set interest properties for </param>
            <param name="canSend"> canSend if set to true messages published to the corresponding channel 
                                will be propagated to realms </param>
            <param name="canReceive"> canReceive if set to true messages from other realms will be propagated to this channel </param>
                      
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
                   
            <summary> Creates a new remote interest entry for a given channel name
            </summary>
            <param name="channelName"> channelName the name of the channel to set interest properties for </param>
            <param name="canSend"> canSend if set to true messages published to the corresponding channel 
                                will be propagated to realms </param>
            <param name="canReceive"> canReceive if set to true messages from other realms will be propagated to this channel </param>
            <param name="isDynamic"> if set to true the ability to receive messages from other realms will be dependent to whether 
                                there is a subscriber present on the given channel</param>
            <exception cref="T:System.NullReferenceException"> If channel name is null</exception>
                                
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry.getChannelName">
            
            <returns> The channel name for this entry </returns>
            
        </member>
        <member name="P:com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry.CanSend">
            <summary>
            true if the entry allows propagation of messages to other realms for this channel
            </summary>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry.CanReceive">
            <summary>
            true if the entry allows receipt of messages from other realms for this channel
            </summary>
        </member>
        <member name="P:com.pcbsys.nirvana.nAdmin.nRemoteInterestEntry.IsDynamic">
            <summary>
            true if receipt of messages from other realms is based on the presence of subscribers on the given channel.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.nStatusChannel">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nStatusChannel.#ctor(com.pcbsys.nirvana.client.nChannelImpl)">
             
              <summary>Our only constructor Attributes and the controlling nSession are assigned
              </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nStatusChannel.addSubscriber(com.pcbsys.nirvana.nAdmin.nStatusListener)">
            
              <summary>Registers the specified nStatusListener as a subscriber to this channel.
             The subscriber will receive all events contained in this channel.
              </summary>
             <param name="nel"> the nStatusListener object to be registered as a subscriber
             or an error occurs </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nStatusChannel.addSubscriber(com.pcbsys.nirvana.nAdmin.nStatusListener,System.Int64)">
             
              <summary>Registers the specified nStatusListener as a subscriber to this channel.
             The subscriber will receive all events with event id greater than or equeal
             to the one specified.
              </summary>
             <param name="nel"> the nStatusListener object to be registered as a subscriber </param>
             <param name="eid"> a long specifying the subscription's start eid
             or an error occurs </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nStatusChannel.addSubscriber(com.pcbsys.nirvana.nAdmin.nStatusListener,System.String)">
             
              <summary>Registers the specified nStatusListener as a subscriber to this channel.
             The subscriber will receive all events contained in this channel, apart from
             the ones restricted by the specified filter.
              </summary>
             <param name="nel"> the nStatusListener object to be registered as a subscriber </param>
             <param name="selector"> a string specifying a filter to this subscription request
             or an error occurs </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nStatusChannel.removeSubscriber(com.pcbsys.nirvana.nAdmin.nStatusListener)">
             
              <summary>Unregisters the specified nEventListener as a subscriber from this channel.
             The subscriber will not receive any more events.
              </summary>
             <param name="nel"> the nStatusListener object to be registered as a subscriber
             or an error occurs </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nStatusChannel.addSubscriber(com.pcbsys.nirvana.nAdmin.nStatusListener,System.String,System.Int64)">
             
              <summary>Registers the specified nEventListener as a subscriber to this channel.
             The subscriber will receive all events with event id greater than or equeal
             to the one specified, apart from the ones restricted by the specified filter.
              </summary>
             <param name="nel"> the nEventListener object to be registered as a subscriber </param>
             <param name="selector"> a string specifying a filter to this subscription request </param>
             <param name="eid"> a long specifying the subscription's start eid
             or an error occurs </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nAdmin.nTXChannel">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nAdmin.nTXChannel.#ctor(com.pcbsys.nirvana.client.nChannelImpl)">
            
               <summary>Our only constructor Attributes and the controlling nSession are assigned
               </summary>
               
        </member>
    </members>
</doc>
