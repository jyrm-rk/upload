<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nirvana DotNet</name>
    </assembly>
    <members>
        <member name="T:com.pcbsys.nirvana.client.IObserver">
            <summary>
            A class can implement the <code>IObserver</code> interface when it
            wants to be informed of changes in observable objects.
            </summary>
            <see cref="T:com.pcbsys.nirvana.client.Observable"/>
        </member>
        <member name="M:com.pcbsys.nirvana.client.IObserver.update(com.pcbsys.nirvana.client.Observable,System.Object)">
            <summary>
            This method is called whenever the observed object is changed. An
            application calls an <tt>Observable</tt> object's
            <code>notifyObservers</code> method to have all the object's
            observers notified of the change.
            </summary>
            <param name="o">the observable object</param>
            <param name="arg">an argument passed to the <code>notifyObservers</code>
                            method.</param>
            
        </member>
        <member name="T:com.pcbsys.nirvana.client.MapMessage">
            <summary>
            Provides extension methods for the nConsumeEvent class to allow the JMS Map Message to be processed by a dotnet client.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.MapMessage.getPayloadAsDictionary(com.pcbsys.nirvana.client.nConsumeEvent)">
            <summary>
            Nirvana stores the JMS Map Message properties as a byte[] in the data component of an nConsumeEvent
            This method converts the bytes into an nEventProperties to allow access to the map.
            As this is an extension method it must be invoked on an nConsumeEvent object :
            nEventProperties theMap = myEvent.getPayloadAsDictionary();
            </summary>
            <returns> nEventProperties the JMS Map </returns>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nBaseTopicDurable">
            <summary>
            Abstract base class for the durable implementation on a topic.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDurable">
            <summary>
            Abstract representation of a durable subscription. Provides a minimum set of methods to create views for a given
            durable object and to remove events from a durable, if supported by the concrete implementation.
            Implementations of this class represent supported types of durable subscriptions.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nNamedObject">
               
                <summary> This class represents a client context on a RealmServer. In as much as that if a client
                session is closed and sometime later a new client session is created by referencing this
                named object the client can resume where they were </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.getName">
                   
                    <summary> Returns the name of this client context
                    </summary>
                    <returns> String </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.getEID">
                   
                    <summary> Returns the current event ID that this named context is bound to
                    </summary>
                    <returns> long event ID </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.isPersistent">
                   
                    <summary> Will this named object be restored after the Realm Server has been restarted
                    </summary>
                    <returns> bool flag </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.isClusterWide">
                   
                    <summary> Does this named object exist across the cluster
                    </summary>
                    <returns> if the named object is cluster wide </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.isPriorityEnabled">
                   
                      <summary> If set the named object will queue multiple subscription such that the first subscriber will receive all events until
                      it either disconnects or deletes the subscription, at which time, the next subscription request will start to
                      receive events.
                      </summary>
                      <returns> if the named object is cluster wide </returns>
                      
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.getLength">
            
                       <summary> Returns the total number of events for this particular named context.
                                 If the named object is not shared then this method will always return -1
                       </summary>
                       <returns> long length </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.getSelector">
            <summary>
            Selector used for this durable object to filter events.
            </summary>
            <returns>selector used as an event filter</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.isShared">
            <summary>
            Indicates whether the durable object is shared. If true, multiple subscribers 
            are queued and events are sent in a round-robin fashion.
            </summary>
            <returns>whether the durable is shared</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.isQueued">
            <summary>
            Indicates whether the shared durable object is backed with a hidden queue.
            Queued durables are no longer supported. The flag is used for backwards compatibility and only
            query based operations are supported for this type.
            </summary>
            <returns>whether the shared durable is backed with a hidden queue</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.isSerial">
            <summary>
            Indicates whether the durable object is shared. If true, multiple subscribers 
            are queued and events are sent in a serial fashion.
            </summary>
            <returns>whether the durable is serial</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNamedObject.getId">
            <summary>
            Returns the unique ID of this client context.
            </summary>
            <returns> Unique ID for the durable </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurable.remove(System.Int64)">
            <summary>
            If supported, the method will attempt to remove the event with the given event ID from the
            durable object. The support is limited and the operation is available only for shared and serial durables.
            </summary>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
            <param name="eid">ID of the event to purge</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurable.remove(System.Int64,System.Int64)">
            <summary>
            If supported, the method will attempt to remove the events within the specified range from the
            durable object. The support is limited and the operation is available only for shared and serial durables.
            </summary>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
            <param name="start">ID of the event to start purging from</param>
            <param name="end">ID of the event to perge to</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurable.removeAll">
            <summary>
            If supported, the method will attempt to remove all events from the durable object. 
            The support is limited and the operation is available only for shared and serial durables.
            </summary>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurable.remove(System.String)">
            <summary>
            If supported, the method will attempt to remove all events from the durable object which are matching the
            given filter. The support is limited and the operation is available only for shared and serial durables.
            </summary>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
            <param name="filter">The filter to be applied during perging</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurable.createViewer">
            <summary>
            Creates a nDurableViewer object for viewing the elements on a given durable object. Consuming events through this
            object using the nDurableViewer#next() method will not consume or acknowledge the events for the given durable.
            </summary>
            <returns>an nDurableViewer instance that can be used to view the events on a durable object in an iterative manner</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurable.acknowledge(com.pcbsys.nirvana.client.nConsumeEventToken,System.Boolean)">
            <summary>
            Sends an acknowledge request to the server for the given event id. The method will acknowledge the
            current event id and all unacknowledged events with ids less than the requested.
            </summary>
            <param name="eventToken">Identifier of the event to be acknowledged.</param>
            <param name="isSynchronous">if true, the thread will be held until the server has responded to the request</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurable.rollback(com.pcbsys.nirvana.client.nConsumeEventToken,System.Boolean)">
            <summary>
            Rollbacks the given eventToken. The method will rollback the current event id and all 
            unacknowledged events with ids less than the requested.
            </summary>
            <param name="eventToken">Identifier or the event to be rollbacked</param>
            <param name="isSynchronous">if true, the thread will be held until the server has responded to the request</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDurableViewer">
            <summary>
             Abstract implementation for browsing the content of a durable object. Using the next() method
             the user of the API will be able to iterate over the events in a given durable.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nChannelPublishKeys">
               
                <summary> This class contains the information about a single channel key. It contains the
                name and the depth of the key. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelPublishKeys.#ctor(System.String,System.Int32)">
                   
                    <summary> Constructs a publish key object to be used in the channel creation
                    </summary>
                    <param name="name"> name of the key </param>
                    <param name="depth"> The number of unique values to keep in the channel </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> If the name is invalid or the depth is less then 1 </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelPublishKeys.getName">
                   
                    <summary> Returns the name of the publish key
                    </summary>
                    <returns> String name </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelPublishKeys.getDepth">
                   
                    <summary> Returns the depth of the publish key
                    </summary>
                    <returns> int depth </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelPublishKeys.#ctor">
                   
                    <summary> Public constructor </summary>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nChannelWatcher">
             <summary>
             This interface extends the nEventListener interface and also provides the ability to receive callbacks
             for purged events as well as events published on a specific channel or queue.
            
             The purge callback is called when an event has been purged from the channel or queue.
             </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nEventListener">
               
                <summary> This interface should be implemented by any object that wishes to register
                itself as an asynchronous subscriber to a nirvana channel or queue
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nConsumeEvent"/>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
                <see cref="T:com.pcbsys.nirvana.client.nQueue"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventListener.go(com.pcbsys.nirvana.client.nConsumeEvent)">
                   
                    <summary> This method is asynchronously called by the nirvana client API to deliver
                    an event to a registered subscriber.
                    </summary>
                    <param name="evt"> The nConsumeEvent object specifying the event being delivered. </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelWatcher.purge(System.Int64,System.Int64,System.String)">
            <summary>
            This method is called when events are purged from the channel or queue
            </summary>
            <param name="startEID">startEID The starting range of the purge event</param>
            <param name="endEID">endEID The ending range of the purge event</param>
            <param name="filter">filter A filter if supplied</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nConflationAttributes">
            
             <summary> This class represents the conflation attributes that can be used when creating resources which allow conflation.
             
             </summary>
             
        </member>
        <member name="F:com.pcbsys.nirvana.client.nConflationAttributes.sDropEvents">
            <summary>
            Used in the constructor of nConflationAttributes to represent that action that should be taken during the conflation interval
            </summary>
        </member>
        <member name="F:com.pcbsys.nirvana.client.nConflationAttributes.sMergeEvents">
            <summary>
            Used in the constructor of nConflationAttributes to represent that action that should be taken during the conflation interval
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConflationAttributes.#ctor(System.Int64)">
             
              <summary> Creates a conflation attributes object defaulting the action to merging of events within the conflation interval
              </summary>
              <param name="interval"> time in milliseconds that events will be conflated </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConflationAttributes.#ctor(System.Int32,System.Int64)">
             
              <summary> Creates a conflation attribute specifying the action as either drop or merge within the time interval specified
              </summary>
              <param name="action"> Set the action to either drop or merge events </param>
              <param name="interval"> time in milliseconds that events will be conflated </param>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConflationAttributes.getAction">
             
              <summary> This can be either Drop or Merge
              </summary>
              <returns> the configured action </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConflationAttributes.getInterval">
             
              <summary> The time that the configured resource will conflate events
              </summary>
              <returns> time in milliseconds </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConflationAttributes.setAction(System.Int32)">
             
              <summary> Sets the action for this conflation attribute
              </summary>
              <param name="action"> to use to set </param>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventConverter.nConsumeEventToPublishRequest(com.pcbsys.nirvana.client.nConsumeEvent,System.Int64,System.Boolean)">
            @param p_event The nConsumeEvent to be converted to a nPublished
            @param p_signer The signature assocoiated with this event
            @param p_chanUniqueID The unique channel ID associated with the pub request
            @return the newly created nPublished object
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventConverter.nPublishedTonConsumeEvent(com.pcbsys.nirvana.nbase.events.nPublished)">
            @param p_event The nPublished event to be converted to nConsumeEvent
            @return the newly created nConsumeEvent object
        </member>
        <member name="T:com.pcbsys.nirvana.client.nConsumeEventFragmentReader">
               
                <summary> Provides an nEventListener implementation that can be used as an interceptor to server callbacks 
                so that event fragments can be combined and only reconstructed events are passed to the user callback method.
                </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventFragmentReader.#ctor(com.pcbsys.nirvana.client.nEventListener)">
             Contructs an nEventListener to be passed to a channel or queue to receive events.
            
             @param listener the event listener that will consume the fragmented events
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventFragmentReader.go(com.pcbsys.nirvana.client.nConsumeEvent)">
             This method is called by the client for each event that the server sends.
            
             It will check the events for fragemented events and will then reconstruct the original event which was
             fragemented by nConsumeEventFragementWriter.
            
             @param evt the fragemented event(s)
        </member>
        <member name="T:com.pcbsys.nirvana.client.nConsumeEventFragmentWriter">
               
                <summary> Provides a channel / queue wrapper as well as an nEventPublisher implementation that automatically fragments 
                published events larger than a specified byte size into smaller event fragments. 
                </summary>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nConsumeEventFragmentWriter.#ctor(com.pcbsys.nirvana.client.nAbstractChannel,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nConsumeEventFragmentWriter.#ctor(com.pcbsys.nirvana.client.nEventPublisher,System.Int32)" -->
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventFragmentWriter.publish(com.pcbsys.nirvana.client.nConsumeEvent)">
             Publishes an nConsumeEvent to the nEventPublisher or nAbstractChannel after it maybe fragemented.
            
            
             @param evt the event to fragment
             @throws nTransactionException
             @throws nSessionPausedException
             @throws nSessionNotConnectedException
             @throws nSecurityException
             @throws nRequestTimedOutException
             @throws nUnexpectedResponseException
             @throws nChannelNotFoundException
             @throws nIllegalArgumentException
        </member>
        <member name="T:com.pcbsys.nirvana.client.nConsumeEventToken">
            <summary>
            Class representing the nConsumeEvent identifier.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nConsumeEventToken.Builder">
            <summary>
             Builder for constructing the nConsumeEventToken identifier with all of the set properties.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nCreateResult">
            
             <summary>This class represents the results of the nSession.create(nChannelAttributes[]) call.
            
             This call returns an array of nCreateResult objects, each one represents the result of the call. The result will either be
             an nChannel, nQueue or an Exception object
             </summary>
             
        </member>
        <member name="T:com.pcbsys.nirvana.client.nResult">
            
             <summary>This class is the base class that represents the results of a batched find, create or delete call for channels or queues.
             </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nResult.wasSuccessful">
             
              <summary>Determine whether the operation was successful for the specific object
              </summary>
              <returns> true if successful </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nResult.getException">
             
              <summary>If !wasSuccessful(), this will return an Exception
              </summary>
              <returns> exception if the operation was not successful </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nResult.isQueue">
             
              <summary>Was the result of the operation successfully performed on an nQueue
              </summary>
              <returns> true if the operation was performed on an nQueue </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nResult.isChannel">
             
              <summary>Was the result of the operation successfully performed on an nChannel
              </summary>
              <returns> true if the operation was performed on an nQueue </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nResult.getChannel">
             
              <summary>If isChannel(), or !isQueue() this method will return the nChannel object found
              </summary>
              <returns>the nChannel object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nResult.getQueue">
             
              <summary>If isQueue(), or !isChannel() this method will return the nQueue object
              </summary>
              <returns>the nQueue object</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nResult.getAttributes">
             
              <summary>Get the nChannelAttributes that was used in the operation
              </summary>
              <returns> the nChannelAttributes object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nCreateResult.wasSuccessful">
             
              <summary>Determine whether the create was successful for the specific nChannelAttributes object
              </summary>
              <returns> true if successful </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nCreateResult.getException">
             
              <summary>If !wasSuccessful(), this will return an Exception
              </summary>
              <returns> exception if the create was not successful </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nCreateResult.isQueue">
             
              <summary>Was the result of the create an nQueue
              </summary>
              <returns> true if an nQueue was created </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nCreateResult.isChannel">
             
              <summary>Was the result of the create an nChannel
              </summary>
              <returns> true if an nChannel was created </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nCreateResult.getChannel">
             
              <summary>If isChannel(), or !isQueue() this method will return the nChannel object created
              </summary>
              <returns> the nChannel object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nCreateResult.getQueue">
             
              <summary>If isQueue(), or !isChannel() this method will return the nQueue object created
              </summary>
              <returns> the nQueue object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nCreateResult.getAttributes">
             
              <summary>Get the nChannelAttributes that was used in the create call
              </summary>
              <returns> the nChannelAttributes object </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDataGroup">
             
              <summary>This class represents a individual data group object.
              
               @since 6.0 </summary>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDataStream">
            <summary>
            Represents the stream used to deliver data
            </summary>
        </member>
        <member name="P:com.pcbsys.nirvana.client.nDataStream.Name">
            <summary>
            The stream name
            </summary>
        </member>
        <member name="P:com.pcbsys.nirvana.client.nDataStream.Subject">
            <summary>
            The stream subject
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.add(com.pcbsys.nirvana.client.nDataStream)">
              
                <summary> Add a new stream to this data group
                </summary>
                <param name="stream"> - the stream to add </param>
                <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.addSnoop(com.pcbsys.nirvana.client.nDataStream)">
              
                <summary> Add a new snoop stream to this data group. This stream will be hidden from the group, with no callbacks fired for it</summary>
                <param name="stream"> - the stream to add </param>
                <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.isNested">
            
             <summary>Flag indicating whether this group is nested within one of more other groups</summary>
             <returns> true if nested else false</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.isReadOnly">
            
             <summary>Flag to indicate whether this group is read only. If it is, it will be the default Data Group object</summary>
             <returns> true is default Data Group</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.isClosed">
            
             <summary>Returns true if this group has been deleted</summary>
             <returns> true if deleted </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getConflationAttributes">
            <summary>
            Get the conflation attributes for this data group if they exist
            </summary>
            <returns>the conflation attributes if they exist</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.isMulticastEnabled">
            
             <summary>Flag to indicate whether this Data Group is multicast enabled</summary>
             <returns>true if enabled, false otherwise</returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getPriority">
            
             <summary>Returns the level of priority associated with this data group</summary>
             <returns>a value between 0 and 9 indicating priority</returns>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.add(System.Collections.Generic.IEnumerable{com.pcbsys.nirvana.client.nDataStream})">
            <summary>
               Adds the specified streams to this group
            </summary>
            <param name="streams"> an IEnumerable of nDataStreams to be added to this group</param>
             <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> </exception>
             <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.add(com.pcbsys.nirvana.client.nDataGroup)">
             
              <summary> Adds an existing data group to this data group, allowing groups to be cascaded
              
               </summary>
               <param name="group"> - group to be added </param>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.remove(com.pcbsys.nirvana.client.nDataStream)">
             
              <summary> Remove the stream from this data group
               </summary>
               <param name="stream"> the stream to be removed </param>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.removeSnoop(com.pcbsys.nirvana.client.nDataStream)">
             
              <summary> Remove the snoop stream from this data group
               </summary>
               <param name="stream"> the stream to be removed </param>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.remove(com.pcbsys.nirvana.client.nDataGroup)">
             
              <summary> Remove the specified data group from this one
               </summary>
               <param name="group"> </param>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.size">
            <summary>
            Get the current count of streams contained in this nDataGroup
            </summary>
            <returns>the number of streams in this group</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.addPublisher(System.String)">
              
               <summary> Allow the specified subject to be allowed to publish to this group
                </summary>
                <param name="subject">the subject to give permissions to</param>
                <exception cref="T:com.pcbsys.nirvana.client.nDataGroupIsReadOnlyException"> </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
                <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.removePublisher(System.String)">
             
              <summary> Remove the specified subject from the list of authorised publishers for this group
               </summary>
               <param name="subject">the subject to remove permissions from</param>
               <exception cref="T:com.pcbsys.nirvana.client.nDataGroupIsReadOnlyException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.createRegisteredEvent">
            <summary>Registers a new nRegisteredEvent with the data stream allowing just the updates to be sent through to the clients
            </summary> 
            <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.addListener(com.pcbsys.nirvana.client.nDataGroupListener)">
              
               <summary> Add a new listener to this group so that when Streams or Groups are added or deleted the listener is notified
                </summary>
                <param name="listener"> the listener to receive callbacks on this data group </param>
                <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getListener">
              <summary>returns the current listener for the datagroup</summary>
              <returns>this data group's listener</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getGroup(System.String)">
             
              <summary>Returns the DataGroup specified, if it is contained within this group.
               </summary>
               <param name="groupName"> the group to find </param>
               <returns> the nDataGroup matching the groupName </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getGroupCount">
            
                 <summary>Returns the number of DataGroups (if any) contained within this group.
                 </summary>
                <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getGroups">
             
               <summary>Obtain a list of the nDataGroup objects contained within this group</summary>
               <returns> an IEnumerable of known groups </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getStream(System.String)">
            <summary>
            Get the nDataStream object corresponding to the name
            </summary>
            <param name="streamId">name of the stream</param>
            <returns>the nDataStream object matching the name</returns>
            <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getSnoopStream(System.String)">
            <summary>
            Get the nDataStream snoop object corresponding to the name
            </summary>
            <param name="streamId">name of the stream</param>
            <returns>the nDataStream object matching the name</returns>
            <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.contains(com.pcbsys.nirvana.client.nDataStream)">
                <summary>Checks if the stream exists in this group</summary>
                <param name="stream"> the stream or group to test for </param>
                <returns> true if this group contains the id of the specified stream. </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.containsSnoop(com.pcbsys.nirvana.client.nDataStream)">
                <summary>Checks if the snoop stream exists in this group</summary>
                <param name="stream"> the stream or group to test for </param>
                <returns> true if this group contains the id of the specified stream. </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.contains(System.String)">
               <summary>Checks if the stream id exists in this group</summary> 
               <param name="streamId"> name of the stream or group to test for </param>
               <returns> true if this group contains the specified stream id </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.containsSnoop(System.String)">
               <summary>Checks if the snoop stream id exists in this group</summary> 
               <param name="streamId"> name of the stream or group to test for </param>
               <returns> true if this group contains the specified stream id </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.contains(com.pcbsys.nirvana.client.nDataGroup)">
               <summary>Checks if the group exists within this group</summary>
               <param name="group"> to test to see if is contained within this data group </param>
               <returns> true if this data group contains this group </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getStreams">
              
                <summary>Obtain the list of nDataStream objects contained within this group</summary>
                <returns> an IEnumerable of known streams </returns>
                <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getPublishers">
             
               <summary>Obtain a list of publisher ids</summary>
               <returns> an IEnumerable of currently allowed publishers </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getID">
            <summary>
            Return the id of this nDataGroup object
            </summary>
            <returns>the unique long value representing this nDataGroup</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getGroupsContaining">
            
             <summary>Locate the groups that currently contain this group</summary>
             <returns> an array of nDataGroup objects containing the group</returns>
                <exception cref="T:com.pcbsys.nirvana.client.nDataGroupDeletedException"> </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.getSession">
            <summary>
            Returns the session associated with this data group instance
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroup.setReadOnly">
            <summary>
            Mark the nDataGroup as read only
            </summary>
        </member>
        <member name="P:com.pcbsys.nirvana.client.nDataGroup.Name">
             
               <returns> the name of this Data Group </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDataGroupDeletedException">
            <summary>
            Class representing an exception generated when an operation is performed on an nDataGroup that has been deleted
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nBaseClientException">
              
               <summary> This exception forms the base for all client exceptions </summary>
               
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupDeletedException.#ctor(System.String)">
            <summary>
            The exception message
            </summary>
            <param name="message">details of the exception</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDataGroupIsReadOnlyException">
            <summary>
            Class representing an exception generated when an operation is performed on an nDataGroup that is read only
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupIsReadOnlyException.#ctor(System.String)">
            <summary>
            The exception message
            </summary>
            <param name="message">details of the exception</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDataGroupListener">
             
              <summary> Listener interface used to manage changes to membership of data groups
              
               @since 6.0 </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupListener.addedStream(com.pcbsys.nirvana.client.nDataGroup,com.pcbsys.nirvana.client.nDataStream,System.Int32)">
             
              <summary> Called when a new stream has been added to a data group
               </summary>
               <param name="group">the nDataGroup that the stream has been added to</param>
               <param name="stream">the nDataStream that has been added</param>
               <param name="count">the current count of members</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupListener.deletedStream(com.pcbsys.nirvana.client.nDataGroup,com.pcbsys.nirvana.client.nDataStream,System.Int32,System.Boolean)">
             
              <summary> Called when a stream has been deleted from the data group
               </summary>
               <param name="group">the nDataGroup that the stream has been removed from</param>
               <param name="stream">the nDataStream that has been added</param>
               <param name="count">the current count of members</param>
               <param name="serverRemoved">whether the stream was removed from the group by the server</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupListener.createdGroup(com.pcbsys.nirvana.client.nDataGroup)">
            
             <summary>Called when a group has been added</summary>
            
             <param name="group">the nDataGroup that has been added</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupListener.deletedGroup(com.pcbsys.nirvana.client.nDataGroup)">
            
             <summary>Called when a group has been deleted</summary>
            
             <param name="group">the nDataGroup that has been deleted</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupListener.addedGroup(com.pcbsys.nirvana.client.nDataGroup,com.pcbsys.nirvana.client.nDataGroup,System.Int32)">
             
              <summary> Called when a group has been added to the data group
               </summary>
               <param name="to">the nDataGroup that the group has been added to</param>
               <param name="group">the nDataGroup that has been added</param>
               <param name="count">the current count of member streams of the 'to' group</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupListener.removedGroup(com.pcbsys.nirvana.client.nDataGroup,com.pcbsys.nirvana.client.nDataGroup,System.Int32)">
             
              <summary> Called when a group has been removed from the data group
               </summary>
               <param name="from">the nDataGroup that the group has been removed from</param>
               <param name="group">the nDataGroup that has been removed</param>
               <param name="count">the current count of member streams of the 'from' group</param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDataStreamListener">
             
              <summary> Interface used to asynchronously receive events written to the data stream or a data group that the stream is a member of.
              @since 6.0 </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataStreamListener.onMessage(com.pcbsys.nirvana.client.nConsumeEvent)">
             
              <summary> Called when an event has been written to the data stream or a data group that the stream is a member of </summary>
              <param name="evt"> </param>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDeleteResult">
            
             <summary>This class represents the results of the nSession.delete(nChannelAttributes[]) call.
             
             This call returns an array of nDeleteResult objects, each one represents the result of the call. The result will either be
             show as wasSuccessful() or contain an Exception object
             </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDeleteResult.wasSuccessful">
             
              <summary>Determine whether the delete was successful for the specific nChannelAttributes object
              </summary>
              <returns> true if successful </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDeleteResult.getException">
             
              <summary>If !wasSuccessful(), this will return an Exception
              </summary>
              <returns> exception if the delete was not successful </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDeleteResult.isQueue">
             
              <summary>Was the result of the delete an nQueue
              </summary>
              <returns> true if an nQueue was deleted </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDeleteResult.isChannel">
             
              <summary>Was the result of the delete an nChannel
              </summary>
              <returns> true if an nChannel was deleted </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDeleteResult.getChannel">
             
              <summary>This method will return null
              </summary>
              <returns> null </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDeleteResult.getQueue">
             
              <summary>This method will return null
              </summary>
              <returns> null </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDeleteResult.getAttributes">
             
              <summary>Get the nChannelAttributes that was used in the create call
              </summary>
              <returns> the nChannelAttributes object </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDurableAttributes">
            <summary>
            Container which holds the attributes required for describing a durable object on a channel.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.create(com.pcbsys.nirvana.client.nDurableAttributes.nDurableType,System.String)">
            <summary>
            Creates a durable attributes instance with the specified durable type and name.
            </summary>
            <param name="type">Requested durbale type</param>
            <param name="name">The name of the durable object</param>
            <returns>The created durable attributes instance</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.getSelector">
            <summary>
            Selector that is going to be used on the durable object to filter events.
            </summary>
            <returns>selector used as an event filter</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.setSelector(System.String)">
            <summary>
            Setting the selector that is going to be used on the durable object to filter events.
            </summary>
            <param name="selector">String that will be used as an event filter.</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">Thrown in case a selector is attempted to be added on non-shared durable type</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.getStartEid">
            <summary>
            Starting event ID of the durable that will be created from the attributes.
            </summary>
            <returns>Id of the starting event</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.setStartEid(System.Int64)">
            <summary>
            Sets the starting event ID of the durable that will be created from the attributes. 
            </summary>
            <param name="startEid">Starting event Id to be set</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.isPersistent">
            <summary>
            Indicates if the durable object will be persisted on the server.
            </summary>
            <returns>If the durable object will be ssved on the disc</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.setPersistent(System.Boolean)">
            <summary>
            Sets if the durable object should be persisted on the server. For shared type this flag is
            always set to true by design.
            </summary>
            <param name="persistent">Is the durable object should be stored on the server's disc.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.isClustered">
            <summary>
            Indicates if the durable object is created as a cluster wide object.
            </summary>
            <returns>Flag indicating whether the durable object is cluster wide</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.setClustered(System.Boolean)">
            <summary>
            Sets if the durable object can be used in a cluster.
            </summary>
            <param name="clustered">Flag indicating whether the durable object is cluster wide</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.getName">
            <summary>
            Returns the name of the durable object.
            </summary>
            <returns>Name of the durable object</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableAttributes.getType">
            <summary>
            Returns the type of the durable.
            </summary>
            <returns>Durable type</returns>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDurableAttributes.nDurableType">
            <summary>
            Enumeration defining all durable types.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDurableManager">
            <summary>
            Class responsible for managing durable subscriptions on a channel. Durable objects can be added, deleted
            and retrieved using the durable manager.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableManager.add(com.pcbsys.nirvana.client.nDurableAttributes)">
            <summary>
            Creates a durable object on the channel assosiated with the durable manager instance with the given durable attributes.
            Creating durables with backing queue is no longer supported from this version.
            </summary>
            <param name="durableAttributes">Attributes describing the durable object to be created.</param>
            <returns>The durable instace which was created with the given attributes.</returns>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">Thrown if the client attempts to create shared durable object with queue support.</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">Thrown when illegal argumets are given - null attributes or unsupported channel types.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableManager.unbind(com.pcbsys.nirvana.client.nDurable)">
            <summary>
            Unbinds the durable object from the current connection.
            </summary>
            <param name="durable">Durable object requested to be unbound</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">Thrown if the client requests unbinding for not supported durable type.</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">Thrown when illegal argumets are given.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableManager.delete(com.pcbsys.nirvana.client.nDurable)">
            <summary>
            Deletes the durable object from the channel assosiated with this durable manager instance. Operation is not
            supported for shared durables with backed queue.
            </summary>
            <param name="durable">Durable object to be deleted.</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">Thrown if the client requests to delete not supported durable type.</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">Thrown when illegal argumets are given.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableManager.delete(System.String)">
            <summary>
            Deletes the durable object from the channel assosiated with this durable manager instance. Operation is not
            supported for shared durables with backed queue.
            </summary>
            <param name="name">Name of the Durable object to be deleted.</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">Thrown if the client requests to delete not supported durable type.</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">Thrown when illegal argumets are given.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableManager.getAll">
            <summary>
            Returns all durable objects existing on the channel assosiated with this durable manager instance.
            </summary>
            <returns>Arrays of durable objects from supported tpes only</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDurableManager.get(System.String)">
            <summary>
            Returns durable object instance for the requested name. Retrieving shared durable objects with hidden queue
            is no longer supported from this version on.
            </summary>
            <param name="name">Name of the durable object to be retrieved</param>
            <returns>The durable instace retrieved for the given name</returns>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">Thrown if the client requests to get not supported durable type.</exception>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">Thrown when illegal argumets are given.</exception>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nEventPropertyChangeListener">
            <summary>
            Listener interface enabling callbacks to be received when dictionary keys from events . Either added or removed
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventPropertyChangeListener.added(System.String,System.Object,System.Object)">
            <summary>
            Notification that the specific event has had the value changed
            </summary>
            <param name="key">The key where the value has changed</param>
            <param name="val">The updated value</param>
            <param name="original">The original value (if any)</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventPropertyChangeListener.deleted(System.String)">
            <summary>
            Notification that the specific key has been removed from the event update
            </summary>
            <param name="key">The key which has been removed</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nEventPublisher">
               
                <summary> This interface defines the functionality that should be offered by a generic Nirvana event publisher. Classes implementing
                this interface can be designated as publishing implementations. (e.g. by the nConsumeEventFragmentWriter)
                </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventPublisher.publish(com.pcbsys.nirvana.client.nConsumeEvent)">
            The publish method should be implemented to define the specific behavior for writing to a channel or queue
            @param evt The event to publish
            @throws nTransactionException thrown if any transactional errors occur
            @throws nSessionPausedException The session is currently paused
            @throws nSessionNotConnectedException The session has become disconnected from the server
            @throws nSecurityException Insufficient privileges for the operation
            @throws nRequestTimedOutException The server failed to respond within the specified timeout
            @throws nUnexpectedResponseException The response from the server was not expected
            @throws nChannelNotFoundException The channel / queue was not founf on the server
            @throws nIllegalArgumentException The method arguments was invalid, incorrect or possibly null
        </member>
        <member name="T:com.pcbsys.nirvana.client.nExclusiveDurable">
            <summary>
            The Exclusive Durable Implementation. Exclusive Durable is used for a single consumer as a mean
            of providing a server side managed position within a channel.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nFindResult">
            
             <summary>This class represents the results of the nSession.find(nChannelAttributes[]) call.
             
             This call returns an array of nFindResult objects, each one represents the result of the call. The result will either be
             an nChannel, nQueue or an Exception object</summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nFindResult.wasSuccessful">
             
              <summary>Determine whether the find was successful for the specific nChannelAttributes object
              </summary>
              <returns> true if successful </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nFindResult.getException">
             
              <summary>If !wasSuccessful(), this will return an Exception
              </summary>
              <returns> exception if the find was not successful </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nFindResult.isQueue">
             
              <summary>Was the result of the find an nQueue
              </summary>
              <returns> true if an nQueue was found </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nFindResult.isChannel">
             
              <summary>Was the result of the find an nChannel
              </summary>
              <returns> true if an nChannel was found </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nFindResult.getChannel">
             
              <summary>If isChannel(), or !isQueue() this method will return the nChannel object found
              </summary>
              <returns> the nChannel object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nFindResult.getQueue">
             
              <summary>If isQueue(), or !isChannel() this method will return the nQueue object found
              </summary>
              <returns> the nQueue object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nFindResult.getAttributes">
             
              <summary>Get the nChannelAttributes that was used in the find call
              </summary>
              <returns> the nChannelAttributes object </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nLogListener">
            <summary>
            Classes that implement this interface can register with the nRealmNode.addLogListener() to receive
            the realms log events. Depending on the fLogger setting in the configuration for the realm this could
            result in a large amount of data being delivered.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nLogListener.Message(System.String)">
            <summary>
            This method is called by the nRealmNode to inform the user object of a new log event. The event
            contains the date/time, the severity and the text of the event
            </summary>
            <param name="msg">date/time:severity:text message</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nProtobufEvent">
            <summary>
            This class represents a Google Protocol Buffer Event. A Google Protocol Buffer Event 
            consists of the serialized Message and a string to identify what type of message is contained.
            The MessageType attribute in the event header is set to 6 to identify the message as a
            Protocol buffer event.
            Optionally a Google Protocol Buffer Event may also contain a tag.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nConsumeEvent">
               
                <summary>This class represents a Nirvana event, which consists of either a tag and some
                data or an event dictionary and some data. </summary>
                
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.nConsumeEvent.sMatrixTag">
             Here so that we check if a tag exists in the dictionary, courtesy of
             nReceiver in matrix.
            
             Should really have a standard place to set dictionary keys.!
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.#ctor(System.Byte[],System.Byte[])">
             Constructs a new nConsumeEvent with the specified event tag and data
            
             @param tag the event tag byte[] encoded
             @param data the event data byte[] encoded
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.#ctor(System.String,System.Byte[])">
             Constructs a new nConsumeEvent with the specified event tag and data.
            
             The event will be flagged as an XML DOM document if the dom flag is true.
            
             @param tag the event tag as a string
             @param data the event data byte[] encoded
             @param dom a flag specifying whether the event should be marked as an XML
                        DOM document
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.#ctor(com.pcbsys.nirvana.client.nEventProperties,System.Byte[])">
             Constructs a new nConsumeEvent with the specified event properties and
             data.
            
             The event properties can be used to create filter rules.
            
             @param properties the collection of key-value pairs that can be used for
                               filter rules
             @param data the event data byte[] encoded
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.#ctor(System.String,com.pcbsys.nirvana.client.nEventProperties,System.Byte[])">
             Constructs a new nConsumeEvent with the specified event properties and
             data.
            
             The event properties can be used to create filter rules.
            
             @param properties the collection of key-value pairs that can be used for
                               filter rules
             @param data the event data byte[] encoded
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.#ctor(System.Byte[],com.pcbsys.nirvana.client.nEventProperties,System.Byte[])">
             Constructs a new nConsumeEvent with the specified event properties and
             data.
            
             The event properties can be used to create filter rules.
            
             @param properties the collection of key-value pairs that can be used for
                               filter rules
             @param data the event data byte[] encoded
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.#ctor(com.pcbsys.nirvana.client.nEventProperties,System.String)">
             Constructs a new nConsumeEvent with the specified event tag and XML data.
            
             The event will be flagged as an XML DOM document.
            
             @param properties
             @param adom the event data as an XML DOM document
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.getProperties">
             Gets this event's properties
            
             @return the collection of key-value pairs used to create filter rules
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.setProperties(com.pcbsys.nirvana.client.nEventProperties)">
             Gets this event's properties
            
             @return the collection of key-value pairs used to create filter rules
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.getEventID">
             Gets the unique (for its channel) event id value
            
             @return a long specifying the unique (for its channel) event id attribute
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.getEventTag">
             Gets the event tag set for this event
            
             @return a string specifying the event tag set for this event
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.getEventData">
             Gets the event data set for this event
            
             @return a byte[] containing the encoded event data in the form it travels
                     on the network
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.getTTL">
             Returns how long the event will be stored on disk in a mixed channel
            
             @return Long millisecond time to keep on the server
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.setTTL(System.Int64)">
             Sets the TTL for this event. On a mixe channel this time is how long the event is kept
            
             @param ttl Time in milliseconds
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.isPersistant">
             Returns the perisitant flag. If true the event is stored to disk on the server
            
             @return bool flag
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.setPersistant(System.Boolean)">
             Sets the persistant flag. On mixed channels, if set, will cause this event to be stored to disk
            
             @param flag bool flag
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.ack">
             Sends an ack for this event to the server
            
             @exception Exception If unable to send the rollback request to the server
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.rollback">
             Tells the server that it does not ack this event.
            
             @exception Exception If unable to send the rollback request to the server
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.getSignature">
             Returns the digital signature of the event if it was signed by the publisher else it returns
             null.
            
             @return Variable length byte[] of the signature
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConsumeEvent.setEventID(System.Int64)">
             Sets the event id value of this event.
            
             An internal method not to be used by individuals writing Nirvana
             applications.
            
             @param newID a long specifying the new event ID of the event
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.#ctor(System.Byte[],System.Byte[])">
                   
                    <summary>Constructs a new nConsumeEvent with the specified event tag and data
                   </summary>
                   <param name="tag"> the event tag byte[] encoded </param>
                   <param name="data"> the event data byte[] encoded </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.#ctor(System.String,System.Byte[])">
                   
                    <summary>Constructs a new nConsumeEvent with the specified event tag and data
                   </summary>
                   <param name="tag"> the event tag as a string </param>
                   <param name="data"> the event data byte[] encoded </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.#ctor(com.pcbsys.nirvana.client.nEventProperties,System.Byte[])">
                   
                    <summary>Constructs a new nConsumeEvent with the specified event properties and data.
                    The event properties can be used to create filter rules.
                   </summary>
                   <param name="properties"> the collection of key-value pairs that can be used for filter rules </param>
                   <param name="data"> the event data byte[] encoded </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.#ctor(System.String,com.pcbsys.nirvana.client.nEventProperties,System.Byte[])">
                   
                    <summary>Constructs a new nConsumeEvent with the specified event properties and data.
                    The event properties can be used to create filter rules.
                   </summary>
                   <param name="tag">tag the event tag byte[] encoded</param>
                   <param name="properties"> the collection of key-value pairs that can be used for filter rules </param>
                   <param name="data"> the event data byte[] encoded </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.#ctor(com.pcbsys.nirvana.client.nEventProperties,System.String)">
                   
                    <summary>Constructs a new nConsumeEvent with the specified event properties and tag.
                    The event properties can be used to create filter rules.
                   </summary>
                   <param name="properties"> the collection of key-value pairs that can be used for filter rules </param>
                   <param name="tag"> the event tag </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.#ctor(System.Byte[],com.pcbsys.nirvana.client.nEventProperties,System.Byte[])">
                   
                    <summary>Constructs a new nConsumeEvent with the specified event tag, properties and data.
                    The event properties can be used to create filter rules.
                   </summary>
                   <param name="tag"> the event tag </param>
                   <param name="properties"> the collection of key-value pairs that can be used for filter rules </param>
                   <param name="data"> the event data byte[] encoded </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getProperties">
                   
                    <summary>Gets this event's properties
                   </summary>
                   <returns> the collection of key-value pairs used to create filter rules </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setProperties(com.pcbsys.nirvana.client.nEventProperties)">
                   
                    <summary>Gets this event's properties
                   </summary>
                   <returns> the collection of key-value pairs used to create filter rules </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getEventID">
                   
                    <summary>Gets the unique (for its channel) event id value
                   </summary>
                   <returns> a long specifying the unique (for its channel) event id attribute </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getEventIdentifier">
            <summary>
            Get the identifier corresponding to the event.
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getEventTag">
                   
                    <summary>Gets the event tag set for this event
                   </summary>
                   <returns> a string specifying the event tag set for this event </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getEventData">
                   
                    <summary>Gets the event data set for this event
                   </summary>
                   <returns> a byte[] containing the encoded event data in the form it travels
                            on the network </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getTTL">
                   
                    <summary>Returns how long the event will be stored on disk in a mixed channel
                   </summary>
                   <returns> Long millisecond time to keep on the server </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setTTL(System.Int64)">
                   
                    <summary>Sets the TTL for this event. On a mixed channel this time is how long the event is kept
                   </summary>
                   <param name="ttl"> Time in milliseconds </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.isPersistant">
                   
                    <summary>Returns the persistent flag. If true the event is stored to disk on the server
                   </summary>
                   <returns> bool flag </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setPersistant(System.Boolean)">
                   
                    <summary>Sets the persistent flag. On mixed channels, if set, will cause this event to be stored to disk
                   </summary>
                   <param name="flag"> bool flag </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.isTransient">
                   
                    <summary>Returns whether the event is transient. If the event itself is transient, it will never be stored
                    either in memory or on disk by the realm server, but simply discarded once it has been delivered
                    to any consumers. This is the equivalent of publishing events on a Transient channel, however
                    allows the transience to be specified on a per event basis.
                   </summary>
                   <returns> whether the event is transient </returns>
                   <see cref="T:com.pcbsys.nirvana.client.nChannelAttributes"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setTransient(System.Boolean)">
                   
                    <summary>Sets whether the event is transient. If the event itself is transient, it will never be stored
                    either in memory or on disk by the realm server, but simply discarded once it has been delivered
                    to any consumers. This is the equivalent of publishing events on a Transient channel, however
                    allows the transience to be specified on a per event basis.
                    Note: Transient events are not supported for queues since 10.5. Setting this flag will not
                    have any effect for events published to a queue and the events will be stored even
                    if there are no active consumers.
                    
                    Transient events are not supported for Shared and Serial durables - these durables only work 
                    with events which are stored.
                   </summary>
                   <param name="flag"> whether the event is transient </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.ack">
                   
                    <summary>Sends an ack for this event to the server
                   </summary>
                   <exception cref="T:System.Exception"> If unable to send the rollback request to the server </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.rollback">
                   
                    <summary>Tells the server that it does not ack this event.
                   </summary>
                   <exception cref="T:System.Exception"> If unable to send the rollback request to the server </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getSignature">
                   
                    <summary>Returns the digital signature of the event if it was signed by the publisher else it returns
                    null.
                   </summary>
                   <returns> Variable length byte[] of the signature </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getChannelName">
                   
                    <summary>This function will return the name of the channel / queue that the event was delivered from.
                     </summary>
                   <returns> the name of the channel or queue </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getFullChannelName">
                   
                    <summary>This function will return the fully qualified name of the channel / queue that the event was delivered from.
                   </summary>
                   <returns> the fully qualified name of the channel or queue </returns>
                   <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> If the fully qualified name is not set</exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getDataGroupName">
            
             <summary> This function will return the data group name, if any, which this event was sent from. </summary>
             <returns> the name of the datagroup </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.isEndOfChannel">
                   
                    <summary>When you subscribe to a channel, and the channel's data contains a finite and reasonably static set of events,
                    the last event in the channel is sent and marked as the end of the channel.
                   </summary>
                   <returns> bool flag indicating if this is the last event in the channel</returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getTimestamp">
                   
                    <summary>Return the time stamp of this event. This value will be obtained from the nEventAttributes associated with this event. </summary>
                   <returns> the time stamp when the event was received by the server</returns>
                   <see cref="T:com.pcbsys.nirvana.client.nEventAttributes"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getPublishUser">
                   
                    <summary>Return the id of the user that published this event. This value will be obtained from the nEventAttributes associated with this event. </summary>
                   <returns> the user who published this event</returns>
                   <see cref="T:com.pcbsys.nirvana.client.nEventAttributes"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getPublishHost">
                   
                    <summary>Return the hostname from which the event was published. This value will be obtained from the nEventAttributes associated with this event. </summary>
                   <returns> the hostname from which the event was published</returns>
                   <see cref="T:com.pcbsys.nirvana.client.nEventAttributes"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setEventID(System.Int64)">
                   
                    <summary>Set the eventID for this event. This method is for internal Nirvana use only </summary>
                   <param name="p_id"> the eventID for this event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.hasAttributes">
                   
                    <summary>Method indicating whether there is an nEventAttributes associated with this event
                   </summary>
                   <returns> whether the nEventAttributes exists for this event</returns>
                   <see cref="T:com.pcbsys.nirvana.client.nEventAttributes"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.getAttributes">
                   
                    <summary>Method that returns the nEventAttributes for this event
                   </summary>
                   <returns> the nEventAttributes for this event</returns>
                   <see cref="T:com.pcbsys.nirvana.client.nEventAttributes"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setAttributes(com.pcbsys.nirvana.client.nEventAttributes)">
                   
                    <summary>Method that sets the nEventAttributes for this event
                   </summary>
                   <param name="attributes"> nEventAttributes for this event</param>
                   <see cref="T:com.pcbsys.nirvana.client.nEventAttributes"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setSubscriberName(System.Byte[])">
            <summary>
            Sets the session name that will be the only consumer of this event. By setting this, no other subscribers, either on a queue or channel will consume this event.
            </summary>
            <param name="subName">the subscriber name, equal to the session name of the designated user</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setSubscriberNames(System.String[])">
            <summary>
            Sets the session names that will be the only consumers of this event. By setting this, no other subscribers, either on a queue or channel will consume this event.
            </summary>
            <param name="subName">the subscriber names, equal to the session names of the designated users</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">This exception is thrown if the mySubName array is larger than 32767</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setSubscriberHost(System.Byte[])">
            <summary>
            Sets the host name or ip address representing the consumers of this event. By setting this, only connections matching the host name or ip address will consume this event. Wildcard * are also supported, so you can have *.abc.com fore example
            </summary>
            <param name="host">the host name or ip address of connections that will consume this event</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEvent.setQueueReader(com.pcbsys.nirvana.client.nQueueReader)">
            <summary>
            Sets the queue reader this event is received with. Must be used only if event is received from a queue store.
            The queue reader is required for acknowledgment and rollback operations, if not specified the server will need to determine which reader
            has received this event, which might have suboptimal performance.
            </summary>
            <param name="reader"></param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nProtobufEvent.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Constructs a new nProtobufEvent with the message type set to the
            type name of the message passed in.
            </summary>
            <param name="data">the constructed message.</param>
            <param name="descriptionName">the google protocol buffer Description type name</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nProtobufEvent.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Constructs a new nProtobufEvent with the message type set to the
            type name of the message passed in.
            </summary>
            <param name="tag">the event tag</param>
            <param name="data">the google protocol buffer Description type name</param>
            <param name="descriptionName"></param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nProtobufEvent.#ctor(System.Byte[],System.String)">
            <summary>
            Constructs a new nProtobufEvent with the message type set to the
            type name of the message passed in.
            </summary>
            <param name="data">the constructed message.</param>
            <param name="descriptionName">the google protocol buffer Description type name</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nProtobufEvent.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Constructs a new nProtobufEvent with the message type set to the
            type name of the message passed in.
            </summary>
            <param name="tag">the event tag</param>
            <param name="data">the google protocol buffer Description type name</param>
            <param name="descriptionName"></param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nProtobufEvent.getTypeName">
            <summary>
            Returns the type name of the message in the nProtobufEvent as a String
            </summary>
            <returns>the type name of the event's Message as a String</returns>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nProtobufEventFactory">
            <summary>
            This class is used to facilitate creation of nProtobufEvent objects
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nProtobufEventFactory.create(System.String,System.Byte[],System.Int64,System.Boolean)">
            <summary>
            Creates an nProtobufEvent object based on the parameters supplied
            </summary>
            <param name="type">The message type for this event as a String</param>
            <param name="data">The serialized message as a byte[]</param>
            <param name="TTL">TTL the Time To Live for this event</param>
            <param name="isPersistent">flag to show whether the event is persistent of not</param>
            <returns>the newly created nProtobufEvent object</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nProtobufEventFactory.create(System.String,System.Byte[],System.String,System.Int64,System.Boolean)">
            <summary>
            Creates an nProtobufEvent object based on the parameters supplied
            </summary>
            <param name="tag">The tag for this event as a String</param>
            <param name="type">The message type for this event as a String</param>
            <param name="data">The serialized message as a byte[]</param>
            <param name="TTL">TTL the Time To Live for this event</param>
            <param name="isPersistent">flag to show whether the event is persistent of not</param>
            <returns>the newly created nProtobufEvent object</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nProtobufEventFactory.create(System.Byte[],System.Byte[],System.Byte[],System.Int64,System.Boolean)">
            <summary>
            Creates an nProtobufEvent object based on the parameters supplied
            </summary>
            <param name="tag">The tag for this event as a String</param>
            <param name="type">The message type for this event as a String</param>
            <param name="data">The serialized message as a byte[]</param>
            <param name="TTL">TTL the Time To Live for this event</param>
            <param name="isPersistent">flag to show whether the event is persistent of not</param>
            <returns>the newly created nProtobufEvent object</returns>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nPublishedPausedException">
                <summary> This exception is thrown if a user attempts to publish events when the
                configuration property PauseServerPublishing is set to true. 
                </summary>    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSessionPausedException">
               
                <summary> This exception is thrown when an attempt is made by the client to make a request to the server, while the session is paused.
                the nSession object can be paused and resumed at any point by using the pause() and resume() methods of the nSession.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionPausedException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionPausedException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nMasterRedirectException">
                <summary> The exception thrown when a client connects to a slave node in a cluster and
                cluster mode is specified as 'Replication'.
                In this mode, only master node is allowed to service client requests.
                </summary>    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueSyncFragmentReader">
                
                 <summary> This class provides the client with an synchronous interface into a Nirvana Queue that understands and reconstructs event 
                 fragments. Events will only be delivered to this client when a call to <code>pop</code> is made if all the fragments have been received.
                 </summary>
            
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueReader">
            
             <summary> This class is the base class for all Queue Readers and provides a generic reader interface.
             </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.#ctor(com.pcbsys.nirvana.client.nQueue,com.pcbsys.nirvana.client.nQueueReaderContext)">
            <summary>
            Creates a reader for the specified queue using the given reader context.
            The reader will have its reader unique ID assigned implicitly.
            </summary>
            <param name="aQueue">The queue to create reader for. Must not be null.</param>
            <param name="aContext">The reader context to use</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.#ctor(com.pcbsys.nirvana.client.nQueue,com.pcbsys.nirvana.client.nQueueReaderContext,System.Int64)">
            <summary>
            Creates a reader for the specified queue using the given reader context and reader unique identifier.
            Note: This constructor must only be used for asynchronous readers, which require special reader ID assignment, for
            all other cases use the constructor which implicitly assigns the reader unique identifier.
            </summary>
            <param name="aQueue">The queue to create reader for.</param>
            <param name="aContext">The reader context to use.</param>
            <param name="readerUniqueId">The reader unique identifier to use for this reader.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.peek(com.pcbsys.nirvana.client.nQueuePeekContext)">
                   
              <summary> Performs a non destructive read
              </summary>
              <param name="context"> Peek Context to use.  Used when multiple calls required to
                              travers a queue </param>
              <returns> An Array of events </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If the client is not authorized to perform
                                             this request </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> The queue was not found </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                        connected to the server </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> The server did not respond within
                                                    the timeout </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> The server responded with an
                                                       unexcepted response </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Invalid paramters passed </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.createContext">
                   
              <summary> Creates a Queue Peek Context, which is used to traverse the queue.
              </summary>
              <returns> A new nQueuePeekContext </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.createContext(System.Int32)">
                   
              <summary> Creates a Queue Peek Context, which is used to traverse the queue.
              </summary>
              <param name="windowSize"> The size of the window over the queue to uses </param>
              <returns> A new nQueuePeekContext </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.createContext(System.Int32,System.String)">
                   
              <summary> Creates a Queue Peek Context, which is used to traverse the queue.
              </summary>
              <param name="windowSize"> The size of the window over the queue to uses </param>
              <param name="selector"> A message selector to be applied on the events received </param>
              <returns> A new nQueuePeekContext </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.close">
            <summary>
            This method is for internal use only
            <para>
            Abstract interface to be overridden by sub classes.
            Close the reader and the server subscription
            </para>
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.closeLocally">
            <summary>
            This method is for internal use only
            <para>
            Abstract interface to be overridden by sub classes.
            Close the subscription, but do not notify the server
            </para>
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.hasConsumedEvents">
                   
              <summary> Method to see whether the reader has consumed any events. For transactional readers, 
               this is reset every time commit or rollback is called.
                </summary>
              <returns> true if any events have been consumed by the reader </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.isClosed">
                   
              <summary> When a reader is closed, the physical subscription is closed at the server. 
               For Transactional readers, a close will rollback to the last committed event.
                </summary>
              <returns> true if the reader has been closed </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.isClosedLocally">
                   
              <summary> A reader can be closed, but the physical subscription queue is not closed at the server. 
               For Transactional readers, a local close will not rollback to the last committed event.
                </summary>
              <returns> true if the reader has been closed locally but not at the server </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.destroyReader">
                   
              <summary> This call will release any outstanding resources on the server and close the reader. Any future calls to this
              object will result in an nIllegalStateException being raised.
              </summary>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> if the server returns a response that was not expected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if the session is currently not connected to the server </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request did not receive a response within the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReader.destroyReaderLocally">
                   
              <summary> This call will close local reader resources but remain subscribed at the server Any future calls to this
              object will work unless destroyReader() is called
              </summary>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> if the server returns a response that was not expected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if the session is currently not connected to the server </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request did not receive a response within the timeout period </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncFragmentReader.#ctor(com.pcbsys.nirvana.client.nQueue,com.pcbsys.nirvana.client.nQueueReaderContext)">
                   
                    <summary> This method places the client on the queue and will block until an event
                    is placed onto the queue.
                    </summary>
                    <returns> The popped event </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncFragmentReader.pop">
            
                     <summary> This method places the client on the queue and will block until an event
                     is placed onto the queue.
                     </summary>
                     <returns> The popped event</returns>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                              connected to the server </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncFragmentReader.pop(System.Int64)">
                   
                    <summary> This method places the client on the queue and will block until an event
                    is placed onto the queue or the specified timeout expires. The only difference with nQueueSyncReader
                    is that it will only return an event after all fragments have been received.
                   
                    If the timeout expires it will return null
                    </summary>
                    <param name="timeout"> Time to wait in milliseconds for an event </param>
                    <returns> The popped event or null if the timeout expired </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                             connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncFragmentReader.pop(System.Int64,System.String)">
                   
                    <summary> This method places the client on the queue and will block until an event
                    is placed onto the queue or the specified timeout expires. The only difference with nQueueSyncReader
                    is that it will only return an event after all fragments have been received.
                   
                    If the timeout expires it will return null
                    </summary>
                    <param name="timeout"> Time to wait in milliseconds for an event </param>
                    <param name="selector"> the selection string used to filter events being popped </param>
                    <returns> The popped event or null if the timeout expired </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                             connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncFragmentReader.close">
            <summary>
            Close the reader and the server subscription
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncFragmentReader.closeLocally">
            <summary>
            Close the reader locally which will n ot result in any rollback of transactional readers 
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueSyncTransactionFragmentReader">
               
                <summary> This reader provides a synchronous queue reader model. Where the client can <code>pop()</code> events from the queue and then decide
                either to commit the event, i.e. successfully processed it or to rollback, i.e. unable to process this event. The only difference with nQueueSyncTransactionReader
                is that <code>pop()</code> calls will only return events once all fragments have been received.
                
                When the window size is reached and the client has yet to call commit or rollback the server will raise an exception
                on the <code>pop()</code> command until the client has called either method. </summary>
                
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueTransactionReader">
               
                <summary> Provides the basic interface for transactional queue operations, used by the synchronous and asynchronous transactional queue readers. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueTransactionReader.commit">
                   
                    <summary> Commits all received events so far.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> The server failed to respond with the specified timeout </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueTransactionReader.commit(System.Int64)">
                   
                    <summary> Commits all events up to the event id specified. This means you can partially commit received events.
                    </summary>
                    <param name="eventId"> Event ID to commit to, inclusive </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> The server failed to respond with the specified timeout </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueTransactionReader.rollback(System.Int64)">
                   
                    <summary> Rollbacks all events up to the specified event id that have not been committed or rollbacked previously. These events are then pushed back onto
                    the queue for redelivery.
                    </summary>
                    <param name="eventId"> Event Id to rollback to, inclusive </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> The server failed to respond with the specified timeout </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueTransactionReader.rollback">
                   
                    <summary> Rollbacks all received events that have not been committed or rollbacked previously. These events are then pushed back onto
                    the queue for redelivery.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> The server failed to respond with the specified timeout </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncTransactionFragmentReader.commit">
                   
                    <summary> Commits all received events so far.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncTransactionFragmentReader.commit(System.Int64)">
                   
                    <summary> Commits all events up to the event id specified. This means you can partially commit received events.
                    </summary>
                    <param name="eventId"> Event ID to commit to, inclusive </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncTransactionFragmentReader.rollback">
                   
                    <summary> Rolls back all received events that have not been committed or rolled back previously. These events are then pushed back onto
                    the queue for redelivery.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncTransactionFragmentReader.rollback(System.Int64)">
                   
                    <summary> Rolls back all events up to the specified event id that have not been committed or rolled back previously. These events are then pushed back onto
                    the queue for redelivery.
                    </summary>
                    <param name="eventId"> Event Id to rollback to, inclusive </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nRegisteredEvent">
            
                 <summary> This class enables a client to maintain a copy of an event, make changes to the properties and then when commit is called
                 only the changes are published to the server. This enables a mechanism whereby only changes are published and not full events </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.getPrimaryKeyName">
                   
                    <summary> Retrieves the name of the primary key name used for this event.
                    This key name is setup during channel construction using the publish key API
                    </summary>
                    <returns> String name of the key </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.getPrimaryKeyValue">
                   
                    <summary> Retrieves the unique value for the primary key used for this event
                    </summary>
                    <returns> Object value of the key </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.getTag">
                   
                    <summary> Returns the string tag of the event
                    </summary>
                    <returns> String tag for the event </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.setTag(System.String)">
                   
                    <summary> Sets the tag for the event.
                    </summary>
                     * <param name="tag"> String representation of the tag to use </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.getProperties">
                   
                    <summary> Retrieves the properties for the event. The client can then change the key/value pairs in the properties.
                    When the commitChanges() is called all changes will be sent to the server
                    </summary>
                    <returns> The events nEventProperties </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.getData">
                   
                    <summary> Returns the byte[] data payload of the event
                    </summary>
                    <returns> byte[] of user data </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.setData(System.Byte[])">
                   
                    <summary> Sets the byte[] data payload for the event
                    </summary>
                    <param name="data"> a byte[] to be sent </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.timeSinceLastChange">
                   
                    <summary> Returns the time in milliseconds since the last change was made to the event. If no change then the function
                    will return 0
                    </summary>
                    <returns> time in milliseconds since the last change </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.getChangeSize">
                   
                    <summary> Returns the number of changes made since the last commitChanges was called
                    </summary>
                    <returns> int number of changes since the last commitChanges </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.commitChanges">
                   
                    <summary> Writes all changes to the server and resets any internal counts, timers and copies.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionException"> thrown if any transactional errors occur </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The channel specified could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occured, since we received a response from the server out of sequence </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEvent.commitChanges(System.Boolean)">
                   
                    <summary> Writes all changes to the server and resets any internal counts, timers and copies
                    </summary>
                    <param name="Replace">, if true the server will replace the referenced event with a complete copy of this event and will
                    not merge any data from previous events.
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionException"> thrown if any transactional errors occur </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The channel specified could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occured, since we received a response from the server out of sequence </exception>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nRegisteredEventListener">
               
                <summary> This interface should be implemented by any object that wishes to register
                itself as an asynchronous subscriber and receive update events and complete merged events from a registered event
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nConsumeEvent"/>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRegisteredEventListener.update(com.pcbsys.nirvana.client.nConsumeEvent)">
               
                <summary> This method is asynchronously called by the nirvana client API to deliver
                an event to a registered subscriber.
                </summary>
                <param name="evt"> The nConsumeEvent object specifying the event being delivered. </param>
                
        </member>
        <member name="T:com.pcbsys.nirvana.client.nRegisteredEventUpdateListener">
               
                <summary> This interface should be implemented by any object that wishes to register
                itself as an asynchronous subscriber and only receive update events only from a registered event
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nConsumeEvent"/>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
               
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSerialDurable">
            <summary>
            The Serial Durable implementation. Multiple subscribers can hold a subscription to the same
            durable object. In this case the subscribers are queued and events are sent in a serial fashion.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nIndexedDurable">
            <summary>
            The Indexed Durable implementation. Multiple subscribers can hold a subscription to the same
            durable object. The concrete implementation of this this will determines how events are
            distributed among multiple subscriber. 
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIndexedDurable.remove(System.Int64)">
            <summary>
            This method will attempt to remove the event with the given event ID from the
            durable object.
            </summary>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
            <param name="eid">ID of the event to purge</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIndexedDurable.remove(System.Int64,System.Int64)">
            <summary>
            This method will attempt to remove the events within the specified range from the
            durable object.
            </summary>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
            <param name="start">ID of the event to start purging from</param>
            <param name="end">ID of the event to perge to</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIndexedDurable.remove(System.String)">
            <summary>
            This method will attempt to remove all events from the durable object which are matching the
            given filter.
            </summary>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
            <param name="filter">The filter to be applied during perging</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIndexedDurable.removeAll">
            <summary>
            If supported, the method will attempt to remove all events from the durable object. 
            
            </summary>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIndexedDurable.createViewer">
            <summary>
            Creates a nDurableViewer object for viewing the elements on a given durable object. Consuming events through this
            object using the nDurableViewer#next() method will not consume or acknowledge the events for the given durable.
            </summary>
            <returns>an nDurableViewer instance that can be used to view the events on a durable object in an iterative manner</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIndexedDurable.acknowledge(System.Collections.Generic.List{com.pcbsys.nirvana.client.nConsumeEventToken},System.Boolean)">
            <summary>
            Acknowledges multiple events in one server call. The method is currently supported for shared durables only.
            An exception is thrown in case acknowledgement for event ids not consumed from this durable is requested.
            </summary>
            <param name="eventTokens">List with identifiers of the events to be acknowledged</param>
            <param name="isSynchronous">if true, the thread will be held until the server has responded to the request</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIndexedDurable.acknowledge(com.pcbsys.nirvana.client.nConsumeEventToken,System.Boolean,System.Boolean)">
            <summary>
            Acknowledges multiple events in one server call. The method is currently supported for shared durables only.
            An exception is thrown in case acknowledgement for event ids not consumed from this durable is requested.
            </summary>
            <param name="eventToken">Identifier of the event to be acknowledged</param>
            <param name="isSynchronous">if true, the thread will be held until the server has responded to the request</param>
            <param name="includePreviousEventsOutstanding">if true, previous outstandig events are also acknowledged</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIndexedDurable.rollback(System.Collections.Generic.List{com.pcbsys.nirvana.client.nConsumeEventToken},System.Boolean)">
            <summary>
            Rollbacks multiple events in one server call. The method is currently supported for shared and serial durables only.
            </summary>
            <param name="eventTokens">List with identifiers of the events to be rollbacked</param>
            <param name="isSynchronous">if true, the thread will be held until the server has responded to the request</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIndexedDurable.rollback(com.pcbsys.nirvana.client.nConsumeEventToken,System.Boolean,System.Boolean)">
            <summary>
            Rollbacks the given eventToken. If previous outstanding are also included all unacknowledged events before the 
            given one will also be rollbacked. The method is currently supported for shared and serial durables only.
            </summary>
            <param name="eventToken">Identifier or the event to be rollbacked</param>
            <param name="isSynchronous">if true, the thread will be held until the server has responded to the request</param>
            <param name="includePreviousEventsOutstanding">if true, previous outstandig events are also acknowledged</param>
            <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException">The exception is thrown if the operation is not supported.</exception>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nServerExtensionCallback">
            <summary>
            This interface is for internal use only
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nServerExtensionCallback.handleEvent(System.Int64,System.Byte[],com.pcbsys.nirvana.client.nEventProperties)">
            <summary>
            This interface method is for internal use only
            </summary>
            <param name="id"></param>
            <param name="data"></param>
            <param name="props"></param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSharedDurable">
            <summary>
            The Shared Durable implementation. Multiple subscribers can hold a subscription to the same
            durable object. In this case the subscribers are queued and events are sent in a round-robin fashion.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSerialDurableAttributes">
            <summary>
            Container which holds the attributes required for describing a serial durable object on a channel.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSerialDurableAttributes.setPersistent(System.Boolean)">
            <summary>
            
            Set the persistent mode on the serial durable.
            
            </summary>
            <param name="persistent"></param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSharedDurableAttributes">
            <summary>
            Container which holds the attributes required for describing a shared durable object on a channel.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSharedDurableAttributes.setPersistent(System.Boolean)">
            <summary>
            
            Set the persistent mode on the serial durable.
            
            </summary>
            <param name="persistent"></param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nStoreProperties">
            <summary>
            Class that contains additional properties that can be set on the channel or queue
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getHonorCapacityWhenFull">
                   
                    <summary> Whether the channel / queue capacity setting will prevent publishing of any more data once full.
                    If true, the client will get an exception on further publishes </summary>
                    <returns> true or false </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setHonorCapacityWhenFull(System.Boolean)">
                   
                    <summary> Sets whether the channel / queue capacity setting will prevent publishing of events once full.
                    If true, the client will get an exception on further publishes </summary>
                    <param name="flag"> true and no more events after max events will be published </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.canSyncOnEachWrite">
                   
                    <summary> Whether each write to the store will also call sync on the file system to ensure all data is written to the Disk </summary>
                    <returns> true or false </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setSyncOnEachWrite(System.Boolean)">
                   
                    <summary> Sets whether each write to the store will also call sync on the file system to ensure all data is written to the Disk </summary>
                    <param name="flag"> true or false </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getSyncMaxBatchSize">
                   
                    <summary> Whether each write to the store will also call sync on the file system to ensure all data is written to the Disk </summary>
                    <returns> true or false </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setSyncMaxBatchSize(System.Int32)">
                   
                    <summary> Sets whether each write to the store will also call sync on the file system to ensure all data is written to the Disk </summary>
                    <param name="size"> value between 1 and 1000; </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getSyncBatchTime">
                   
                    <summary> Whether each write to the store will also call sync on the file system to ensure all data is written to the Disk </summary>
                    <returns> true or false </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setSyncBatchTime(System.Int32)">
                   
                    <summary> Sets whether each write to the store will also call sync on the file system to ensure all data is written to the Disk </summary>
                    <param name="time"> true or false </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getPerformAutomaticMaintenance">
                   
                    <summary> Whether the store will be have automatic maintenance as events are being removed </summary>
                    <returns> true or false </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setPerformAutomaticMaintenance(System.Boolean)">
                   
                    <summary> Sets whether the store will be have automatic maintenance as events are being removed </summary>
                    <param name="flag"> true or false </param>
                    
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nStoreProperties.getFanoutArchiveTarget" -->
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setFanoutArchiveTarget(System.String)">
              
               <summary> This allows the client to specify the name of an existing channel or queue which will be used to
               archive every single event that the server fans out to this channel's subscribers, stamped with fanout information.
               The functionality only applies to channels, will have no effect if used on a queue.
               </summary>
               <param name="name"> of the existing channel or queue to use </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getClientMergeEngineClassname">
                   
                    <summary> Returns the currently configured merge class name, if supplied else null.
                    </summary>
                    <returns> Name of class which implements interface nMergeEngineExtension.
                    </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setClientMergeEngineClassname(System.String)">
                   
                    <summary> This allows the client to specify the class used to merge events to form one event within the server.
                    The class must implement the interface nMergeEngineExtension and the channel must have the merge engine active
                    else this will not be used by the server
                    </summary>
                    <param name="name"> of the class to use </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getEnableCaching">
                   
                    <summary> Returns true if the server will cache events in memory or will always refer back to the file backed store. Used by mixed and persistent
                    store types to improve performance by caching the event in memory. In certian instances this is not desirable and the events should
                    not be cached, some examples would be very large stores where the application will periodically scan from the start to the finish.
                    </summary>
                    <returns> true if enabled, this is the default behaviour </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setEnableCaching(System.Boolean)">
                   
                    <summary> Allows the client to control the caching algorithm within the server, if you set caching to false, all events will be
                    read from the file store else if ther server has room in memory, they will be stored in memory and reused.
                    Only applicable for mixed and persistent stores
                    </summary>
                    <param name="flag"> true to enable caching (default behaviour) </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getCacheOnReload">
                   
                    <summary> When a server restarts it will scan all file based stores and check for corruption. During this test the default behaviour
                    is to disable caching to conserve memory, however, in some instances it would be better if the server had actually cached the events
                    in memory for fast replay.
                    </summary>
                    <returns> The current state, if false (default behaviour) no events are kept in memory during reload </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setCacheOnReload(System.Boolean)">
                   
                    <summary> When a server restarts it will scan all file based stores and check for corruption. During this test the default behaviour
                    is to disable caching to conserve memory, however, in some instances it would be better if the server had actually cached the events
                    in memory for fast replay.
                    This function allows the client to override the default behaviour for the store and get the events to be cached
                    </summary>
                    <param name="flag"> to set the cache on reload to.
                    </param>
                   
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getEnableReadBuffering">
                   
                    <summary> Returns the current state of read buffering for the store, if true, then reads will be buffered to optimize the I/O access
                    to the file based store. If false then no buffering will be done and each read will result in a disk I/O, reducing overall performance
                    of the server.
                    </summary>
                    <returns> bool indicating if read buffering is enabled or not. By default it is enabled </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setEnableReadBuffering(System.Boolean)">
                   
                    <summary> Allows the client to control the read buffering logic for the store on the server. If true then the server will optimize its
                    reading of the file based store and reduce the number of disk I/O's performed. Only works on file backed stores like
                    mixed and persistent.
                    </summary>
                    <param name="flag"> to enable/disable the read buffering </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getReadBufferSize">
                    
                     <summary> If ReadBuffering is enabled then this function returns the size in bytes of the buffer to use
                     </summary>
                     <returns> The number of bytes to use for buffering reads for the store </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setReadBufferSize(System.Int64)">
                   
                    <summary> If read buffering is enabled then this allows the client set the number of bytes used for buffering. By default the
                    server uses 10K
                    </summary>
                    <param name="bufferSize"> number of bytes to use </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setPriority(System.Int32)">
            <summary>
            Sets the default priority of events published to this objects parent Channel/Queue.
            </summary>
            <param name="newPriority">default priority level, between 1 and 10. Values outside of this range will cause this method to generate an ArgumentOutOfRangeException</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getPriority">
            <summary>
            Returns the default priority for events published to this objects parent Channel/Queue.
            </summary>
            <returns>An integer value between 1 and 10, representing the priority of a resource.</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setStampDictionary(System.Int32)">
            <summary>
            Configure explicitly the value of the StampDictionary setting of this store.
            This configuration setting will override the default server behavior when processing events on this channel.
            </summary>
            <param name="stampDictionary">stampDictionary the new value of the configuration setting. Valid values are: 
             - com.pcbsys.nirvana.client.nChannelAttributes#DICTIONARY_STAMPING_ENABLED - to explicitly enable dictionary stamping for this channel
             - com.pcbsys.nirvana.client.nChannelAttributes#DICTIONARY_STAMPING_DISABLED - to explicitly disable dictionary stamping for this channel
             - com.pcbsys.nirvana.client.nChannelAttributes#DICTIONARY_STAMPING_DEFAULT - to configure this channel to fall back to the default (server-wide) configuration setting
            </param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getStampDictionary">
            <summary>
            Get the StampDictionary setting value of this store.
            </summary>
            <returns>
             - com.pcbsys.nirvana.client.nChannelAttributes#DICTIONARY_STAMPING_ENABLED - if dictionary stamping is explicitly enabled for this channel
             - com.pcbsys.nirvana.client.nChannelAttributes#DICTIONARY_STAMPING_DISABLED - if dictionary stamping is explicitly disabled for this channel
             - com.pcbsys.nirvana.client.nChannelAttributes#DICTIONARY_STAMPING_DEFAULT - if dictionary stamping is not explicitly configured for this channel (the server will behave according to the default (server-wide) configuration setting)
            </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.getMultiFileEventsPerSpindle">
            <summary>
             Returns the number of events that are stored per individual files for a single store
            </summary>
            <returns>
             The number of events per file spindle
            </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nStoreProperties.setMultiFileEventsPerSpindle(System.Int32)">
            <summary>
            Sets the number of events that will be stored per individual file for a store. Setting this number too low will create to many files and utilise a large number of file descriptors
            </summary>
            <param name="count">The number of events per individual file</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSubscriptionAttributes">
             
              <summary> This class represents the attributes used for channel subscriptions. It comprises of
              the channel name, an optional selector, an initial event id, and the listener that will
              receive the callback for events consumed.
              
              This object can be used in conjunction with the nSession.subscribe method that accepts
              an array of nSubscriptionAttributes objects. Once the method returns from the server,
              the nSubscriptionAttributes objects can be validated, by checking the Successful property.
              
              If Successful the Channel property will be set.
              If !Successful, the Exception property will be set
              
              @since 6.0 </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubscriptionAttributes.#ctor(System.String,System.String,System.Int64,com.pcbsys.nirvana.client.nEventListener)">
             
              <summary> Constructor for setting up the attributes for a subscription to a channel
              </summary>
              <param name="name">the full name of the channel </param>
              <param name="selector">an optional selector provided for event filtering </param>
              <param name="eid">an initial start event id </param>
              <param name="eventCallback">the nEventListener that will receive the callback when events are published </param>
              
        </member>
        <member name="P:com.pcbsys.nirvana.client.nSubscriptionAttributes.ChannelName">
             
              <summary> The name of the channel </summary>
              
        </member>
        <member name="P:com.pcbsys.nirvana.client.nSubscriptionAttributes.Selector">
             
              <summary> The selector for event event filtering on this subscription </summary>
              
        </member>
        <member name="P:com.pcbsys.nirvana.client.nSubscriptionAttributes.EID">
             
              <summary> The event id that the subscription will start from </summary>
              
        </member>
        <member name="P:com.pcbsys.nirvana.client.nSubscriptionAttributes.Listener">
             
              <summary> The nEventListener associated with this subscription </summary>
              
        </member>
        <member name="P:com.pcbsys.nirvana.client.nSubscriptionAttributes.Successful">
             
              <summary> Indicates whether the channel has been successfully found and subscribed to </summary>
              
        </member>
        <member name="P:com.pcbsys.nirvana.client.nSubscriptionAttributes.Channel">
             
              <summary> When find and subscribe is successful this will be set to a valid nChannel object</summary>
              
        </member>
        <member name="P:com.pcbsys.nirvana.client.nSubscriptionAttributes.Exception">
             
              <summary> If the channel find and subscribe failed, this property will contain an exception indicating the problem, for example, an
            instance of : nSecurityException, nChannelNotFoundException or nIllegalChannelMode 
              </summary>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransactionFactory">
            
             <summary> This class is used with a nTransactionAttributes object to create a Nirvana transaction. </summary>
             
        </member>
        <member name="F:com.pcbsys.nirvana.client.nTransactionFactory.sMyPubBuffer">
                   
                    <summary> An int specifying the size of the publish transaction buffer </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionFactory.create(com.pcbsys.nirvana.client.nTransactionAttributes)">
                   
                    <summary> Creates an nTransaction object (Nirvana transaction) based on the nTransactionAttributes object supplied
                    </summary>
                    <param name="attr"> The nTransactionAttributes object containing the parameters for the transaction to be created </param>
                    <returns> the newly created nTransaction object </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionFactory.create(com.pcbsys.nirvana.client.nTransactionAttributes,System.Int64)">
                   
                    <summary> Creates an nTransaction object (Nirvana transaction) based on the nTransactionAttributes object supplied
                    </summary>
                    <param name="attr"> The nTransactionAttributes object containing the parameters for the transaction to be created </param>
                    <param name="oldTXId"> can be used when reconstructing a transaction object from a previously known ID. 
                    If value less than 0 is supplied a new TXId will be allocated.</param>
                    <returns> the newly created nTransaction object </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionFactory.getPublishBufferSize">
                   
                    <summary> Gets the size of the publish transaction buffer
                    </summary>
                    <returns> An int specifying the size of the publish transaction buffer </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionFactory.setPublishBufferSize(System.Int32)">
                   
                    <summary> Sets the size of the publish transaction buffer
                    </summary>
                    <param name="size"> An int specifying the size of the publish transaction buffer </param>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransactionException">
               
                <summary> This class defines the errors that can be thrown by using the nirvana transactional publish API </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionException.#ctor(System.String,System.Int64)">
                   
                    <summary> Constructs a new nTransactionException with the specified message and transaction TTL value.
                    </summary>
                    <param name="msg"> a string message to specify the nature of the transaction error </param>
                    <param name="ttl"> a long specifying the transaction Time To Live (TTL) value as defined by the server </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionException.getServerTTL">
                   
                    <summary> Gets the transaction TTL value as defined by the server
                    </summary>
                    <returns> a long value specifying the transaction TTL value as defined by the server </returns>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransactionAttributes">
               
                <summary> This class is a container for the attributes necessary to create a Nirvana transaction </summary>
                
        </member>
        <member name="F:com.pcbsys.nirvana.client.nTransactionAttributes.myChannel">
                   
                    <summary> The channel associated with this transaction </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAttributes.#ctor">
                   
                    <summary> Default Constructor </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAttributes.#ctor(com.pcbsys.nirvana.client.nAbstractChannel)">
                   
                    <summary> Constructs an nTransactionAttributes object associated with the channel specified.
                    </summary>
                    <param name="aChannel"> The nirvana channel associated with this transaction
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionException"> If there is an error during the construction, check the message for more information </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAttributes.#ctor(com.pcbsys.nirvana.client.nAbstractChannel,System.Int64)">
                   
                    <summary> Constructs an nTransactionAttributes object associated with the channel specified.
                    Transactions created with this object will have the Time To Live (TTL) specified.
                    </summary>
                    <param name="aChannel"> The nirvana channel associated with the transaction </param>
                    <param name="aTimeToLive"> The Time To Live (TTL) value that the transaction will have
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionException"> If there is an error during the construction, check the message for more information </exception>
                    
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nTransactionAttributes.#ctor(com.pcbsys.nirvana.client.nAbstractChannel,System.Int64,System.Int64)" -->
        <member name="M:com.pcbsys.nirvana.client.nTransactionAttributes.getChannel">
                   
                    <summary> Gets the nirvana channel that will be associated with transactions created from this object
                    </summary>
                    <returns> the nChannel object that will be associated with the transactions created from this object </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAttributes.getTTL">
                   
                    <summary> Gets the TTL value that transactions created from this object will have
                    </summary>
                    <returns> a long value specifying the TTL value that transactions created from this object will have </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAttributes.setChannel(com.pcbsys.nirvana.client.nChannel)">
                   
                    <summary> Sets the nirvana channel that will be associated with transactions created from this object
                    </summary>
                    <param name="aChannel"> the nChannel object that will be associated with the transactions created from this object </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAttributes.setTTL(System.Int64)">
                   
                    <summary> Sets the TTL value that transactions created from this object will have
                    </summary>
                    <param name="aTimeToLive"> a long value specifying the TTL value that transactions created from this object will have </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAttributes.getTimeout">
                   
                    <summary> Retrieves the timeout value.
                    </summary>
                    <returns> a long millisecond value </returns>
                    
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nTransactionAttributes.setTimeout(System.Int64)" -->
        <member name="T:com.pcbsys.nirvana.client.nTransactionNoEventsException">
               
                <summary> This exception is thrown if Commit is called on a transaction without any events
                added in its context. </summary>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionNoEventsException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionNoEventsException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nUnackedEventsManager">
            <summary>
            This class is a container for tracking ids of the events to be acknowledged.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nUnknownTransactionIdException">
               
                <summary> This exception is thrown when an attempt is made to perform an operation on a transaction where the id of the transaction is not known by the server.
                The transaction may not exist, or it may have expired.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nUnknownTransactionIdException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nUnknownTransactionIdException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransactionNotCommittedException">
               
                <summary> The transaction has not been committed so the status of the event can not
                be returned, such as getStartEID or getEndEID.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionNotCommittedException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionNotCommittedException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException">
               
                <summary> The transaction has already been committed and as such is closed and completed.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException">
               
                <summary> The transaction has already been aborted and as such is closed
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransactionIncompleteException">
               
                <summary> This exception will be thrown if abort or commit is called on a transaction that has not sent any events to the server.
                For example, create a transaction, and call commit, without publishing any events to the transaction
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionIncompleteException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionIncompleteException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransactionNotStartedException">
               
                <summary> The transaction has not been started as such the transaction is not yet established
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionNotStartedException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionNotStartedException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransaction">
               
                <summary> This class enables the client to perform transactional publishing, representing a nirvana transaction </summary>
                
        </member>
        <member name="F:com.pcbsys.nirvana.client.nTransaction.myAttributes">
                   
                    <summary> The associated transaction attributes object </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nTransaction.mySession">
                   
                    <summary> The session used to communicate back to the actual realm </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nTransaction.myTXId">
                   
                    <summary> The unique transaction Id </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nTransaction.hasAborted">
                   
                    <summary> Flag to specify if we have aborted this transaction </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nTransaction.myEndEID">
                   
                    <summary> The end event id of the range to be published by this transaction </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.getStartEID">
                   
                    <summary> Gets the start event id of the range to be published by this transaction
                    </summary>
                    <returns> a long specifying the start event id of the range to be published by this transaction </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNotCommittedException">
                              is thrown if the transaction is not yet commited </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.getEndEID">
                   
                    <summary> Gets the end event id of the range to be published by this transaction
                    </summary>
                    <returns> a long specifying the end event id of the range to be published by this transaction </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNotCommittedException">
                              is thrown if the transaction is not yet commited </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.getTXID">
                   
                    <summary> Gets the end transaction id associated with this transaction
                    </summary>
                    <returns> a long specifying the  transaction ID </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.getAttributes">
                   
                    <summary> Gets the transaction attributes object associated with this transaction
                    </summary>
                    <returns> a nTransactionAttributes object with the attributes for this transaction </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.abort">
                   
                    <summary> Aborts the transaction associated with the txid provided and this channel.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently conencted to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server did not respond within the timeout peroid </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The channel, typically, has been deleted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            The client does not have permissions to perform this operation </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  The server responded with with an unknown response, see the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNotStartedException">
                                                           The transaction has not been started </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNoSuchTXIDException">
                                                           There is no known TXID, typically the transaction has timed out </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException">
                                                           The transaction has already been committed </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException">
                                                           The transaction has already been aborted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.commit">
                   
                    <summary> Commits the transaction id associated to this channel on the server.
                    <p/>
                     We then wait for the server to respond.  The server responds with the
                     EID's of the events that have been put on to this channel for the
                     supplied transaction id.  Once this process is complete we remove the
                     supplied transaction id from the list of transactions found within the
                     controlling nSession.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently conencted to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server did not respond within the timeout peroid </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The channel, typically, has been deleted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            The client does not have permissions to perform this operation </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  The server responded with with an unknown response, see the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNotStartedException">
                                                           The transaction has not been started </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNoSuchTXIDException">
                                                           There is no known TXID, typically the transaction has timed out </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException">
                                                           The transaction has already been committed </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException">
                                                           The transaction has already been aborted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
                    <exception cref="T:com.pcbsys.nirvana.client.nPublishedPausedException"> Publish is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.commit(System.DateTime)">
                   
                    <summary> Commits the transaction id associated to this channel on the server. This methos
                     allows the transaction to be committed at a future date, rather than immediately.
                    <p/>
                     We then wait for the server to respond.  The server responds with the
                     EID's of the events that have been put on to this channel for the
                     supplied transaction id.  Once this process is complete we remove the
                     supplied transaction id from the list of transactions found within the
                     controlling nSession.
                    </summary>
                    <param name="timeToPublish"> date at which the transaction will be committed
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently conencted to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server did not respond within the timeout peroid </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The channel, typically, has been deleted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            The client does not have permissions to perform this operation </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  The server responded with with an unknown response, see the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNotStartedException">
                                                           The transaction has not been started </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNoSuchTXIDException">
                                                           There is no known TXID, typically the transaction has timed out </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException">
                                                           The transaction has already been committed </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException">
                                                           The transaction has already been aborted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
                    <exception cref="T:com.pcbsys.nirvana.client.nPublishedPausedException"> Publish is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.commit(System.Int64)">
                   
                    <summary>
                     Commits the transaction id associated to this channel on the server. This
                     method allows the transaction to be delayed until t+delay before it is committed
                    
                    <p/>
                     We then wait for the server to respond.  The server responds with the
                     EID's of the events that have been put on to this channel for the
                     supplied transaction id.  Once this process is complete we remove the
                     supplied transaction id from the list of transactions found within the
                     controlling nSession.
                    </summary>
                    <param name="delay"> - the number of millseconds to delay the commit for at the server </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently conencted to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server did not respond within the timeout peroid </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The channel, typically, has been deleted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            The client does not have permissions to perform this operation </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  The server responded with with an unknown response, see the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNotStartedException">
                                                           The transaction has not been started </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNoSuchTXIDException">
                                                           There is no known TXID, typically the transaction has timed out </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException">
                                                           The transaction has already been committed </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException">
                                                           The transaction has already been aborted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
                    <exception cref="T:com.pcbsys.nirvana.client.nPublishedPausedException"> Publish is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.isAborted">
                   
                    <summary> Checks if this transaction is aborted
                    </summary>
                    <returns> a bool value specifying if this transaction has been aborted </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently conencted to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server did not respond within the timeout peroid </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionIncompleteException"> the transaction is invalild or incomplete </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.isCommitted">
                   
                    <summary> Checks if this transaction is committed
                    </summary>
                    <returns> a bool value specifying if this transaction has been committed </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently conencted to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server did not respond within the timeout peroid </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionIncompleteException"> the transaction is invalild or incomplete </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownTransactionIdException"> the transaction id is not known on this server </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.isAborted(System.Boolean)">
                   
                    <summary> Method that checks if this transaction is aborted
                    </summary>
                    <param name="forceRemoteCheck"> if false, the transaction will check its local state first before checking with the realm server, if true, it will check with the realm server only </param>
                    <returns> a bool value specifying if the transaction has been aborted </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently conencted to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server did not respond within the timeout peroid </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionIncompleteException"> the transaction is invalild or incomplete </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.isCommitted(System.Boolean)">
                   
                    <summary> Method that checks if this transaction is committed
                    </summary>
                    <param name="forceRemoteCheck"> if false, the transaction will check its local state first before checking with the realms server, if true, it will check with the realm server only </param>
                    <returns> a bool value specifying if the transaction has been committed </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently conencted to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server did not respond within the timeout peroid </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionIncompleteException"> the transaction is invalild or incomplete </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownTransactionIdException"> the transaction id is not known on this server </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.push(com.pcbsys.nirvana.client.nConsumeEvent)">
                   
                    <summary> Pushes the specified nConsumeEvent to this transaction. No events will be published
                     until this transaction is commited
                    </summary>
                    <param name="evt"> the nConsumeEvent object to be added to this transaction </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> is thrown if the session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException">
                                                           is thrown if the transaction is already commited </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNoEventsException"> is thrown if the transaction has no events pushed </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            is thrown if the user has insufficient priviledges </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException">
                                                           is thrown if the transaction has been aborted. </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.publish(com.pcbsys.nirvana.client.nConsumeEvent)">
                   
                    <summary> Adds the specified nConsumeEvent to this transaction. No events will be published
                     until this transaction is commited
                    </summary>
                    <param name="e"> the nConsumeEvent object to be added to this transaction </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently conencted to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            The client does not have permissions to perform this operation </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException">
                                                           The transaction has already been committed </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException">
                                                           The transaction has already been aborted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nPublishedPausedException"> Publish is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransaction.publish(System.Collections.Generic.List{com.pcbsys.nirvana.client.nConsumeEvent})">
                   
                    <summary> Adds the specified collection of nConsumeEvent objects to this transaction.
                     No events will be published until this transaction is commited.
                    </summary>
                    <param name="events"> the List collection of nConsumeEvent objects to be added to this transaction </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server when this call was made </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            The client does not have permissions to perform this operation </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyCommittedException">
                                                           The transaction has already been committed </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionAlreadyAbortedException">
                                                           The transaction has already been aborted </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nTransactionNoEventsException"> There are no nConsumeEvents in the list </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nPublishedPausedException"> Publish is currently paused </exception>
                    
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nTransaction.publishCommit(System.Int64)" -->
        <member name="T:com.pcbsys.nirvana.client.nAsyncExceptionListener">
               
                <summary> This interface should be implemented by classes wishing to register to receive asynchronous errors from the nirvana server </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nAsyncExceptionListener.handleException(com.pcbsys.nirvana.client.nBaseClientException)">
                   
                    <summary> This method is called by the nirvana API to notify a registered asynchronous exception listener that an error
                    has occurred outside the scope of the calling thread.
                    </summary>
                    <param name="ex"> an nException object containing the error that has occurred </param>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nChannel">
            <summary> 
             This class is a Nirvana channel, offering the Nirvana channel related services</summary> 
        </member>
        <member name="T:com.pcbsys.nirvana.client.nAbstractChannel">
               
                <summary> This is the base class for all nirvana channel types, including queues and normal pub/sub channels
                and as such has no public methods
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
                <see cref="T:com.pcbsys.nirvana.client.nQueue"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nAbstractChannel.#ctor(com.pcbsys.nirvana.client.nChannelImpl)">
                   
              <summary> Returns the nSession used to create/find this channel
              </summary>
              <returns> the nSession associated with this channel </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nAbstractChannel.getSession">
            <summary>
            Returns the nSession object that this channel belongs to
            </summary>
            <returns>The nSession that this channel is associated with</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nAbstractChannel.getQueueSize">
            <summary>
            Returns the size of the underlying event queue waiting for delivery via the go method
            </summary>
            <returns>Size of the underlying event queue waiting for delivery</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nAbstractChannel.updateProtobufDefinitions(System.Byte[][])">
                   
                    <summary> Sets the protobuf descriptors for this channel.
                    </summary>
                    <param name="descriptors"> an array of the descriptors in byte[] form.</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.writeEvent(com.pcbsys.nirvana.nbase.events.nEvent)">
                   
                     <summary> Writes an event to the server using the associated session
                     </summary>
                     <param name="evt"> The nEvent object that is written to the server </param>
                     <returns> The nEvent object that the server responds with if the event is
                     synchronous, null otherwise
                     </returns>
                     <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not connected to the server </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                     
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.getChannelAttributes">
                   
                    <summary> Gets the channels local attributes
                    </summary>
                    <returns> The associated nChannelAttributes object specifying the channel attributes </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.createIterator">
                   
                    <summary> Create a default channel iterator starting at the beginning of the channel
                    </summary>
                    <returns> nChannelIterator for the current channel </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.createIterator(System.String)">
                   
                    <summary> Create a default channel iterator starting at the beginning of the channel with
                    the events which match the selector being returned
                    </summary>
                    <param name="selector"> Used to specify a sub set of the current channel events
                    </param>
                    <returns> nChannelIterator for the current channel
                    </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.createIterator(System.Int64)">
                   
                    <summary> Create a default channel iterator starting at the EID specified
                    </summary>
                    <param name="startEID"> The event to start iterating the channel from </param>
                    <returns> nChannelIterator for the current channel </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.createIterator(System.String,System.Int64)">
                   
                    <summary> Create a default channel iterator starting at the eid specified in the channel with
                    the events which match the selector being returned
                    </summary>
                    <param name="selector"> Used to specify a sub set of the current channel events </param>
                    <param name="startEID"> The event to start iterating the channel from </param>
                    <returns> nChannelIterator for the current channel </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.createIterator(com.pcbsys.nirvana.client.nDurable)">
                   
                    <summary> Create a default channel iterator starting at the eid specified in the channel with
                    the events which match the selector being returned
                    </summary>
                    <param name="durable"> nDurable reference to use for this iterator </param>
                    <returns> nChannelIterator for the current channel
                    </returns>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.createIterator(com.pcbsys.nirvana.client.nDurable,System.String)">
                   
                    <summary> Create a default channel iterator starting at the eid specified in the channel with
                    the events which match the selector being returned
                    </summary>
                    <param name="selector"> Used to specify a sub set of the current channel events </param>
                    <param name="durable"> nDurable reference to use for this iterator </param>
                    <returns> nChannelIterator for the current channel </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.getLastEID">
                   
                    <summary> Gets the last event id of this channel
                    </summary>
                    <returns> a long specifying the last event id of this channel
                    </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.getLastStoredEID">
                   
                    <summary> Gets the last event id of this channel
                    </summary>
                    <returns> a long specifying the last event id stored on this channel
                    </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEvent(System.Int64)">
                   
                    <summary> Purges a single event from this channel
                    </summary>
                    <param name="eidval"> a long specifying the event id of the event to be purged
                    from the channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEvent(System.Int64,System.Boolean)">
                   
                    <summary> Purges a single event from this channel
                    </summary>
                    <param name="eidval"> a long specifying the event id of the event to be purged
                    from the channel </param>
                    <param name="purgeJoins"> a bool specifying if the event will be removed from all subsequent joins
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEvents(System.Int64,System.Int64)">
                   
                    <summary> Purges a range of events from this channel
                    </summary>
                    <param name="startEID"> a long specifying the start event id of the range of events
                    to be purged from the channel </param>
                    <param name="endEID"> a long specifying the end event id of the range of events
                    to be purged from the channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEvents(System.Int64,System.Int64,System.Boolean)">
                   
                    <summary> Purges a range of events from this channel
                    </summary>
                    <param name="startEID"> a long specifying the start event id of the range of events
                    to be purged from the channel </param>
                    <param name="endEID"> a long specifying the end event id of the range of events
                    to be purged from the channel
                    </param>
                    <param name="purgeJoins"> a bool specifying if the event will be removed from all subsequent joins
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEvents(System.Int64,System.Int64,System.String)">
                   
                    <summary> Purges a range of events from this channel
                    </summary>
                    <param name="startEID"> a long specifying the start event id of the range of events
                    to be purged from the channel </param>
                    <param name="endEID"> a long specifying the end event id of the range of events
                    to be purged from the channel </param>
                    <param name="selector"> A messages selector which will be used to filter out only
                    the events which match this criteria
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEvents(System.Int64,System.Int64,System.String,System.Boolean)">
                   
                    <summary> Purges a range of events from this channel
                    </summary>
                    <param name="startEID"> a long specifying the start event id of the range of events
                    to be purged from the channel </param>
                    <param name="endEID"> a long specifying the end event id of the range of events
                    to be purged from the channel </param>
                    <param name="selector"> A messages selector which will be used to filter out only
                    the events which match this criteria
                    </param>
                    <param name="purgeJoins"> a bool specifying if the event will be removed from all subsequent joins
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEventAsync(System.Int64)">
                   
                     <summary> Purges a single event from this channel and does not wait for the response from the server
                     </summary>
                     <param name="eidval"> a long specifying the event id of the event to be purged
                     from the channel
                     </param>
                     <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                     
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEventAsync(System.Int64,System.Boolean)">
                   
                     <summary> Purges a single event from this channel and does not wait for the response from the server
                     </summary>
                     <param name="eidval"> a long specifying the event id of the event to be purged
                     from the channel </param>
                    <param name="purgeJoins"> a bool specifying if the event will be removed from all subsequent joins
                     </param>
                     <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                     
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEventsAsync(System.Int64,System.Int64)">
                   
                     <summary> Purges a range of events from this channel and does not wait for the response from the server
                     </summary>
                     <param name="startEID"> a long specifying the start event id of the range of events to be purged from the channel </param>
                     <param name="endEID"> a long specifying the end event id of the range of events to be purged from the channel </param>
                     <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                     
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEventsAsync(System.Int64,System.Int64,System.Boolean)">
                   
                     <summary> Purges a range of events from this channel and does not wait for the response from the server
                     </summary>
                     <param name="startEID"> a long specifying the start event id of the range of events to be purged from the channel </param>
                     <param name="endEID"> a long specifying the end event id of the range of events to be purged from the channel </param>
                     <param name="purgeJoins"> a bool specifying if the event will be removed from all subsequent joins
                     </param>
                     <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                     
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEventsAsync(System.Int64,System.Int64,System.String)">
                   
                    <summary> Purges a range of events from this channel and does not wait for the response from the server
                    </summary>
                    <param name="startEID"> a long specifying the start event id of the range of events to be purged from the channel </param>
                    <param name="endEID"> a long specifying the end event id of the range of events to be purged from the channel </param>
                    <param name="selector"> A messages selector which will be used to filter out only the events which match this criteria
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.purgeEventsAsync(System.Int64,System.Int64,System.String,System.Boolean)">
                   
                    <summary> Purges a range of events from this channel and does not wait for the response from the server
                    </summary>
                    <param name="startEID"> a long specifying the start event id of the range of events to be purged from the channel </param>
                    <param name="endEID"> a long specifying the end event id of the range of events to be purged from the channel </param>
                    <param name="selector"> A messages selector which will be used to filter out only the events which match this criteria
                    </param>
                    <param name="purgeJoins"> a bool specifying if the event will be removed from all subsequent joins
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.joinChannel(com.pcbsys.nirvana.client.nChannel,System.String)">
                   
                    <summary> Sets a server based link between this channel and the channel
                    defined within the provided nChannel. The link has a filter applied
                    to it, defined by the provided selector string
                    </summary>
                    <param name="dest"> a nChannel object defining the channel to be joined (linked)
                    to this channel </param>
                    <param name="selector"> A string defining a filter that will be applied in the join (link)
                    of these 2 channels
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nDuplicateJoinException"> The join already exists on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.joinChannel(com.pcbsys.nirvana.client.nChannel)">
                   
                    <summary> Sets a server based link between this channel and the channel
                    defined within the provided nChannel.
                    </summary>
                    <param name="dest"> a nChannel object defining the channel to be joined (linked)
                    to this channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nDuplicateJoinException"> The join already exists on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.joinChannel(com.pcbsys.nirvana.client.nChannel,System.Boolean,System.Int32,System.String)">
                   
                    <summary> Sets a server based link between this channel and the channel
                    defined within the provided nChannel. Additional parameters specify
                    whether the event is routable or not, the maximum number of hops the event
                    can pass through and the filter applied to the join (link).
                    </summary>
                    <param name="dest"> a nChannel object defining the channel to be joined (linked)
                    to this channel </param>
                    <param name="isRouted"> a  bool flag specifying whether the event will be routed or not </param>
                    <param name="hopCount"> an int specifying the maximum number of hops the event can pass through </param>
                    <param name="selector"> A string defining a filter that will be applied in the join (link)
                    of these 2 channels
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nDuplicateJoinException"> The join already exists on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.joinChannel(com.pcbsys.nirvana.client.nChannel,System.Boolean,System.Int32,System.String,System.Boolean)">
                   
                    <summary> Sets a server based link between this channel and the channel
                    defined within the provided nChannel. Additional parameters specify
                    whether the event is routable or not, the maximum number of hops the event
                    can pass through and the filter applied to the join (link).
                    </summary>
                    <param name="dest"> a nChannel object defining the channel to be joined (linked)
                    to this channel </param>
                    <param name="isRouted"> a  bool flag specifying whether the event will be routed or not </param>
                    <param name="hopCount"> an int specifying the maximum number of hops the event can pass through </param>
                    <param name="selector"> A string defining a filter that will be applied in the join (link)
                    of these 2 channels </param>
                    <param name="allowPurge"> if allow purge is true then when the source channel is purged events source from it will also be purged
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nDuplicateJoinException"> The join already exists on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.joinChannel(com.pcbsys.nirvana.client.nQueue,System.String)">
                   
                    <summary> Sets a server based link between this channel and the queue
                    defined by the dest parameter. Additional parameter specifies
                    the filter applied to the join (link).
                    </summary>
                    <param name="dest"> a nQueue object defining the queue to be joined (linked)
                    to this channel </param>
                    <param name="selector"> A string defining a filter that will be applied in the join (link)
                    from the source channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nDuplicateJoinException"> The join already exists on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.joinChannel(com.pcbsys.nirvana.client.nQueue)">
                   
                    <summary> Sets a server based link between this channel and the queue
                    defined within the provided nQueue. The link has a filter applied
                    to it, defined by the provided selector string
                    </summary>
                    <param name="dest"> a nQueue object defining the queue to be joined (linked)
                    to this channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nDuplicateJoinException"> The join already exists on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.joinChannel(com.pcbsys.nirvana.client.nQueue,System.Boolean,System.Int32,System.String)">
                   
                    <summary> Sets a server based link between this channel and the queue
                    defined within the provided nQueue. Additional parameters specify
                    whether the event is routable or not, the maximum number of hops the event
                    can pass through and the filter applied to the join (link).
                    </summary>
                    <param name="dest"> a nQueue object defining the queue to be joined (linked)
                    to this channel </param>
                    <param name="isRouted"> a  bool flag specifying whether the event will be routed or not </param>
                    <param name="hopCount"> an int specifying the maximum number of hops the event can pass through </param>
                    <param name="selector"> A string defining a filter that will be applied in the join (link)
                    from the source channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nDuplicateJoinException"> The join already exists on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.joinChannelToArchive(com.pcbsys.nirvana.client.nQueue)">
                   
                    <summary> Sets a server based link between this channel and the queue
                    defined within the provided nQueue. The link has a filter applied
                    to it, defined by the provided selector string
                     Events will NOT be checked for duplicates since this is an archive join, any
                    events that are published to the source will appear in the destination queue. This may result in duplicate events in the
                    queue if the queue has multiple sources. This is by design.
                    </summary>
                    <param name="dest"> a nQueue object defining the queue to be joined (linked)
                    to this channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nDuplicateJoinException"> The join already exists on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.joinChannelToArchive(com.pcbsys.nirvana.client.nQueue,System.String)">
                   
                    <summary> Sets a server based link between this channel and the queue
                    defined within the provided nQueue. Additional parameters specify
                    whether the event is routable or not, the maximum number of hops the event
                    can pass through and the filter applied to the join (link).
                     Events will NOT be checked for duplicates since this is an archive join, any
                    events that are published to the source will appear in the destination queue. This may result in duplicate events in the
                    queue if the queue has multiple sources. This is by design.
                    *
                    </summary>
                    <param name="dest"> a nQueue object defining the queue to be joined (linked)
                    to this channel </param>
                    <param name="selector"> A string defining a filter that will be applied in the join (link)
                    from the source channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nDuplicateJoinException"> The join already exists on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.getJoinInformation">
                   
                    <summary> Returns an array of nJoinInformation objects which describe the links this channel
                    has configured for it. </summary>
                    <returns> array of nJoinInformation objects
                    </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.deleteJoin(com.pcbsys.nirvana.client.nChannel)">
                   
                    <summary> Deletes a join between this channel and the channel referenced in the destination parameter
                    </summary>
                    <param name="destination"> This is an nChannel object referencing the destination channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.deleteJoin(com.pcbsys.nirvana.client.nQueue)">
                   
                    <summary> Deletes a join between this channel and the queue referenced in the destination parameter
                    </summary>
                    <param name="destination"> This is an nQueue object referencing the destination queue
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the queue no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
                  <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.publish(com.pcbsys.nirvana.client.nConsumeEvent)">
                   
                    <summary> Publishes the specified nConsumeEvent to this channel
                    </summary>
                    <param name="e"> the nConsumeEvent object to be published to this channel
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.isSubscribed">
                   
                    <summary> Determines whether the underlying channel is currently being subscribed to
                    </summary>
                    <returns> true if the channel object is currently subscribed to </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.reSubscribe(System.String)">
                   
                    <summary> Removes the current subscriber and re-registers the nEventListener as a subscriber to this channel.
                    The subscriber will receive all events on the channel apart from the ones restricted by the specified filter.
                    </summary>
                    <param name="selector"> a string specifying a filter to this subscription request
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException"> A subscriber is already registered with this channel on this session </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.reSubscribe(System.Int64)">
                   
                    <summary> Removes the current subscriber and registers the specified nEventListener as a subscriber to this channel.
                    The subscriber will receive all events with event id greater than or equal
                    to the one specified
                    </summary>
                    <param name="eid"> a long specifying the subscription's start eid
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException"> A subscriber is already registered with this channel on this session </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.reSubscribe(System.String,System.Int64)">
                   
                    <summary> Removes the current subscriber and re-registers the nEventListener as a subscriber to this channel.
                    The subscriber will receive all events with event id greater than or equal
                    to the one specified, apart from the ones restricted by the specified filter.
                    </summary>
                    <param name="selector"> a string specifying a filter to this subscription request </param>
                    <param name="eid"> a long specifying the subscription's start eid
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException"> A subscriber is already registered with this channel on this session </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.reSubscribe(com.pcbsys.nirvana.client.nDurable,System.String)">
                   
                    <summary> Removes the current subscriber and registers the specified nEventListener as a named subscriber to this channel.
                    The subscriber will receive all events from the last acknowledged event for the name supplied
                    If the name is new it will start from the END of the channel.
                    </summary>
                    <param name="name"> a named object for this subscription </param>
                    <param name="selector"> a string specifying a filter to this subscription request
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException"> A subscriber is already registered with this channel on this session </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nNameAlreadyBoundException"> The name is already bound and used by another client </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nNameDoesNotExistException"> if the server does not know about the named object </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.addSubscriber(com.pcbsys.nirvana.client.nEventListener)">
                   
                    <summary> Registers the specified nEventListener as a subscriber to this channel.
                    The subscriber will receive all events contained in this channel.
                    </summary>
                    <param name="nel"> the nEventListener object to be registered as a subscriber
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException"> A subscriber is already registered with this channel on this session </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.addSubscriber(com.pcbsys.nirvana.client.nEventListener,System.Int64)">
                   
                    <summary> Registers the specified nEventListener as a subscriber to this channel.
                    The subscriber will receive all events with event id greater than or equal
                    to the one specified.
                    </summary>
                    <param name="nel"> the nEventListener object to be registered as a subscriber </param>
                    <param name="eid"> a long specifying the subscription's start eid
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException"> A subscriber is already registered with this channel on this session </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.addSubscriber(com.pcbsys.nirvana.client.nEventListener,System.String)">
                   
                    <summary> Registers the specified nEventListener as a subscriber to this channel.
                    The subscriber will receive all events contained in this channel, apart from
                    the ones restricted by the specified filter.
                    </summary>
                    <param name="nel"> the nEventListener object to be registered as a subscriber </param>
                    <param name="selector"> a string specifying a filter to this subscription request
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException"> A subscriber is already registered with this channel on this session </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.addSubscriber(com.pcbsys.nirvana.client.nEventListener,System.String,System.Int64)">
                   
                    <summary> Registers the specified nEventListener as a subscriber to this channel.
                    The subscriber will receive all events with event id greater than or equal
                    to the one specified, apart from the ones restricted by the specified filter.
                    </summary>
                    <param name="nel"> the nEventListener object to be registered as a subscriber </param>
                    <param name="selector"> a string specifying a filter to this subscription request </param>
                    <param name="eid"> a long specifying the subscription's start eid
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException"> A subscriber is already registered with this channel on this session </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nChannel.addSubscriber(com.pcbsys.nirvana.client.nEventListener,com.pcbsys.nirvana.client.nDurable)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nChannel.addSubscriber(com.pcbsys.nirvana.client.nEventListener,com.pcbsys.nirvana.client.nDurable,System.String,System.Boolean)" -->
        <member name="M:com.pcbsys.nirvana.client.nChannel.addUDPSubscriber(com.pcbsys.nirvana.client.nEventListener,System.String,System.Int64,System.Int32)">
                  
                   <summary> Registers the specified nEventListener as a subscriber to this channel.
                   The subscriber will receive all events with event id greater than or equal
                   to the one specified, apart from the ones restricted by the specified filter.
                   </summary>
                   <param name="nel"> the nEventListener object to be registered as a subscriber </param>
                   <param name="selector"> a string specifying a filter to this subscription request </param>
                   <param name="eid"> a long specifying the subscription's start eid</param>
                   <param name="UDPPort"> an int specifying the subscription's UDP port</param>
                   <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> is thrown if the caller has insufficient permissions </exception>
                   <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> if the channel no longer exists </exception>
                   <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                   <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                   <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                   <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                   <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> The selector has syntax errors </exception>
                   <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException"> A subscriber is already registered with this channel on this session </exception>
                   <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
                   
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.createRegisteredEvent(System.Object)">
             
              <summary> Creates a new nRegisteredEvent bound to this channel using the keyValue as its unique id.
              </summary>
              <param name="keyValue"> Unquie Id to use for the nRegisteredEvent </param>
              <returns> nRegistedEvent </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if unable to create the nRegisteredEvent object </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.createRegisteredEvent(System.Object,System.Boolean)">
             
              <summary> Creates a new nRegisteredEvent bound to this channel using the keyValue as its unique id.
              </summary>
              <param name="keyValue"> Unquie Id to use for the nRegisteredEvent </param>
              <param name="isTransactional"> Indicates that all commits on the nRegistedEvent should use transactional symantics </param>
              <returns> nRegistedEvent </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if unable to create the nRegisteredEvent object </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.removeSubscriber(com.pcbsys.nirvana.client.nEventListener)">
                   
                    <summary> Unregisters the specified nEventListener as a subscriber from this channel.
                    The subscriber will not receive any more events.
                    </summary>
                    <param name="nel"> the nEventListener object to be registered as a subscriber
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.removeSubscriber(com.pcbsys.nirvana.client.nEventListener,System.Boolean)">
                   
                    <summary> Unregisters the specified nEventListener as a subscriber from this channel.
                    The subscriber will not receive any more events.
                    </summary>
                    <param name="nel"> the nEventListener object to be registered as a subscriber
                    </param>
                    <param name="waitForResponse"> if true the call will block waiting for the server to complete the request
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.pauseSubscriber(com.pcbsys.nirvana.client.nEventListener)">
                    
                    <summary>
                    Pause the subscription of the specified nEventListener. This means that no new events will be received
                    from the server until the subscription is resumed.All events that have already been received will be
                    processed normally.
                    </summary>
                    <param name="eventListener"> the nEventListener object registered as a subscriber
                    </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.resumeSubscriber(com.pcbsys.nirvana.client.nEventListener)">
                    
                    <summary>
                    Resumes the subscription of the specified nEventListener.
                    </summary>
                    <param name="eventListener"> the nEventListener object registered as a subscriber
                    </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.isSubscriberPaused(com.pcbsys.nirvana.client.nEventListener)">
                    
                    <summary>
                    Returns true if the subscription of the specified nEventListener object is paused.
                    </summary>
                    <param name="eventListener"> the nEventListener object registered as a subscriber
                    </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.getName">
                   
                    <summary> Gets the name of this channel
                    </summary>
                    <returns> a string specifying the name of this channel </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.addConnectionListener(com.pcbsys.nirvana.client.nChannelConnectionListener)">
                   
                    <summary> Adds a nChannelConnectionListener to this channel so that when new connections are made to this channel the
                    listener is notified
                    </summary>
                    <param name="listener"> to add
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits, or has already been set. </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.addConnectionListener(com.pcbsys.nirvana.client.nChannelConnectionListener,System.Boolean)">
                   
                    <summary> Adds a nChannelConnectionListener to this channel so that when new connections are made to this channel the
                    listener is notified
                    </summary>
                    <param name="listener"> to add </param>
                    <param name="isSync"> the call is synchronous
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits, or has already been set. </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.removeConnectionListener">
                   
                    <summary> Removes the connection listener to this channel
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.removeConnectionListener(com.pcbsys.nirvana.client.nChannelConnectionListener)">
                   
                    <summary> Removes the connection listener to this channel
                    </summary>
                    <param name="listener"> remove the listener
                     </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.getType">
                   
                    <summary> Gets the type of this channel
                    <para>
                    Currently supported types are:
                    </para>
                    <code>
                       nChanneAttributes.MIXED_TYPE
                       nChanneAttributes.PERSISTENT_TYPE 
                       nChanneAttributes.RELIABLE_TYPE 
                    </code>
                    </summary>
                    <returns> an int specifying the channel's type</returns>
                    <see cref="T:com.pcbsys.nirvana.client.nChannelAttributes"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannel.getEventCount">
                   
                    <summary> Gets the number of events on this channel
                    </summary>
                    <returns> a long specifying the number of events on this channel</returns>
                      
        </member>
        <member name="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException">
               
                <summary> This exception is thrown if a user tries to make a channel that already exists </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAlreadyExistsException.#ctor">
            
             <summary> Creates the exception with the default message "Channel already exists on the server"
             </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAlreadyExistsException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException">
               
                <summary> The user has tried to subscribe to the channel more than once. To rectify this problem
                the user must remove the current subscription by calling nChannel.removeSubscriber
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException.#ctor">
            <summary>
            Creates the exception with the default message "User is already subscribed to this channel"
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAlreadySubscribedException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nChannelConnectionListener">
               
                <summary> This interface should be implemented by classes wishing to register to receive
                callbacks when connections are added or removed to a nirvana channel </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelConnectionListener.newConnection(System.String,System.String[],System.String,System.String,System.String)">
                   
                   <summary> This method is called asynchronously when a new connection is added to the
                   nirvana channel.
                   </summary>
                   <param name="connectionId"> The channel connection's ID </param>
                   <param name="subject"> A string representation of the subject associated with the channel connection </param>
                   <param name="filter"> A string representation of the filter associated with the channel connection </param>
                   <param name="protocol"> A string representation of the protocol (i.e. nsp, nhp, nsps or nhps) associated with the channel connection </param>
                   <param name="subscriberName"> If the connection is a named subscriber, this is the name associated with that subscription
                   </param>
                   
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelConnectionListener.delConnection(System.String)">
                   
                    <summary> This method is called asynchronously when a connection is removed from the
                    nirvana channel.
                    </summary>
                    <param name="connectionId"> The channel connection's ID
                    </param>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nChannelIterator">
            
             <summary> This class iterates synchronously over a Nirvana Realm channel. By using the methods the channel
             can be traversed forwards/backwards </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelIterator.getFirst">
                   
              <summary> This returns the first event in the channel or null if there are no events in the channel
              </summary>
              <returns> a nConsumeEvent or null </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If the client does not have the ability to subscribe to the channel </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> The channel is no longer valid </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session has been disconnected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the time out for the event to be published is exceeded </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Unknown response from server. Please contact support </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> Invalid selector specified </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelIterator.getLast">
                   
              <summary> This returns the last event in the channel or null if there are no events in the channel
              </summary>
              <returns> a nConsumeEvent or null </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If the client does not have the ability to subscribe to the channel </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> The channel is no longer valid </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session has been disconnected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the time out for the event to be published is exceeded </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Unknown response from server. Please contact support </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> Invalid selector specified </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelIterator.getNext">
                   
              <summary> Returns the next event in the channel, or will block until an event is published
              </summary>
              <returns> a nConsumeEvent </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If the client does not have the ability to subscribe to the channel </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> The channel is no longer valid </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session has been disconnected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Unknown response from server. Please contact support </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> Invalid selector specified </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelIterator.getPrev">
                   
              <summary> Gets the previous event in the channel or null if there are no more previous events
              </summary>
              <returns> a nConsumeEvent or null </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If the client does not have the ability to subscribe to the channel </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> The channel is no longer valid </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session has been disconnected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the time out for the event to be published is exceeded </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Unknown response from server. Please contact support </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> Invalid selector specified </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelIterator.getNext(System.Int64)">
                   
              <summary> Returns the next event in the channel, or if none will block for the time in milliseconds
              for the next event to be published onto the channel
              </summary>
              <param name="timeout"> time in milliseconds to wait for the event </param>
              <returns> a nConsumeEvent </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If the client does not have the ability to subscribe to the channel </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> The channel is no longer valid </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session has been disconnected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the time out for the event to be published is exceeded </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Unknown response from server. Please contact support </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSelectorParserException"> Invalid selector specified </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException"> The remote realm could not be found </exception>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nChannelIterator.getNextEvents(System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nChannelIterator.getNextEvents(System.Int32,System.Int64)" -->
        <member name="M:com.pcbsys.nirvana.client.nChannelIterator.close">
                   
              <summary> This method will initiate a close to the server for this Iterator</summary>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nChannelNotFoundException">
               
                <summary> The specified channel could not be located on the server. Check the name
                of the channel or the realm you are connected to.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelNotFoundException.#ctor">
            <summary>
            Creates the exception with the default message "Channel could not be found on the server"
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelNotFoundException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nConnectionQueueListener">
               
                <summary> This interface should be implemented by classes wishing to register to receive asynchronous notifications from the internal connection queue
                <para>
                Such notifications include:
                </para>
                <code>
                   Reaching high water mark
                   Reaching low water mark
                   Exceeding the time it should take to access the queue object
                   Exceeding the time it should take to push an event onto the queue
                   Exceeding the time a queue can be blocked due to reaching its high water mark
                </code>
                These limits are configurable under the ClientTimeouts section of the realm manager application
                </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConnectionQueueListener.reachedLWM(System.Int64,System.Int32)">
                   
                    <summary> This method is called by the nirvana API to notify a registered connection queue listener that the connection has hit it's low water mark
                    </summary>
                    <param name="lwm"> the current low water mark setting </param>
                    <param name="queueSize"> the current queue size </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConnectionQueueListener.reachedHWM(System.Int64,System.Int32)">
                   
                    <summary> This method is called by the nirvana API to notify a registered connection queue listener that the connection has hit it's high water mark
                    </summary>
                    <param name="hwm"> the current high water mark setting </param>
                    <param name="queueSize"> the current queue size </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConnectionQueueListener.reachedAccessWaitLimit(System.Int64,System.Int32,System.Int64,System.Int64)">
                   
                    <summary> This method is called by the nirvana API to notify a registered connection queue listener that the connection queue was unable to access the queue for a period longer than that defined by the QueueAccessWaitLimit
                    </summary>
                    <param name="waitTime"> the amount of time it took to gain access to the queue </param>
                    <param name="queueSize"> the current queue size </param>
                    <param name="eventsTx"> the amount of events pushed by the connection </param>
                    <param name="eventsRx"> the amount of events received by the connection </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConnectionQueueListener.reachedPushWaitLimit(System.Int64,System.Int32,System.Int64,System.Int64)">
                   
                    <summary> This method is called by the nirvana API to notify a registered connection queue listener that the connection queue was unable to push an event to the queue for a period longer than that defined by the QueuePushWaitLimit
                    </summary>
                    <param name="waitTime"> the amount of time it took to push the event to the queue </param>
                    <param name="queueSize"> the current queue size </param>
                    <param name="eventsTx"> the amount of events pushed by the connection </param>
                    <param name="eventsRx"> the amount of events received by the connection </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConnectionQueueListener.reachedQueueBlockLimit(System.Int64,System.Int32,System.Int64,System.Int64)">
                   
                    <summary> This method is called by the nirvana API to notify a registered connection queue listener that the connection queue was blocked due to reaching it's high water mark for a period longer than that defined by the QueueBlockLimit
                    </summary>
                    <param name="waitTime"> the amount of time it took before the queue reached it's low water mark </param>
                    <param name="queueSize"> the current queue size </param>
                    <param name="eventsTx"> the amount of events pushed by the connection </param>
                    <param name="eventsRx"> the amount of events received by the connection </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConnectionQueueListener.queueUnBlocked(System.Int64,System.Int32,System.Int64,System.Int64)">
                   
                    <summary> This method is called by the nirvana API to notify a registered connection queue listener that the connection queue was blocked due to reaching it's high water mark for a period longer than that defined by the QueueBlockLimit but is now unbclocked
                    </summary>
                    <param name="waitTime"> the amount of time it took before the queue was unblocked </param>
                    <param name="queueSize"> the current queue size </param>
                    <param name="eventsTx"> the amount of events pushed by the connection </param>
                    <param name="eventsRx"> the amount of events received by the connection </param>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nConstants">
            
             <summary>This class is a container for the various constants that affect the behaviour of
             various Nirvana Client API calls. </summary>
             
        </member>
        <member name="F:com.pcbsys.nirvana.client.nConstants.sStandardWriteHandler">
                   
                    <summary> This write handler uses a combination of direct writing and buffered writing to the network
                    depending on client event load </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nConstants.sDirectWriteHandler">
                   
                    <summary>This write handler only uses a direct write method to the network layer, this reduces latencies but
                    may increase the cpu used </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nConstants.sFlushWriteHandler">
                   
                    <summary>This write handler allows the client to queue events to be handled in batches if possible. This allows the client to optimally send
                    over a latency prone link with the lowest possible latency </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nConstants.sQueueWriteHandler">
                   
                    <summary>This write handler allows the client to queue events that will be sent as the underlying communications fill the buffers or if the queue reaches 0. 
                This facilitates the batching of events into 1 packet to be sent to the server. </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nConstants.CHAN_DELETED_EVENT_ID">
                   
                <summary>Specifies the CHANNEL DELETED event ID received as result of channel deletion.
                This event is send only when async subscriber is used </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setWriteHandlerType(System.Int32)">
                   
                    <summary> Allows the client to specify the type of write handling that the client code will employ. Please note
                    this needs to be set prior to any nSession creation.
                    </summary>
                    <param name="type"> Either sStandardWriteHandler or sDirectWriteHandler </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getWriteHandlerType">
                   
                    <summary>Returns the current write handling mode that the client is using
                    </summary>
                    <returns> an int of either sStandardWriteHandler or sDirectWriteHandler </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getProxyString">
                   
                    <summary>Gets the current value set to be used as the proxy for http(s) drivers (host:port)
                    </summary>
                    <returns>The string proxy setting (host:port)</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setProxyString(System.String)">
                   
                    <summary>Sets the current value set to be used as the proxy for http(s) drivers, there is two format's if you wish to use a IPV6 string literal ip address then http(s)://[IPV6 Address]:port or if host is a domain name or IPV4 address then http(s)://host:port
                    </summary>
                    <param name="newVal">The string proxy setting (host:port)</param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.ignoreProxy(System.Boolean)">
                   
                    <summary>If set to true, all proxy settings will be ignored and a direct connection to the realm will be attempted.
                    </summary>
                    <param name="ignore">If a direct connection should be used instead of the system default or otherwise specified proxy.</param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getProxyAuthString">
                   
                    <summary>Gets the current value set to be used as the proxy authentication for http(s) drivers (username:password)
                    </summary>
                    <returns>The string username:password for proxy authentication</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setProxyAuthString(System.String)">
                   
                    <summary>Sets the values to be used as the proxy authentication for http(s) drivers in colon-separated
                    form (username:password).An optional third parameter can be supplied, which indicates the domain
                    (username:password:domain).</summary>
                    <param name="newVal">the string username:password or username:password:domain used for proxy authentication</param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.honour3rdPartyCookies(System.Boolean)">
            
            <summary>If set the underlying nhp(s) drivers will extract and use the Set-Cookie response from an intermediate proxy. Useful for load balancers</summary>
            
            <param name="flag">Enable or Disable the use of the HTTP Cookie header</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.isHonouring3rdPartyCookies">
             <summary>If set the underlying nhp(s) drivers will extract and use the Set-Cookie response from an intermediate proxy. Useful for load balancers</summary>
            <returns>the current state of the http cookie header use</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setPermittedKeepAlivesMissed(System.Int32)">
            
             <summary> Sets the number of keep alives that the client can miss before closing the connection. If 0, the client
             does not check for any missed keep alives from the server and will continue sending its own
             keep alive events, until the connection is detected as lost. If > 0, say 1, when the client has not
             received a message for 1 X the KeepAlive time + 20000ms, the underlying connection will be closed by
             the client and reconnection will be attempted.</summary>
            
             <param name="kas"> Number of keep alive messages the client will miss before determining the connection as broken. </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.currentTimeMillis">
                   
                    <summary> Returns the current time in milliseconds since epoch </summary>
                     <returns> the correct epoch time as a millisecond value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.milliToTicks(System.Int64)">
                   
                    <summary> Convert the milliseconds value to the correct ticks / nano time  </summary>
                     <returns> the correct ticks value represented by the millisecond value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.milliToDateTime(System.Int64)">
                   
                    <summary> Convert an Epoch Date in milliseconds to a valid DateTime object  </summary>
                     <returns> valid DateTime representation of the Epoch time supplied </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getInitialConnectionTimeout">
                   
                    <summary>This returns the current value for the Initial socket connect timeout. This timeout is specified in the actual
                    underlying Socket connect, and enables connections made to non existent or unreachable hosts to be returned within
                    a configurable time frame.
                    </summary>
                    <returns> the socket connect timeout value, default is 30000ms </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setInitialConnectionTimeout(System.Int32)">
                   
                    <summary>This sets the current value for the Initial socket connect timeout. This timeout is specified in the actual
                    underlying Socket connect, and enables connections made to non existent or unreachable hosts to be returned within
                    a configurable time frame.
                    </summary>
                    <param name="timeout"> the socket connect timeout value to be set, default is 30000ms </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getEVENTWAIT">
                   
                    <summary>This is the maximum time the client API will wait for a response to a specific
                    request from the Nirvana realm. The default value is 60 secs and typically if
                    you get a nRequestTimedOutException the cause would be:
                    
                    <para>
                    1. There is a protocol mismatch between the client library in use and server
                    you are connected to.
                    </para>
                    <para>
                    2. The realm is really so busy that has not managed to respond to your request
                    within the specified maximum interval.
                    </para>
                    </summary>
                    <returns> a long specifying the maximum wait time for a protocol request (in ms) </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setEVENTWAIT(System.Int64)">
                   
                    <summary>This is the maximum time the client API will wait for a response to a specific
                    request from the Nirvana realm. The default value is 60 secs and typically if
                    you get a nRequestTimedOutException the cause would be:
                    
                    <para>
                    1. There is a protocol mismatch between the client library in use and server
                    you are connected to.
                    </para>
                    <para>
                    2. The realm is really so busy that has not managed to respond to your request
                    within the specified maximum interval.
                    </para>
                    
                    Calling this method will only have effect on the local client. Alternatively if
                    you change this value through on the realm configuration using the Admin API,
                    all subsequent Nirvana clients that connect will be affected.
                    </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getSubLowWater">
                   
                    <summary>Retrieves the subscriber queue low watermark. Each Nirvana subscriber uses
                    a queue to store events retrieved from the server prior to performing the
                    callback to the registered event listeners. When the queue reaches the high
                    watermark the subscription is suspended to allow the event listener to catch
                    up and control the amount of memory used on the client. When the queue reaches
                    the low watermark, the subscription is automatically resumed.
                    </summary>
                    <returns> an int specifying the number of events to be used as a queue low watermark </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setSubLowWater(System.Int32)">
                   
                    <summary>Sets the subscriber queue low watermark. Each Nirvana subscriber uses
                    a queue to store events retrieved from the server prior to performing the
                    callback to the registered event listeners. When the queue reaches the high
                    watermark the subscription is suspended to allow the event listener to catch
                    up and control the amount of memory used on the client. When the queue reaches
                    the low watermark, the subscription is automatically resumed.
                    </summary>
                    <param name="low"> the low water ,ark for the subscriber </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getSubHighWater">
                   
                    <summary>Retrieves the subscriber queue high watermark. Each Nirvana subscriber uses
                    a queue to store events retrieved from the server prior to performing the
                    callback to the registered event listeners. When the queue reaches the high
                    watermark the subscription is suspended to allow the event listener to catch
                    up and control the amount of memory used on the client. When the queue reaches
                    the low watermark, the subscription is automatically resumed.
                    </summary>
                    <returns> an int specifying the number of events to be used as a queue high watermark </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setSubHighWater(System.Int32)">
                   
                    <summary>Sets the subscriber queue high watermark. Each Nirvana subscriber uses
                    a queue to store events retrieved from the server prior to performing the
                    callback to the registered event listeners. When the queue reaches the high
                    watermark the subscription is suspended to allow the event listener to catch
                    up and control the amount of memory used on the client. When the queue reaches
                    the low watermark, the subscription is automatically resumed.
                    </summary>
                    <param name="high"> sets the subscriber high water mark </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getConnectionQueueHighWater">
                   
                    <summary>Returns the outbound publish queue high watermark. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    </summary>
                    <returns> the outbound connection queue high water mark </returns>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setConnectionQueueHighWater(System.Int32)">
                   
                    <summary>Sets the outbound publish queue high watermark. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    </summary>
                    <param name="high"> the outbound connection queue high water mark </param>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getConnectionQueueLowWater">
                   
                    <summary>Returns the outbound publish queue low watermark. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    </summary>
                    <returns> the outbound connection queue low water mark </returns>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setConnectionQueueLowWater(System.Int32)">
                   
                    <summary>Sets the outbound publish queue low watermark. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    </summary>
                    <param name="low"> the outbound connection queue low water mark </param>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getConnectionBlockWeighting">
                   
                    <summary>Returns the outbound publish queue block weighting. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    
                    When an outbound queue becomes blocked (unavailable) it is possible to become notified after a configurable period. 
                    The connection block weighting is a value that is applied to the block wait value in order to control the frequency of these notifications.
                     </summary>
                    <returns> the connection queue block weighting </returns>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setConnectionBlockWeighting(System.Int32)">
                   
                    <summary>Sets the outbound publish queue block weighting. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    
                    When an outbound queue becomes blocked (unavailable) it is possible to become notified after a configurable period. 
                    The connection block weighting is a value that is applied to the block wait value in order to control the frequency of these notifications.
                     </summary>
                    <param name="blockWeighting"> the connection queue block weighting </param>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setBlockLimit(System.Int32)">
                   
                    <summary>Sets the outbound publish queue block wait time. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    
                    When an outbound queue becomes blocked (unavailable) it is possible to become notified after a configurable period. 
                    This period is called the block wait time 
                     </summary>
                    <param name="p_blockWait"> the connection queue block wait </param>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setAccessWaitLimit(System.Int32)">
                   
                    <summary>Sets the outbound publish queue access wait time. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    
                    When an outbound queue becomes blocked (unavailable) it is possible to become notified after a period of time that the queue cannot be accessed. 
                    This period is called the block access time 
                     </summary>
                    <param name="p_accessWait"> the connection queue access wait </param>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setPushWaitLimit(System.Int32)">
                   
                    <summary>Sets the outbound publish queue push wait time. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    
                    When an outbound queue becomes blocked (unavailable) it is possible to become notified after a period of time that events cannot be pushed to the queue. 
                    This period is called the push wait time 
                     </summary>
                    <param name="p_pushWait"> the connection queue push wait </param>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getPushWaitLimit">
                   
                    <summary>Returns the outbound publish queue push wait time. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    
                    When an outbound queue becomes blocked (unavailable) it is possible to become notified after a period of time that events cannot be pushed to the queue. 
                    This period is called the push wait time 
                     </summary>
                    <returns> the connection queue push wait </returns>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getAccessWaitLimit">
                   
                    <summary>Returns the outbound publish queue access wait time. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    
                    When an outbound queue becomes blocked (unavailable) it is possible to become notified after a period of time that the queue cannot be accessed. 
                    This period is called the block access time 
                     </summary>
                    <returns> the connection queue access wait </returns>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getBlockLimit">
                   
                    <summary>Returns the outbound publish queue block wait time. Each Nirvana session that sends events to the server
                    (e.g. publishers) place events into an outbound queue to be sent to the server. When the queue reaches the high
                    watermark the queue is unavailable to the client session until the queue reaches it's low water mark, i.e.
                    the events are delivered to the server. When the low water mark is reached the queue
                    is automatically resumed.
                    
                    When an outbound queue becomes blocked (unavailable) it is possible to become notified after a configurable period. 
                    This period is called the block wait time 
                     </summary>
                    <returns> the connection queue block wait </returns>
                    <see cref="T:com.pcbsys.nirvana.client.nConnectionQueueListener"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setClientLogLevel(System.Int32)">
                   
                    <summary>Sets the log level for the client. All Nirvana client api code contains useful logging messages. The messages are set at specific levels from 0-7. 
                    This method allows you to choose what log level you wish to see. Setting to log level 0 will provide verbose output, whereas level 7 will be fairly quiet.
                    
                    By default, these messages will be sent to a console
                     </summary>
                    <param name="level"> the log level you wish to set the client application to for nirvana messages </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setClientLogFile(System.String)">
                   
                    <summary>Specify a file for the client log messages.
                    Defaults to stdout.
                     </summary>
                    <param name="file"> the log file you wish the nirvana messages to be written to </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setClientLogSize(System.Int64)">
                   
                    <summary>Specify the maximum size of the log file
                     </summary>
                    <param name="size"> the max size of the log file. By default it is set to 100000000.
                    Min value is 1000000 (~1MB) and if a value less than this is passed it will be automatically adjusted.</param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setClientLogFileDept(System.Int32)">
                   
                    <summary>Specify the maximum number of log files that will be kept
                     </summary>
                    <param name="dept"> the max number of log files that will be kept. By default it is set to 10. 
                    If value less than 0 is passed, then only 1 file will be kept.
                    </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.enableDebug(System.Boolean)">
                   
                    <summary>Sets the debug flag to true or false. If true verbose logging will occur for connections to the realm server
                    
                    By default, debug is not enabled
                     </summary>
                    <param name="enabled"> - whether debug is enabled (true) or disabled (false) </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.isDebugEnabled">
                   
                    <summary>Returns whether the debug flag is set to true or false. 
                     
                    By default, debug is not enabled
                     </summary>
                    <returns> whether debug is enabled (true) or disabled (false) </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.attemptReconnectAfterAccessChange">
                   
                    <summary>Returns whether a nirvana nSession will attempt to reconnect to the realm
                    after the realm ACL has been revoked. By default, the nSession will not reconnect
                    after one of these incidents, and a manual restart would need to be initiated
                    </summary>
                    <returns> true if reconnect is enabled after realm ACL subject revocation </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setReconnectAfterAccessChange(System.Boolean)">
                   
                    <summary>Sets whether a nirvana nSession will attempt to reconnect to the realm
                    after the realm ACL has been revoked. By default, the nSession will not reconnect
                    after one of these incidents, and a manual restart would need to be initiated
                     </summary>
                    <param name="recon"> true - will reconnect continually until successful, false, will disabled reconnect </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.attemptReconnectImmediately">
                   
                    <summary>Returns whether a nirvana nSession will attempt to immediately reconnect or whether reconnection attempts
                    will back off over time to prevent a network storm where multiple re-connections
                    can occur all at once
                    </summary>
                    <returns> true if reconnect immediately is enabled </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setReconnectImmediately(System.Boolean)">
                   
                    <summary>Sets whether a nirvana nSession will attempt to immediately reconnect or whether reconnection attempts
                    will back off over time to prevent a network storm where multiple re-connections
                    can occur all at once
                    </summary>
                    <param name="recon"> true - will reconnect immediately, and use the value set in</param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getReconnectInterval">
                   
                    <summary>Returns the interval value to use between reconnect attempts when the
                    session is set to reconnect immediately
                    </summary>
                    <returns> true if reconnect immediately is enabled</returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setReconnectInterval(System.Int64)">
                   
                    <summary>Returns the interval value to use between reconnect attempts when the
                    session is set to reconnect immediately
                    </summary>
                    <param name="interval"> value in milliseconds specifying the interval between reconnect attempts</param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setKeepAliveInterval(System.Int64)">
                   
                    <summary>Sets the value in ms to wait before sending a Keep Alive. This is applied to the local JVM only and is NOT sent to the realm.
                    </summary>
                    <param name="newVal"> value in milliseconds specifying the interval between keep alives sent</param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getKeepAliveInterval">
                   
                    <summary>Gets the value in ms to wait before sending a Keep Alive. This is relevant to the local JVM only.
                    </summary>
                    <returns> the keep alive internal</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getHTTPRequestTimeout">
                   
                    <summary>Gets the value in ms that HTTP/HTTPS requests will wait before returning without a response
                    </summary>
                    <returns>The HTTP timeout value in milliseconds</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setHTTPRequestTimeout(System.Int32)">
                   
                    <summary>Sets the value in ms that HTTP/HTTPS requests will wait before returning without a response
                    </summary>
                    <param name="newVal">The HTTP timeout value in milliseconds</param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setDataGroupQueueSize(System.Int32)">
            
             <summary>Sets the number of events that are still to ve delivered to the client</summary>
             <param name="queueSize">number of events that the queue will hold before blocking</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getDataGroupQueueSize">
            
             <summary>Get the current data group event queue size</summary>
             <returns>The current data group event queue size</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setStringEncoding(System.Boolean)">
            
             <summary>If doEncode is true, the encoding of string properties stored in nEventProperties will be maintained.
             Encoding is off by default because it produces a small performance hit, however this reduces the character set.</summary>
             <param name="doEncode">If true, the encoding of strings will be maintained allowing for alternative character sets.</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setDefaultCulture(System.Globalization.CultureInfo)">
            
             <summary>When a user connects to Nirvana their username is converted to lower case.  This can cause internationalisation problems
             so the username is converted using a CultureInfo object (default : CultureInfo.InvariantCulture). </summary>
             <param name="culture">CultureInfo to be used when the username is converted to lower case</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getDefaultCulture">
            
             <summary>Get the CultureInfo object that is used when the session username is converted to lower case.</summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setSocketSendBufferSize(System.Int32)">
            <summary>
            Set the outbound socket buffer size
            </summary>
            <param name="size">the size in bytes for the outbound buffer size</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setSocketReceiveBufferSize(System.Int32)">
            <summary>
            Set the inbound socket buffer size
            </summary>
            <param name="size">the size in bytes for the inbound buffer size</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getSocketSendBufferSize">
            <summary>
            Get the outbound socket buffer size
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getSocketReceiveBufferSize">
            <summary>
            Get the inbound socket buffer size
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setEnabledPriorityQueues(System.Boolean)">
            <summary>
            Enable the usage of priority queues for this client. This will give delivery preference to messages marked high priority for this client.
            </summary>
            <param name="doEnable">true will enable priority queueing for this client, false will disable it</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getEnabledPriorityQueues">
            <summary>
            Get whether priority queueing is enabled for this client.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.setPriorityQueueCount(System.Int32)">
            <summary>
            Sets the number of queues to use when allocating priority. This can be a number between 1 and 10. The number of queues control how priority is arranged, smaller queue counts will coalese priority bands. For example, a queue count of 5 will result in priority 1 and 2, 3 and 4, 5 and 6, 7 and 8, 9 and 10 grouped together.
            </summary>
            <param name="queueCount">The number of queues to use for priority allocation. If this parameter is not between 1 and 10 a ArgumentOutOfRangeException will be thrown</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConstants.getPriorityQueueCount">
            <summary>
            Gets the number of queues used for priority messaging. If priority messaging is disabled, this method will return 0
            </summary>
            <returns>Returns an integer between 1 and 10 if priority queues are enabled for this client. 0 otherwise.</returns>
        </member>
        <member name="P:com.pcbsys.nirvana.client.nConstants.Certificate">
                   
                    <summary>Specifies the path to the certificate to use for SSL Client Authentication.
                    
                    If not set, the default will be to use the first certificate match from the current users' certificate store  </summary>
                   
        </member>
        <member name="P:com.pcbsys.nirvana.client.nConstants.CertificatePasword">
                   
                    <summary>Specifies the path to the certificate to use for SSL Client Authentication.
                    
                    If not set, the default will be to use the first certificate match from the current users' certificate store  </summary>
                   
        </member>
        <member name="P:com.pcbsys.nirvana.client.nConstants.RemoteCertificateValidation">
                   
                    <summary>Specifies the RemoteCertificateValidationCallback used when establishing nsps connections, if none
                    supplied will use the system defaults </summary>
                   
        </member>
        <member name="P:com.pcbsys.nirvana.client.nConstants.LocalCertificateValidation">
                   
                    <summary>Specifies the LocalCertificateSelectionCallback used when establishing nsps connections, if none
                    supplied will use the system defaults </summary>
                   
        </member>
        <member name="T:com.pcbsys.nirvana.client.nConsumeEventFactory">
               
                <summary>This class is used to facilitate creation of nConsumeEvent objects </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventFactory.create(System.Byte[],System.Byte[],System.Int64,System.Boolean)">
                   
                     <summary>Creates an nConsumeEvent object based on the parameters supplied
                     </summary>
                     <param name="tag"> The tag for this event as a byte[] </param>
                     <param name="data"> The data for this event </param>
                     <param name="TTL"> the Time To Live for this event </param>
                     <param name="isPersistent"> flag to show whether the event is persistent of not </param>
                     <returns> the newly created nConsumeEvent object </returns>
                     
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventFactory.create(System.String,System.Byte[],System.Int64,System.Boolean)">
                   
                    <summary>Creates an nConsumeEvent object based on the parameters supplied
                    </summary>
                    <param name="tag"> The tag for this event as a String </param>
                    <param name="data"> The data for this event. Assumed to be non-DOM data </param>
                    <param name="TTL"> the Time To Live for this event </param>
                    <param name="isPersistent"> flag to show whether the event is persistent of not </param>
                    <returns> the newly created nConsumeEvent object </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventFactory.create(System.String,com.pcbsys.nirvana.client.nEventProperties,System.Byte[],System.Int64,System.Boolean)">
                   
                    <summary>Creates an nConsumeEvent object based on the parameters supplied
                    </summary>
                    <param name="tag"> The tag for this event as a String </param>
                    <param name="props"> The nEventProperties associated with this event </param>
                    <param name="data"> The data for this event </param>
                    <param name="TTL"> the Time To Live for this event </param>
                    <param name="isPersistent"> flag to show whether the event is persistent of not </param>
                    <returns> the newly created nConsumeEvent object </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventFactory.create(com.pcbsys.nirvana.client.nEventProperties,System.Byte[],System.Int64,System.Boolean)">
                   
                    <summary>Creates an nConsumeEvent object based on the parameters supplied
                    </summary>
                    <param name="props"> The nEventProperties associated with this event </param>
                    <param name="data"> The data for this event </param>
                    <param name="TTL"> the Time To Live for this event </param>
                    <param name="isPersistent"> flag to show whether the event is persistent of not </param>
                    <returns> the newly created nConsumeEvent object </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventFactory.create(com.pcbsys.nirvana.client.nEventProperties,System.String,System.Int64,System.Boolean)">
                   
                    <summary>Creates an nConsumeEvent object based on the parameters supplied
                    </summary>
                    <param name="props"> The nEventProperties associated with this event </param>
                    <param name="tag"> The tag for this event </param>
                    <param name="TTL"> the Time To Live for this event </param>
                    <param name="isPersistent"> flag to show whether the event is persistent of not </param>
                    <returns> the newly created nConsumeEvent object </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nConsumeEventFactory.create(System.Byte[],com.pcbsys.nirvana.client.nEventProperties,System.Byte[],System.Int64,System.Boolean)">
                   
                    <summary>Creates an nConsumeEvent object based on the parameters supplied
                    </summary>
                    <param name="tag"> The tag for this event </param>
                    <param name="props"> The nEventProperties associated with this event </param>
                    <param name="data"> The data for this event </param>
                    <param name="TTL"> the Time To Live for this event </param>
                    <param name="isPersistent"> flag to show whether the event is persistent of not </param>
                    <returns> the newly created nConsumeEvent object </returns>
                
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDuplicateJoinException">
               
                <summary> The user has requested a join be created but the server already has this
                join configured in the database
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDuplicateJoinException.#ctor">
            <summary>
            Creates the exception with the default message "Channel is already joined"
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDuplicateJoinException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nEventAttributes">
               
                <summary>The nEventAttributes class is used by the nConsumeEvent object in order to store standard header values associated with nirvana client, and JMS events.
                 Not all values are set all the time. Some values are only set by the realm server, whereas other values are available to be programatically set.
                 The majority of values are specific to JMS Message headers, and as such would not be required to be used by a standard nConsumeEvent</summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.#ctor">
                   
                    <summary>Generate a new nEventAttributes object </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getReplyType">
                   
                    <summary>Obtain the reply type represented as a byte value
                    </summary>
                    <returns> the reply type </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setReplyType(System.Byte)">
                   
                    <summary>Set the reply type
                    </summary>
                    <param name="myReplyType"> the byte representation of the reply type </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getDeliveryMode">
                   
                    <summary>Obtain the delivery mode used for this event
                    </summary>
                    <returns> the byte value that represents the delivery mode </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setDeliveryMode(System.Byte)">
                   
                    <summary>Set the delivery mode </summary>
                    <param name="myDeliveryMode"> the byte value representing the delivery mode </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getPriority">
                   
                    <summary>Obtain the priority allocated to the event
                    </summary>
                    <returns> the priority represented as a byte value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setPriority(System.Byte)">
                   
                    <summary>Set the event priority
                    </summary>
                    <param name="myPriority"> the byte value representing the priority </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getMessageType">
                   
                    <summary>Obtain the type of the event
                    </summary>
                    <returns> the type represented as a byte value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setMessageType(System.SByte)">
                   
                    <summary>Set the event type
                    </summary>
                    <param name="myMessageType"> the byte value representing the type of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getTimestamp">
                   
                    <summary>Obtain the time stamp allocated to the event
                    </summary>
                    <returns> the time stamp represented as a long value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getExpiration">
                   
                    <summary>Obtain the expiration value allocated to the event
                    </summary>
                    <returns> the expiration represented as a long value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setExpiration(System.Int64)">
                   
                    <summary>Set the event expiration value
                    </summary>
                    <param name="myExpiration"> the long value representing the expiration of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getCorrelationId">
                   
                    <summary>Obtain the correlation id allocated to the event (JMS specific)
                     Third-party monitoring and instrumentation solution *may* use this field, and non-JMS applications
                     should be aware that using it themselves *may* break these third-party solutions.
                    </summary>
                    <returns> the correlation id represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setCorrelationId(System.Byte[])">
                   
                    <summary>Set the event correlation id (JMS specific)
                     Third-party monitoring and instrumentation solution *may* use this field, and non-JMS applications
                     should be aware that using it themselves *may* break these third-party solutions.
                    </summary>
                    <param name="myCorrelationId"> the byte array value representing the correlation id of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getMessageId">
                   
                    <summary>Obtain the message id allocated to the event (JMS specific)
                    </summary>
                    <returns> the message id represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setMessageId(System.Byte[])">
                   
                    <summary>Set the event message id (JMS specific)
                    </summary>
                    <param name="myMessageId"> the byte array value representing the message id of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getType">
                   
                    <summary>Obtain the arbitrary value given to this event to represent it's type
                    </summary>
                    <returns> the message type represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setType(System.Byte[])">
                   
                    <summary>Set the arbitrary event type given to this event
                    </summary>
                    <param name="myType"> the byte array value representing the type of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getDestination">
                   
                    <summary>Obtain the destination allocated to the event
                    </summary>
                    <returns> the destination represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setDestination(System.Byte[])">
                   
                    <summary>Set the destination given to this event
                    </summary>
                    <param name="myDestination"> the byte array value representing the destination used by the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getApplicationId">
                   
                    <summary>Obtain the application id allocated to the event
                    </summary>
                    <returns> the application id represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setApplicationId(System.Byte[])">
                   
                    <summary>Set the application id given to this event
                    </summary>
                    <param name="myApplicationId"> the byte array value representing the application id of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getUserId">
                   
                    <summary>Obtain the user id allocated to the event
                    </summary>
                    <returns> the user id represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setUserId(System.Byte[])">
                   
                    <summary>Set the user id given to this event
                    </summary>
                    <param name="myUserId"> the byte array value representing the user id of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getReplyToName">
                   
                    <summary>Obtain the reply to name allocated to the event
                    </summary>
                    <returns> the reply to name represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setReplyToName(System.Byte[])">
                   
                    <summary>Set the reply to name given to this event
                    </summary>
                    <param name="myReplyToName"> the byte array value representing the reply to name of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getPublisherName">
                   
                    <summary>Obtain the publisher name allocated to the event
                    </summary>
                    <returns> the publisher name represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setPublisherName(System.Byte[])">
                   
                    <summary>Set the publisher name given to this event
                    </summary>
                    <param name="myPubName"> the byte array value representing the publisher name of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getPublisherHost">
                   
                    <summary>Obtain the publisher host allocated to the event
                    </summary>
                    <returns> the publisher host represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setPublisherHost(System.Byte[])">
                   
                    <summary>Set the publisher host value given to this event
                    </summary>
                    <param name="myPubHost"> the byte array value representing the publisher host of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getSubscriberName">
                   
                    <summary>Obtain the subscriber name allocated to the event
                    </summary>
                    <returns> the subscriber name represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setSubscriberName(System.Byte[])">
                   
                    <summary>Set the subscriber name given to this event
                    </summary>
                    <param name="mySubName"> the byte array value representing the subscriber name of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getSubscriberHost">
                   
                    <summary>Obtain the subscriber host allocated to the event
                    </summary>
                    <returns> the subscriber host represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setSubscriberNames(System.String[])">
            <summary>
            Set the subscriber names given to this event
            </summary>
            <param name="mySubName">the byte string value representing the subscriber names of the event</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getSubscriberNames">
            <summary>
            Get the subscriber names given to this event
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setSubscriberHost(System.Byte[])">
                   
                    <summary>Set the subscriber host value given to this event
                    </summary>
                    <param name="mySubHost"> the byte array value representing the subscriber host of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getSubscriberId">
                   
                    <summary>Obtain the subscriber id allocated to the event
                    </summary>
                    <returns> the subscriber id represented as an int value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setSubscriberId(System.Int32)">
                   
                    <summary>Set the subscriber id given to this event
                    </summary>
                    <param name="mySubId"> the byte array value representing the subscriber id of the event </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getJoinChannel">
                   
                    <summary>Obtain the join channel allocated to the event if the event was originally published via a channel join
                    </summary>
                    <returns> the joined channel represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getJoinRealm">
                   
                    <summary>Obtain the realm on which the join channel exists if the event was originally published via a channel join
                    </summary>
                    <returns> the joined channel's realm represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getJoinPath">
                   
                    <summary>Obtain the join path allocated to the event as it travels through the joined channels if the event was originally published via a channel join
                    </summary>
                    <returns> the join path of the event, represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getJoinEID">
                   
                    <summary>Obtain the eid of the original event from the join channel
                    </summary>
                    <returns> the eid of the event from the joined channel represented as a long value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getDeadEventChannel">
                   
                    <summary>Obtain the dead event store name allocated to the event if one exists
                    </summary>
                    <returns> the dead event store used by the channel from which this event came represented as a byte array value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getDeadEID">
                   
                    <summary>Obtain the id associated with the dead event, if the event is consumed from a stores used as a dead event store
                    </summary>
                    <returns> the dead event id </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.isRedelivered">
                   
                    <summary>Obtain whether this event has been redelivered. Only relevant for events delivered on queues
                    </summary>
                    <returns> if the event has already been delivered via the queue </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.getRedeliveredCount">
                   
                    <summary>Obtain the number of times the event has been redelivered. Only relevant for events delivered on queues
                    </summary>
                    <returns> the number of times the event has been redelivered via the queue </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.allowMerging">
            <summary>
            If this flag is true, the event will be merged with the existing event on this Channel / Data Group
            </summary>
            <returns>if event can be merged</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.setAllowMerge(System.Boolean)">
            <summary>
            Sets whether this event can be merged at the server for the Channel or Data Groups
            </summary>
            <param name="flag">true to permit the merge, false if not</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.isRegistered">
            <summary>
            Indicates if this event was created by a nRegisteredEvent
            </summary>
            <returns>true if this event comes from a nRegisteredEvent</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventAttributes.isDelta">
            <summary>
            Indicates if this event is a delta event
            </summary>
            <returns>true if this event is a delta derived from a registered event update, false if the event is a full event (snapshot)</returns>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nExceededLimitException">
               
                <summary> The number of events in the current transaction has exceeded the server
                configuration. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nExceededLimitException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nExceededLimitException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nIllegalChannelMode">
               
                <summary> This exception is thrown if a user tries calls queue specific functionality on a channel object
                or channel specific functionality on a queue object. </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIllegalChannelMode.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIllegalChannelMode.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nIllegalStateException">
            
             <summary> This exception is thrown if a Channel or Queue is in an illegal state for specific
             functionality to be offered. For example if a queue has a listener set and you attempt
             to set another listener, it will throw an instance of nIllegalStateException. </summary>
             <see cref="T:com.pcbsys.nirvana.client.nQueue"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIllegalStateException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIllegalStateException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="msg">Message string</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIllegalStateException.#ctor(System.String,System.Exception)">
            <summary>
            Creates the exception with the specified message and inner exception
            which resulted in an IllegalStateException
            </summary>
            <param name="msg">Message string</param>
            <param name="innerException">Inner exception</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nJoinInformation">
               
                <summary> This class is a container for all the information that defines a channel
                join. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nJoinInformation.#ctor(System.String,System.Int32,System.String,System.Boolean,System.Int64,System.Boolean,System.Boolean)">
                   
                    <summary> Constructs a nJoinInformation object containing all the required information to define a channel join.
                    </summary>
                    <param name="channelName"> The channel which this information relates to </param>
                    <param name="hopCount"> The number of hops before the event is expired </param>
                    <param name="selector"> The message select which controls which events are processed </param>
                    <param name="source"> If this channel is the source/destination </param>
                    <param name="lastEID"> The last EID processed for this join </param>
                    <param name="allowPurge"> Whether purges are propagated through this join </param>
                    <param name="archival"></param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nJoinInformation.getDestination">
                   
                    <summary> Returns the name of the channel destination channel is this channel is the source of the join
                    otherwise returns null
                    </summary>
                    <returns> String channel name </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nJoinInformation.getSource">
                   
                    <summary> Returns the name of the source channel if the channel is not the source of the join
                    otherwise returns null
                    </summary>
                    <returns> String channel name </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nJoinInformation.getSelector">
                   
                    <summary> Returns the selector string
                    </summary>
                    <returns> The message selector </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nJoinInformation.getHopCount">
                   
                    <summary> The number of hops before the event is expired
                    </summary>
                    <returns> int resend or hop count </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nJoinInformation.getLastEID">
                   
                    <summary> The last Event ID processed by this join
                    </summary>
                    <returns> long Event ID </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nJoinInformation.isSource">
                   
                    <summary> Is this the source for the join or are events sent to this channel
                    </summary>
                    <returns> bool flag </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nJoinInformation.allowPurgeRequests">
                   
                    <summary> Returns a bool indicating if purge requests are propagated over the join link </summary>
                    <returns> bool flag </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nJoinInformation.isArchival">
                   
                    <summary> Returns true if this join is an archival join
                    </summary>
                    <returns> boolean is archival </returns>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nMessageValidator">
               
                <summary> This interface defines the generic functionality that all Message
                Validators need to implement. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nMessageValidator.update(System.SByte[])">
                   
                    <summary> This method adds the byte[] to the signature being built up to validate against
                    </summary>
                    <param name="data"> byte[] to add to the signature </param>
                    <exception cref="T:System.Exception"> Specific to the actual signing implementation </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nMessageValidator.check(System.SByte[])">
                   
                    <summary> Compares the signature passed as a byte[] with the signature constructed with
                    the update methods. This method must throw an exception if the signatures do not
                    match and must not just return null. As a null is still a valid return object.
                    </summary>
                    <param name="original"> Signature byte[] </param>
                    <returns> Object specific to the validating class that can be used for further validation </returns>
                    <exception cref="T:System.Exception"> Must be thrown if the signature do not match </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nMessageValidator.start(System.SByte[])">
                   
                    <summary> This method is called on the validating class prior to any calls being made. It is not
                    mandatory that the implementing class do anything with the function.
                    </summary>
                    <param name="signature"> The signature to be validated </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nMessageValidator.stop">
                   
                    <summary> This method is called when the validation is completed. </summary>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nNameAlreadyBoundException">
               
                <summary> This exception is thrown if a user attempts to create a named client context
                on a channel or queue that is already in use. </summary>
                <see cref="T:com.pcbsys.nirvana.client.nNamedObject"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNameAlreadyBoundException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNameAlreadyBoundException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nNameDoesNotExistException">
               
                <summary> This exception is thrown if a user attempts to delete a named client context
                on a channel or queue that does not exist. </summary>
                <see cref="T:com.pcbsys.nirvana.client.nNamedObject"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNameDoesNotExistException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNameDoesNotExistException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nNameSpaceConflictException">
               
                <summary> There is a conflict in the name space and the attempted operation failed
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNameSpaceConflictException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nNameSpaceConflictException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueue">
            
              <summary> This class provides a Queue mechanism.
              It allows for multiple users to pop events from the queue and multiple
              users to push events on to the queue.
            
              However, a queue differs from a channel in that an event can only be popped
              by one user.  This means that an event is only delivered to one client.  While
              a channel it is delivered to all users who are subscribed.
            
              The queue also offers a peek method.  This method uses a window over the
              queue so that the entire queue does not need to be sent in one hit.
            
             <para>
             Four different Queue reading models are supported, these are
             </para>
             <c>Synchronous</c>
             <para>
                  Here the client will call <c>pop()</c> whenever the client wants to retrieve an event from the server. The
                  server will automatically acknowledge that the client has received this event.
             </para>
             <c>Synchronous Transactional</c>
             <para>
                  This is similar in operation to the Synchronous model, except the server does not auto acknowledge the events, this enables
                  the client to perform <c>commit()</c> or <c>rollback()</c> operations.
             </para>
             <c>Asynchronous</c>
             <para>
                  In this model the server will record that the client is interested in events from this queue and will maintain an outstanding
                  <c>pop()</c> and as events are received on the queue they are automatically delivered to the client via a callback. The events
                  are auto acknowledged on the server once they have been delivered to the client.
            </para>  
             <c>Asynchronous Transactional</c>
             <para>
                  This is similar in operation to the Asynchronous model, except the server does not auto acknowledge the events, this enables
                  the client to perform <c>commit()</c> or <c>rollback()</c> operations. The server will stop delivering events to this client
                  once the <c>WindowSize</c> has been reached, the client will need to call either <c>commit()</c> or <c>rollback()</c>
                  before events are delivered again.
            </para>
            In both transactional models, when a <c>rollback()</c> is called any events sent since the last <c>commit()</c> or <c>rollback()</c>
            will be redelivered to all registered clients. This means the client may not receive these events again, but rather, they are redistributed
            amongst the current clients. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.#ctor(com.pcbsys.nirvana.client.nChannelImpl)">
                   
              <summary> This method returns the current queue details.
              </summary>
              <returns> nQueueDetails to be examined </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> Client is not authorized to perform the
                                            request </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> The Queue does not exist </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                       connected to the server </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> The server did not respond within
                                                   the client timeout </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> The server responded with an
                                                      unknown response </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.getDetails">
            
             <summary> Provides additional information about this queue object </summary>
              <returns> a nQueueDetails object which can be queried to provide additional information about this queue object. </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.getName">
                   
              <summary> Gets the name of this queue.
              </summary>
              <returns> a string specifying the name of this channel </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.createReader(com.pcbsys.nirvana.client.nQueueReaderContext)">
                   
              <summary> Creates a Synchronous queue reader.
              Here the client will call <c>pop()</c> whenever the client wants to retrieve an event from the server. The
              server will automatically acknowledge that the client has received this event.
              </summary>
              <param name="context"> contains the readers context to be used during construction of the reader </param>
              <returns> nQueueSyncReader </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the context is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.createFragmentReader(com.pcbsys.nirvana.client.nQueueReaderContext)">
                   
              <summary> Creates a Synchronous queue reader that supports event fragments.
              Here the client will call <c>pop()</c> whenever the client wants to retrieve an event from the server. The
              server will automatically acknowledge that the client has received this event.
              </summary>
              <param name="context"> contains the readers context to be used during construction of the reader </param>
              <returns> nQueueSyncReader </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the context is null </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.createTransactionalReader(com.pcbsys.nirvana.client.nQueueReaderContext)">
            
             <summary> Creates a Synchronous Transaction queue reader.
               This is similar in operation to the Synchronous model, except the server does not auto acknowledge the events, this enables
               the client to perform <c>commit()</c> or <c>rollback()</c> operations.
               </summary>
               <param name="context"> contains the readers context to be used during construction of the reader </param>
               <returns> nQueueSyncTransactionReader </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the context is null </exception>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.createTransactionalFragmentReader(com.pcbsys.nirvana.client.nQueueReaderContext)">
            
             <summary> Creates a Synchronous Transaction queue reader that supports event fragments.
               This is similar in operation to the Synchronous model, except the server does not auto acknowledge the events, this enables
               the client to perform <c>commit()</c> or <c>rollback()</c> operations. 
               </summary>
               <param name="context"> contains the readers context to be used during construction of the reader </param>
               <returns> nQueueSyncTransactionReader </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the context is null </exception>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.createAsyncReader(com.pcbsys.nirvana.client.nQueueReaderContext)">
                   
              <summary> Creates an Asynchronous queue reader.
              In this model the server will record that the client is interested in events from this queue and will maintain an outstanding
              <c>pop()</c> and as events are received on the queue they are automatically delivered to the client via a callback. The events
              are auto acknowledged on the server once they have been delivered to the client.
              </summary>
              <param name="context"> contains the readers context to be used during construction of the reader </param>
              <returns> nQueueAsyncReader </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the context is null or some non specified error is found</exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> if the subject does not have the correct permissions </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.createAsyncTransactionalReader(com.pcbsys.nirvana.client.nQueueReaderContext)">
                   
              <summary> Creates an Asynchronous Transactional queue reader.
              This is similar in operation to the Asynchronous model, except the server does not auto acknowledge the events, this enables
              the client to perform <c>commit()</c> or <c>rollback()</c> operations. The server will stop delivering events to this client
              once the <c>WindowSize</c> has been reached, the client will need to call either <c>commit()</c> or <c>rollback()</c>
               before events are delivered again. </summary>
              <param name="context"> contains the readers context to be used during construction of the reader </param>
              <returns> nQueueAsyncTransactionReader </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the context is null or some non specified error is found </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> if the subject does not have the correct permissions </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.destroyReader(com.pcbsys.nirvana.client.nQueueReader)">
                   
              <summary> This call will release any outstanding resources on the server and close the reader. Any future calls to this
              object will result in an nIllegalStateException being raised.
              </summary>
              <param name="reader">  The reader to close </param>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> if the server returns a response that was not expected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if the session is currently not connected to the server </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request did not receive a response within the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.destroyReaderLocally(com.pcbsys.nirvana.client.nQueueReader)">
                   
              <summary> This call will close local reader resources but remain subscribed at the server Any future calls to this
              object will work unless destroyReader() is called
              </summary>
              <param name="reader">  The reader to close </param>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> if the server returns a response that was not expected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> if the session is currently not connected to the server </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request did not receive a response within the timeout period </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.getQueueAttributes">
                   
              <summary> This method will return the nChannelAttributes associated with the nQueue object
              </summary>
              <returns> the nChannelAttributes for the nQueue object </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.purge">
                   
               <summary> Deletes all undelivered events from the queue.
               </summary>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> The client is not authorized to perform
                                             this task </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> The Queue could not be found </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                        connected to the server </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> The server did not respond within
                                                    the timeout </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> The server responded with an
                                                       unknown response </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
               
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.purge(System.String)">
                   
               <summary> Deletes all undelivered events from the queue. </summary>
               <param name="selector"> Purges all events which match this filter
               </param>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> The client is not authorized to perform
                                             this task </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException"> The Queue could not be found </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                        connected to the server </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> The server did not respond within
                                                    the timeout </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> The server responded with an
                                                       unknown response </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
               
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.push(com.pcbsys.nirvana.client.nConsumeEvent)">
                   
               <summary> Pushes an event on to the queue.
               </summary>
               <param name="e"> nConsumeEvent to push </param>
               <returns> an unique ID for the event on the queue </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> If the event is null </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to publish to the
                                             queue </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> If the server failed to responded </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                        connected to the server </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
               
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.size">
                   
              <summary> Returns the number of events waiting in the queue.
              </summary>
              <returns> int size of the queue </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.addConnectionListener(com.pcbsys.nirvana.client.nChannelConnectionListener)">
                   
              <summary> Adds a nChannelConnectionListener to this queue so that when new connections are made to this queue the
              listener is notified
              </summary>
              <param name="listener"> to add
              </param>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Passed am illegal argument. This means the value passed is outside expected limits, or has already been set. </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueue.removeConnectionListener(com.pcbsys.nirvana.client.nChannelConnectionListener)">
                   
              <summary> Removes the connection listener to this queue
              </summary>
              <param name="listener"> remove the listener
              </param>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> if the request exceeded the timeout value </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> The session is not currently connected to the server </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException"> Received a response from the server for which we can not deal with, see the message for further information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueAsyncReader">
               
                <summary> This Reader enables the client to receive all events asynchronous. The callback method was passed as part of the
                nQueueReaderContext. This class provides no <code>pop</code> methods, since it is all asynchronous delivery. </summary>
                
        </member>
        <member name="F:com.pcbsys.nirvana.client.nQueueAsyncReader.ASYNC_READER_ID">
            <summary>
            Unique identifier for asynchronous readers.
            Use a constant value for all asynchronous readers, since there will be at most one such reader in a session
            and the server will need to distinguish that from any synchronous readers in the same session.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueAsyncReader.close">
                   
                    <summary> Close the subscription, and notify the server </summary>
                    
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nQueueAsyncReader.pauseReader" -->
        <member name="M:com.pcbsys.nirvana.client.nQueueAsyncReader.resumeReader">
                    
                    <summary>
                    Resumes the subscription of the nQueueAsyncReader.
                    </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueAsyncReader.isPaused">
                    
                    <summary>
                    Returns true if the subscription of the reader is currently paused. False otherwise.
                    </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueAsyncReader.closeLocally">
                   
                    <summary> Close the subscription, but do not notify the server </summary>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueAsyncTransactionReader">
               
                <summary> This Reader enables the client to receive all events asynchronous. The callback method was passed as part of the
                nQueueReaderContext. This class provides no <code>pop</code> methods, since it is all asynchronous delivery. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueAsyncTransactionReader.commit">
                   
                    <summary> Commits all received events so far.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueAsyncTransactionReader.commit(System.Int64)">
                   
                    <summary> Commits all events up to the event id specified. This means you can partially commit received events.
                    </summary>
                    <param name="eventId"> Event ID to commit to, inclusive </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueAsyncTransactionReader.rollback">
                   
                    <summary> Rolls back all received events that have not been committed or rolled back previously. These events are then pushed back onto
                    the queue for redelivery.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueAsyncTransactionReader.rollback(System.Int64)">
                   
                    <summary> Rolls back all events up to the specified event id that have not been committed or rolled back previously. These events are then pushed back onto
                    the queue for redelivery.
                    </summary>
                    <param name="eventId"> Event Id to rollback to, inclusive </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException"> </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> </exception>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueDetails">
               
                <summary> Container class, containing statistics on the queue </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueDetails.getNoOfReaders">
                   
                    <summary> Retrieves the total number of readers on this queue
                    </summary>
                    <returns> The current number of readers on the queue as an int </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueDetails.getNoOfEvents">
                   
                    <summary> Retrieves the total number of events in this queue
                    </summary>
                    <returns> The current number of events on the queue </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueDetails.getTotalMemorySize">
                   
                    <summary> Retrieves the total size in bytes the queue currently consumes
                    </summary>
                    <returns> total size in bytes the queue currently consumes </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueDetails.getFirstEventTime">
                   
                    <summary> Retrieves the timestamp of the first event in this queue
                    </summary>
                    <returns> The timestamp of the first event in the queue as a long </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueDetails.getLastEventTime">
                   
                    <summary> Retrieves the timestamp of the last event in this queue </summary>
                    <returns> The timestamp of the last event in the queue as a long </returns>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueuePeekContext">
               
                <summary> Provides a context when peeking on the queue.
                Useful when multiple calls are required to traverse the entire queue. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.#ctor">
                   
                    <summary> Default constructor that creates a queue peek context. </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.#ctor(System.Int32)">
                   
                    <summary> Creates a queue peek context with the specified window size.
                    </summary>
                    <param name="windowSize"> Number of events which will be delivered to the client per lookup </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.#ctor(System.Int32,System.String)">
                   
                    <summary> Creates a queue peek context with the specified window size and message
                    selector to filter events with.
                    </summary>
                    <param name="windowSize"> Number of events which will be delivered to the client per lookup </param>
                    <param name="selector"> Message selector to apply to the events </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.hasMore">
                   
                    <summary> Returns a boolean indicating if there are any more events in the queue. </summary>
                    <returns> true if more </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.getIndex">
                   
                    <summary> Returns the index into the queue that the context is up to.
                    </summary>
                    <returns> current index </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.setIndex(System.Int32)">
                   
                    <param name="idx"> Index value to set </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.getWindowSize">
                   
                    <summary> Retrieves the size of the window used by this queue peek context.
                    </summary>
                    <returns> The size of the window </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.setWindowSize(System.Int32)">
                   
                    <summary> Sets the size of the window.
                    </summary>
                    <param name="size"> A size greater than 0 </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.setHasMore(System.Boolean)">
                   
                    <summary> Sets the flag to true if more events in the queue. (Server specific).
                    </summary>
                    <param name="flag"> to specify whether there are more events to come </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueuePeekContext.getSelector">
                   
                    <summary> Retrieves the message selector (if any) set to filter events on this peek context.
                    </summary>
                    <returns> the selector used by this context </returns>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueReaderContext">
            
             <summary> This class is used to construct a Queue Reader. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.#ctor">
            
             <summary> Default constructor, useful for creating a standard synchronous queue reader. </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.#ctor(System.String)">
                   
              <summary> This constructor supports a standard synchronous queue reader with the message selector applied.
              </summary>
              <param name="selector"> Message selector to be applied to the events prior to being delivered to the client </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.#ctor(com.pcbsys.nirvana.client.nEventListener)">
            
             <summary> This constructor supports an asynchronous queue reader, if applied to a synchronous queue reader the listener is ignored.
             When applied as an asynchronous queue reader the window size will default to 1.
             </summary>
             <param name="aListener"> Asynchronous callback object </param>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.#ctor(com.pcbsys.nirvana.client.nEventListener,System.Int32)">
                   
              <summary> This constructor supports an asynchronous queue reader, if applied to a synchronous queue reader the listener is ignored.
              </summary>
              <param name="aListener"> Asynchronous callback object </param>
              <param name="windowSize"> Number of events that the server will deliver prior to expecting a commit or rollback </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.#ctor(com.pcbsys.nirvana.client.nEventListener,System.String)">
            
             <summary> This constructor supports an asynchronous queue reader, if applied to a synchronous queue reader the listener is ignored.
             The message selector will be applied to all events prior to being delivered to the client from the server.
             </summary>
             <param name="aListener"> Asynchronous callback object </param>
             <param name="selector"> Message selector to be applied to the events prior to being delivered to the client </param>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.#ctor(com.pcbsys.nirvana.client.nEventListener,System.String,System.Int32)">
            
             <summary> This constructor supports an asynchronous queue reader, if applied to a synchronous queue reader the listener is ignored.
             The message selector will be applied to all events prior to being delivered to the client from the server.
             </summary>
             <param name="aListener"> Asynchronous callback object </param>
             <param name="selector"> Message selector to be applied to the events prior to being delivered to the client </param>
             <param name="windowSize"> Number of events that the server will deliver prior to expecting a commit or rollback </param>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.getSelector">
                   
              <summary> Returns the current selector that this context was constructed with, could be null. </summary>
              <returns> Message Selector </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.setSelector(System.String)">
                   
              <summary> Sets the message selector. If the reader has already been created this method does nothing.
              If the reader is an asynchronous queue reader then the existing reader must
              be destroyed and recreated before this selector will take effect else the next <code>pop</code> will take this
              into account
              </summary>
              <param name="selector"> a Message selector </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.getListener">
                   
              <summary> Returns the current event listener being used
              </summary>
              <returns> current listener </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.setListener(com.pcbsys.nirvana.client.nEventListener)">
                   
              <summary> Sets the current listener. This has no effect if the reader has been created prior to calling this method. The reader
              will need to be destroyed and recreated.
              </summary>
              <param name="listener"> Event listener. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.getPeekBatchSize">
            <summary>
            Returns the current peek batch size, used only for synchronous queue readers
            </summary>
            <returns>the number of events per pop taken in a batch</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.setPeekBatchSize(System.Int32)">
            <summary>
            Sets the current peek batch size, used only for synchronous queue readers.
            </summary>
            <param name="peekBatchSize">the number of events to fetch when doing a pop</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.getValidator">
                   
              <summary> Retrieves the current message validator. This could be null.
              </summary>
              <returns> Message Validator </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.setValidator(com.pcbsys.nirvana.client.nMessageValidator)">
                   
              <summary> Sets the current message validator. It has no effect if the reader is an asynchronous queue reader and the reader will
              need to be destroyed and recreated prior to this taking effect. If the reader is an synchronous queue reader the next
              event popped will use the message validator.
              </summary>
              <param name="validator"> The message validator to use. </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.getWindow">
                   
              <summary> Retrieves the current window size. This is the number of events the server will send prior to expecting an <code>rollback</code>
              or a <code>commit</code>. No more events will be sent when this number is reached an no call is made.
              </summary>
              <returns>  current window size </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.setWindow(System.Int32)">
                   
              <summary> Sets the window size. This function has no effect on synchronous readers and if the asynchronous reader is constructed prior
              to this method then it will not take effect until the reader is destroyed and recreated.
              </summary>
              <param name="window"> the window size to use </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.canMaintainPriority">
            <summary>
            Returns whether the queue has a priority order where only 1 consumer at a time will consume from the queue
            </summary>
            <returns>True if priority is set</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueReaderContext.setMaintainPriority(System.Boolean)">
            <summary>
            Sets whether the reader will observe the priority ordering where only 1 consumer will actively consume events
            </summary>
            <param name="flag">true / false to set the priority flag</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueSyncReader">
               
                <summary> This class provides the client with an synchronous interface into a Nirvana Queue. Events will only be delivered to this
                client when a call to <code>pop</code> is made.
                </summary>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncReader.#ctor(com.pcbsys.nirvana.client.nQueue,com.pcbsys.nirvana.client.nQueueReaderContext)">
                   
                    <summary> This method places the client on the queue and will block until an event
                    is placed onto the queue.
                    </summary>
                    <returns> The popped event </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncReader.pop">
            
                     <summary> This method places the client on the queue and will block until an event is placed onto the queue. </summary>
                     <returns> The popped event</returns>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                              connected to the server </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncReader.pop(System.Int64)">
                   
                    <summary> This method places the client on the queue and will block until an event
                    is placed onto the queue or the specified timeout expires.
                   
                    If the timeout expires it will return null
                    </summary>
                    <param name="timeout"> Time to wait in milliseconds for an event </param>
                    <returns> The popped event or null if the timeout expired </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                             connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncReader.pop(System.Int64,System.String)">
                   
                    <summary> This method places the client on the queue and will block until an event
                    is placed onto the queue or the specified timeout expires.
                   
                    If the timeout expires it will return null
                    </summary>
                    <param name="timeout"> Time to wait in milliseconds for an event </param>
                    <param name="selector"> the selection string used to filter events being popped </param>
                    <returns> The popped event or null if the timeout expired </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                             connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncReader.popEvents(System.Int32)">
                   
                    <summary> This method places the client on the queue and will block until an event
                    is placed onto the queue or the specified timeout expires.
                   
                    If the timeout expires it will return null
                    </summary>
                    <param name="prefetchSize">The number of events being popped. </param>
                   
                    <returns> The popped events or null if the timeout expired </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                             connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> This exception is raised if prefetchSize is less than 1 </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncReader.popEvents(System.Int32,System.Int64)">
                   
                    <summary> This method places the client on the queue and will block until an event
                    is placed onto the queue or the specified timeout expires.
                   
                    If the timeout expires it will return null
                    </summary>
                    <param name="prefetchSize">The number of events being popped. </param>
                    <param name="timeout"> Time to wait in milliseconds for an event </param>
                    <returns> The popped events or null if the timeout expired </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                             connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> This exception is raised if prefetchSize is less than 1 </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncReader.popEvents(System.Int32,System.Int64,System.String)">
                   
                    <summary> This method places the client on the queue and will block until an event
                    is placed onto the queue or the specified timeout expires.
                   
                    If the timeout expires it will return null
                    </summary>
                    <param name="prefetchSize"> The number of events being popped. </param>
                    <param name="timeout"> Time to wait in milliseconds for an event </param>
                    <param name="selector"> the selection string used to filter events being popped </param>
                    <returns> The popped events or null if the timeout expired </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently
                                                             connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> This exception is raised if prefetchSize is less than 1 </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException"> If your not authorized to perform the operation on the queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncReader.close">
            <summary>
            Close the reader and the server subscription
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncReader.closeLocally">
            <summary>
            Close the reader locally which will n ot result in any rollback of transactional readers 
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nQueueSyncTransactionReader">
               
                <summary> This reader provides a synchronous queue reader model. Where the client can <code>pop()</code> events from the queue and then decide
                either to commit the event, i.e. successfully processed it or to rollback, i.e. unable to process this event.
                
                When the window size is reached and the client has yet to call commit or rollback the server will raise an exception
                on the <code>pop()</code> command until the client has called either method. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncTransactionReader.commit">
                   
                    <summary> Commits all received events so far.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncTransactionReader.commit(System.Int64)">
                   
                    <summary> Commits all events up to the event id specified. This means you can partially commit received events.
                    </summary>
                    <param name="eventId"> Event ID to commit to, inclusive </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncTransactionReader.rollback">
                   
                    <summary> Rolls back all received events that have not been committed or rolled back previously. These events are then pushed back onto
                    the queue for redelivery.
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nQueueSyncTransactionReader.rollback(System.Int64)">
                   
                    <summary> Rolls back all events up to the specified event id that have not been committed or rolled back previously. These events are then pushed back onto
                    the queue for redelivery.
                    </summary>
                    <param name="eventId"> Event Id to rollback to, inclusive </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Client is not currently connected to the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalStateException"> The operation could not complete because of a session/connection error </exception>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nRealm">
               
                <summary> This class represents a nirvana Realm </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealm.#ctor">
                   
                    <summary> Default constructor </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealm.#ctor(System.String,System.String[])">
                   
                    <summary> Constructs a new nRealm object with the specified name and collection of network interfaces
                    </summary>
                    <param name="pName"> A string specifying the realm's name </param>
                    <param name="connections"> An array of strings specifying the realm's network interfaces.
                    These have to be in the form: protocol://host:port/servlet File , where:
                    
                    Protocol can be one of nsp, nhp, nsps, nhps where:
                    
                    nsp =&gt; Nirvana Socket Protocol
                    nhp =&gt; Nirvana HTTP Protocol
                    nsps =&gt; Nirvana Socket Protocol Secure (Socket protocol over SSL/TLS)
                    nhps =&gt; Nirvana HTTP Protocol Secure (HTTP protocol over SSL/TLS)
                    
                    Host is the host the realm is running on
                    
                    Port is the port the realm is listening on
                    
                    servlet File specifies the location that servlets are mapped if talking to
                    the realm via a web server (e.g. in a DMZ environment)
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the parameters are invalid, refer to the exception message for more information </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealm.#ctor(System.String,System.Collections.Generic.List{com.pcbsys.foundation.drivers.fConnectionDetails})">
                   
                    <summary> Constructs a new nRealm object with the specified name and collection of network interfaces
                    </summary>
                    <param name="pName"> A string specifying the realm's name </param>
                    <param name="connections"> A list of fConnectionDetails objects. These are created
                    using strings specifying the realm's network interfaces.
                    The strings have to be in the form: protocol://host:port/servlet File , where:
                    Protocol can be one of nsp, nhp, nsps, nhps where:
                    
                    nsp =&gt; Nirvana Socket Protocol
                    nhp =&gt; Nirvana HTTP Protocol
                    nsps =&gt; Nirvana Socket Protocol Secure (Socket protocol over SSL/TLS)
                    nhps =&gt; Nirvana HTTP Protocol Secure (HTTP protocol over SSL/TLS)
                    
                    Host is the host the realm is running on
                    
                    Port is the port the realm is listening on
                    
                    servlet File specifies the location that servlets are mapped if talking to
                    the realm via a web server (e.g. in a DMZ environment)
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the parameters are invalid, refer to the exception message for more information </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealm.getConnections">
                   
                    <summary> Gets the collection of the network interfaces this realm listens in.
                    </summary>
                    <returns> A list containing an Strings of rnames for each realm interface. </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealm.getName">
                   
                    <summary> Gets the name of this realm
                    </summary>
                    <returns> A string specifying the name of this realm </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealm.setName(System.String)">
                   
                    <summary> Sets the name on this realm
                    </summary>
                    <param name="pData"> a string specifying the name of this realm
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Illegal parameter, check the message for more information </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealm.getMountPoint">
                   
                    <summary> Returns the relative name of the realm within the namespace
                    </summary>
                    <returns> String mount point name </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealm.setMountPoint(System.String)">
                   
                    <summary> Sets the relative name for the realm within the namespace
                    </summary>
                    <param name="mountPoint"> the name to add this realm in the namespace
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Illegal parameter, check the message for more information </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealm.getProtocols">
                   
                    <summary> Returns an array of Strings with the rnames for this realm
                    </summary>
                    <returns> the Protocols, or rnames, supported by this realm </returns>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nRealmAlreadyBoundException">
               
                <summary> You have tried to bind a realm that the server already has been bound. If this
                is unexpected then check the current server configuration.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealmAlreadyBoundException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealmAlreadyBoundException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nRealmInUseException">
               
                <summary> This exception is thrown when an attempt is made to remove a realm from another
                realm when the realm is part of a cluster or has channels that are joined in the requesting realm
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nRealm"/>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealmInUseException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealmInUseException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nRealmNotFoundException">
               
                <summary> The specified realm was not found on the server. This could mean that the
                realm was either deleted on the server or has not been added.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealmNotFoundException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealmNotFoundException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nRealmUnreachableException">
               
                <summary> Was unable to reach the specified realm. This could mean that the network is
                down or the realm is unreachable.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealmUnreachableException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRealmUnreachableException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nRequestTimedOutException">
            
             <summary>
             When the maximum time the client API will wait for a response to a specific
             request from the Nirvana realm, this exception is thrown. The default value
             is 60 secs and typically if you get this exception the cause would be:
             
             <para>
             1. There is a protocol mismatch between the client library in use and server
             you are connected to.
             </para>
             <para>
             2. The realm is really so busy that has not managed to respond to your request
             within the specified maximum interval.
             </para>
             </summary>
             <see cref="T:com.pcbsys.nirvana.client.nSession"/>
             <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
             <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nRequestTimedOutException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSecurityException">
               
                <summary> This class defines the security errors that can be thrown by using the nirvana client API </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSecurityException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message"> Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSelectorParserException">
               
                <summary> The supplied message filter string failed to be parsed. The attached message
                contains the actual parser error.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSelectorParserException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSelectorParserException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSessionAlreadyInitialisedException">
               
                <summary> The current nSession has already been initialised
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionAlreadyInitialisedException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionAlreadyInitialisedException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">
               
                <summary> The current nSession is not currently connected. This could be caused by the
                network being down or the server.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                <see cref="T:com.pcbsys.nirvana.client.nChannel"/>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionNotConnectedException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionNotConnectedException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSubject">
               
                <summary> This class contains information about the user identification used by Nirvana </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.#ctor(com.pcbsys.foundation.security.fSubject)">
            <summary>
            Create a new nSubject using another subject instance
            </summary>
            <param name="sub">subject instance</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.#ctor(com.pcbsys.foundation.security.fAclGroup)">
            <summary>
            Create a new nSubject using an AclGroup instance
            </summary>
            <param name="grp">acl group instance</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.#ctor(System.String)">
            <summary>
            Create a new nSubject using a key of user@host
            </summary>
            <param name="sub">user@host string</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.getHost">
                   
                    <summary> The host name for this subject. This can mean the host of the local machine
                    </summary>
                    <returns> String hostname </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.getUser">
                   
                    <summary> The username being used by this subject
                    </summary>
                    <returns> String username </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.Equals(com.pcbsys.nirvana.client.nSubject)">
            <summary>
            Determines whether this instance and another specified nSubject object
            have same internal values
            </summary>
            <param name="obj">An nSubject instance</param>
            <returns> true if the value of the value parameter is the same as this instance;
            otherwise, false
            </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.ToString">
                   
                    <summary> Converts this object into a string
                    </summary>
                    <returns> String representation of this subject </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.CompareTo(System.Object)">
            <summary>
            Compares this subject instance with specified subject instance
            </summary>
            <param name="obj">subject instance</param>
            <returns>
            A integer that indicates whether this instance precedes, follows,
            or appears in the same position in the sort order as the value parameter.
            Value Condition Less than zero - This instance precedes obj.
            Zero This instance has the same position in the sort order as obj.
            Greater than zero This instance follows obj.-or- obj is null.
            </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.getName">
            <summary>
            The Name being used by this subject
            </summary>
            <returns>String name</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSubject.getSubject">
             <summary>
            
             </summary>
             <returns>Returns the subject instance</returns>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nTransactionNoSuchTXIDException">
               
                <summary> The supplied transaction ID could not be located on server. This could be that
                the transaction has expired.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nTransaction"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionNoSuchTXIDException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nTransactionNoSuchTXIDException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">
               
                <summary> The server responded with an event that the client did not expect. This typically
                means that the client / server versions are out of step. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nUnexpectedResponseException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nUnexpectedResponseException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">
               
                <summary> The server does not know of the realm that was supplied.
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nSession"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nUnknownRemoteRealmException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nUnknownRemoteRealmException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nUserNotSubscribedException">
               
                <summary> The user is not currently subscribed to the channel/ </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nUserNotSubscribedException.#ctor">
            <summary>
            Creates the exception with the default message
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nUserNotSubscribedException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="message">Message string</param>
        </member>
        <member name="T:MyChannels.Nirvana.IProducer">
            <summary>
            Defines an object that can publish messages to the realm.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IProducer.CreateTransaction">
            <summary>
            Create a transaction
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProducer.CreateTransaction(System.TimeSpan)">
            <summary>
            Create a transaction
            </summary>
            <param name="commitTimeout">Amount of time allowed to elapse before the transaction will timeout</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProducer.Send(MyChannels.Nirvana.IMessage)">
            <summary>
            Send a message (non-transactional)
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProducer.Purge(System.Int64)">
            <summary>
            Purge a single message.
            </summary>
            <remarks>
            Only supported by Topics (Channels)
            </remarks>
            <param name="eventId">The event id of the message you'd like to purge.</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProducer.Purge(System.Int64,System.Boolean)">
            <summary>
            Purge a single message.
            </summary>
            <remarks>
            Only supported by Topics (Channels)
            </remarks>
            <param name="eventId">The event id of the message you'd like to purge.</param>
            <param name="purgeJoins">a Boolean specifying if the event will be removed from all subsequent joins.</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProducer.Purge">
            <summary>
            Purge all events
            </summary>
            <remarks>
            Supported by Queues and Topics (Channels)
            </remarks>
        </member>
        <member name="M:MyChannels.Nirvana.IProducer.Purge(System.String)">
            <summary>
            Purge all events matching the specified filter.
            </summary>
            <remarks>
            Supported by Queues and Topics (Channels)
            </remarks>
            <param name="filter">A filter which will be used to purge only the events which match this criteria.</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProducer.Purge(System.Int64,System.Int64)">
            <summary>
            Purge a range of events.
            </summary>
            <remarks>
            Only supported by Topics (Channels)
            </remarks>
            <param name="startId">a long specifying the start event id of the range of events to be purged from the channel.</param>
            <param name="endId">a long specifying the end event id of the range of events to be purged from the channel.</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProducer.Purge(System.Int64,System.Int64,System.String)">
            <summary>
            Purge a range of events matching the specified filter.
            </summary>
            <remarks>
            Only supported by Topics (Channels)
            </remarks>
            <param name="startId">a long specifying the start event id of the range of events to be purged from the channel.</param>
            <param name="endId">a long specifying the end event id of the range of events to be purged from the channel.</param>
            <param name="filter">A filter which will be used to purge only the events which match this criteria.</param>
        </member>
        <member name="P:MyChannels.Nirvana.IProducer.Destination">
            <summary>
            The destination of the messages
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.ITransaction">
            <summary>
            Defines an object that allows sending of messages in a transactional manner.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.ITransaction.Send(MyChannels.Nirvana.IMessage)">
            <summary>
            Send a message in the transaction
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:MyChannels.Nirvana.ITransaction.Commit">
            <summary>
            Commit the transaction
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.ITransaction.Rollback">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.IConsumer">
            <summary>
            Defines an object that receive messages from the realm.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IConsumer.GetSynchronousReader(System.TimeSpan)">
            <summary>
            Creates a synchronous message reader.
            </summary>
            <example>
            var messages = consumer.GetSynchronousReader(TimeSpan.FromMinutes(1))
            foreach (var message in messages)
            {
                // process message
            }
            </example>
            <param name="timeout">The maximum time allowed to expire in between receiving messages.</param>
            <returns></returns>
        </member>
        <member name="P:MyChannels.Nirvana.IConsumer.Destination">
            <summary>
            The destination being consumed
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.IConsumer.MessageReceived">
            <summary>
            Event handler used to asynchronously receive messages.
            </summary>
            <example>
            consumer.MessageReceived += (sender, message) => { /*Process Message */ };
            </example>
        </member>
        <member name="T:MyChannels.Nirvana.IBatchedSubscription">
            <summary>
            Allows the caller to efficiently subscribe to many topics
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IBatchedSubscription.CreateConsumer(System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            Creates a Topic consumer.
            </summary>
            <param name="name">The name of the topic</param>
            <param name="filter">The event filter (channel key)</param>
            <param name="eventId">The event id you would like to start at.</param>
            <param name="subscribeToPurge">The consumer will receive purge events</param>
        </member>
        <member name="M:MyChannels.Nirvana.IBatchedSubscription.Execute">
            <summary>
            Subscribe to all of the consumers in the batch
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.ITransactionalConsumer">
            <summary>
            Defines a consumer that receives messages in a transactional manner.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.ITransactionalConsumer.Commit">
            <summary>
            When in Transactional mode, the Commit() call will acknowledge all messages consumed by the Consumer up to the point in which
            the Commit call is made.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:MyChannels.Nirvana.ITransactionalConsumer.Commit(MyChannels.Nirvana.IMessage)">
            <summary>
            In Transactional mode, this Commit call will acknowledge the receipt of the Message to the Nirvana server
            </summary>
            <param name="message">The Message to acknowledge / commit</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:MyChannels.Nirvana.ITransactionalConsumer.Rollback">
            <summary>
            Rollback all current unacknowledged messages consumed by the Consumer
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:MyChannels.Nirvana.ITransactionalConsumer.Rollback(MyChannels.Nirvana.IMessage)">
            <summary>
            Rollback the Message. This method will effectively unacknowledged the Message, and any previous unacknowledged messages.
            </summary>
            <param name="message">The Message to acknowledge</param>
            <returns>true if successful</returns>
        </member>
        <member name="T:MyChannels.Nirvana.IBatch">
            <summary>
            Allows the caller to perform a batch of operations on Nirvana resources.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IBatch.Send(MyChannels.Nirvana.IMessage)">
            <summary>
            Send a message to a resource.
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="M:MyChannels.Nirvana.IBatch.Send(System.String,MyChannels.Nirvana.IMessage)">
            <summary>
            Send a message to a resource.
            </summary>
            <param name="resource">The resource identifier</param>
            <param name="message">The message</param>
        </member>
        <member name="M:MyChannels.Nirvana.IBatch.Execute(System.Boolean)">
            <summary>
            Execute all the operations in the batch.
            </summary>
            <param name="waitForResponse">True: synchronous, False: asynchronous</param>
        </member>
        <member name="T:MyChannels.Nirvana.IDataGroup">
            <summary>
            Defines a Data Group
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.CreateDataGroup(System.String)">
            <summary>
            Create a new data group and automatically add it to this group
            </summary>
            <param name="name">The name of the data group</param>
            <returns>The new data group</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.CreateDataGroup(System.String,MyChannels.Nirvana.ConflationBehaviour,System.TimeSpan)">
            <summary>
            Create a conflated data group and automatically add it to this group
            </summary>
            <param name="name">The name of the data group</param>
            <param name="behaviour">The conflation behaviour</param>
            <param name="interval">The conflation interval</param>
            <returns>The new data group</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.CreateRegisteredEvent">
            <summary>
            Create a registered event for this data group
            </summary>
            <returns>The registered event</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.AddDataGroup(MyChannels.Nirvana.IDataGroup)">
            <summary>
            Add a "child" group
            </summary>
            <param name="group">The group you would like to add as a child</param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.AddPublisher(System.String)">
            <summary>
            Add a publisher to the data group.
            Allows the specified subject to publish messages to the group.
            </summary>
            <param name="subject">The subject</param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.AddStream(MyChannels.Nirvana.IDataStream)">
            <summary>
            Allow's the specified stream to receive messages from this data group
            </summary>
            <param name="stream">The stream</param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.AddStream(System.String)">
            <summary>
            Allow's the specified stream to receive messages from this data group 
            </summary>
            <param name="streamId">The stream's Id</param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.RemoveDataGroup(MyChannels.Nirvana.IDataGroup)">
            <summary>
            Remove a "child" group
            </summary>
            <param name="group">The "child" group you'd like to remove</param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.RemovePublisher(System.String)">
            <summary>
            Remove a publish from the data group.
            The specified subject will no longer be able to publish messages to the group.
            </summary>
            <param name="subject">The subject</param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.RemoveStream(MyChannels.Nirvana.IDataStream)">
            <summary>
            Remove a stream from the group.
            The specified stream will no longer receive messages from this data group.
            </summary>
            <param name="stream">The stream</param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.RemoveStream(System.String)">
            <summary>
            Remove a stream from the group.
            The specified stream will no longer receive messages from this data group.
            </summary>
            <param name="streamId">The stream.</param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroup.Send(MyChannels.Nirvana.IMessage)">
            <summary>
            Send a message (non-transactional)
            </summary>
            <param name="message">The message</param>
        </member>
        <member name="P:MyChannels.Nirvana.IDataGroup.Children">
            <summary>
            Messages published to this Data Group will also be published to it's children.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IDataGroup.Parents">
            <summary>
            Messages published the parent(s) will also be published to this Data Group.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IDataGroup.Name">
            <summary>
            The name of this Data Group.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IDataGroup.Publishers">
            <summary>
            List of subjects that are allow to publish messages to this Data Group.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IDataGroup.Streams">
            <summary>
            List of streams listening to this Data Group.
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.IDataGroupBatch">
            <summary>
            Allows the caller to perform a batch of data group operations.
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.IRegisteredEventBatch">
            <summary>
            Allows the caller to send registered events in a batch.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IRegisteredEventBatch.Send(MyChannels.Nirvana.IRegisteredEvent,System.Boolean)">
            <summary>
            Commit the changes to a registered event.
            </summary>
            <param name="re">The registered event</param>
            <param name="replace">True: Replace any existing event state, False: Merge the contents of this event into the contents on the realm server.</param>
        </member>
        <member name="T:MyChannels.Nirvana.IDataStream">
            <summary>
            Defines a data stream object.
            A data stream is used to deliver data directly to a realm session.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IDataStream.Send(MyChannels.Nirvana.IMessage,System.Boolean)">
            <summary>
            Send a message
            </summary>
            <param name="message">The message</param>
            <param name="waitForResponse">Synchronous or Asynchronous</param>
        </member>
        <member name="P:MyChannels.Nirvana.IDataStream.Name">
            <summary>
            The unique stream Id
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IDataStream.Subject">
            <summary>
            The session's subject (username)
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.ISession">
            <summary>
            Defines a nirvana session object.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.ISession.Initialize">
            <summary>
            Connect to the realm
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISession.Settings">
            <summary>
            Settings used to establish a connection to the realm.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISession.Subject">
            <summary>
            The callers Subject (user@host)
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISession.Topics">
            <summary>
            Create producer or consumer for a Topic
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISession.Queues">
            <summary>
            Create producer or consumer for a Queue
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISession.DataGroups">
            <summary>
            Subscribe to and administer Direct Data Delivery
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.ISession.AsynchronousExceptionRaised">
            <summary>
            Raises an event if the session has any internal communication exceptions.
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.ISession.ConnectionStatusChanged">
            <summary>
            Raises events alerting the subscriber of changes in the sessions connectivity.
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.ISession.Disposed">
            <summary>
            Raises an event when the session is disposed.
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.ISessionAttributes">
            <summary>
            Defines the global settings for a session.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISessionAttributes.InitialConnectionRetry">
            <summary>
            The number of times the initialization routine will attempt to connect to the realm before raising an exception.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISessionAttributes.DisconnectIfClusterFails">
            <summary>
            True: The session will automatically disconnect if the realm looses quorum.
            False: The session will stay connected.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISessionAttributes.Urls">
            <summary>
            The URLs of the realm nodes that you wish to connect to.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISessionAttributes.Username">
            <summary>
            The username used to establish the session.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISessionAttributes.Password">
            <summary>
            The password used to establish the session.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.ISessionAttributes.Credentials">
            <summary>
            The credentials (username and password) used to establish the session.
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.ITopicSession">
            <summary>
            Defines Topic operations available in a session.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.ITopicSession.CreateConsumer(System.String,System.String,System.Int64,System.Boolean)">
            <summary>
            Creates a Topic consumer.
            </summary>
            <param name="name">The name of the topic</param>
            <param name="filter">The event filter (channel key)</param>
            <param name="eventId">The event id you would like to start at.</param>
            <param name="subscribeToPurge">The consumer will receive purge events</param>
        </member>
        <member name="M:MyChannels.Nirvana.ITopicSession.CreateDurableConsumer(System.String,System.String,MyChannels.Nirvana.DurableType,System.String,System.Boolean)">
            <summary>
            Creates a transactional durable topic consumer for a channel.
            The method will create the durable with the specified name if it does not yet exist.
            </summary>
            <param name="name">The name of the topic to add the consumer to</param>
            <param name="unique">The durable object</param>
            <param name="durableType">Type of the durable to be used for the subscription</param>
            <param name="filter">The events filter</param>
            <param name="subscribeToPurge">The consumer will receive purge events</param>
            <returns></returns>
        </member>
        <member name="M:MyChannels.Nirvana.ITopicSession.CreateTransactionalConsumer(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a transactional Topic consumer
            </summary>
            <param name="name">The name of the topic</param>
            <param name="unique">The named object</param>
            <param name="filter">The event filter (channel key)</param>
            <param name="subscribeToPurge">The consumer will receive purge events</param>
        </member>
        <member name="M:MyChannels.Nirvana.ITopicSession.CreateProducer(System.String)">
            <summary>
            Creates a Topic producer
            </summary>
            <param name="name">The name of the topic</param>
        </member>
        <member name="M:MyChannels.Nirvana.ITopicSession.CreateProducers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates many Topic producers
            </summary>
            <param name="names">The names of the topics</param>
        </member>
        <member name="M:MyChannels.Nirvana.ITopicSession.CreateRegisteredEvent(System.String,System.String,System.Boolean)">
            <summary>
            Create a registered event for the specified topic
            </summary>
            <param name="topicName">The name of the topic</param>
            <param name="uniqueId">The registered event's unique ID</param>
            <param name="isTransactional">Use transactional commits</param>
            <returns>The registered event</returns>
        </member>
        <member name="M:MyChannels.Nirvana.ITopicSession.CreateSubscriptionBatch">
            <summary>
            Create many consumers
            </summary>
            <returns>A batch object that can be used to efficiently subscribe to many topics</returns>
        </member>
        <member name="M:MyChannels.Nirvana.ITopicSession.CreateBatch(System.String[])">
            <summary>
            Creates a batch of Topic operations (passing null or empty array requires use 
            of IBatch.Send(string resource, IMessage message))
            </summary>
            /// <param name="topics">array of topic names to send to</param>
            <returns>An IBatch instance</returns>
        </member>
        <member name="T:MyChannels.Nirvana.IQueueSession">
            <summary>
            Defines Queue operations available in a session.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IQueueSession.CreateConsumer(System.String,System.String)">
            <summary>
            Create a consumer for a Queue
            </summary>
            <param name="name">The name of the queue</param>
            <param name="filter">The event filter (channel key)</param>
        </member>
        <member name="M:MyChannels.Nirvana.IQueueSession.CreateTransactionalConsumer(System.String,System.String,System.Int32)">
            <summary>
            Create a consumer for a Queue
            </summary>
            <param name="name">The name of the queue</param>
            <param name="filter">The event filter (channel key)</param>
            <param name="windowSize">The window size</param>
        </member>
        <member name="M:MyChannels.Nirvana.IQueueSession.CreateProducer(System.String)">
            <summary>
            Create a producer for a Queue
            </summary>
            <param name="name">The name of the queue</param>
        </member>
        <member name="M:MyChannels.Nirvana.IQueueSession.CreateProducers(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates many Queue producers
            </summary>
            <param name="names">The names of the queues</param>
        </member>
        <member name="M:MyChannels.Nirvana.IQueueSession.CreateBatch(System.String[])">
            <summary>
            Creates a batch of Queue operations (passing null or empty array requires use 
            of IBatch.Send(string resource, IMessage message))
            </summary>
            <param name="queues">array of queue names to send to</param>
            <returns>An IBatch instance</returns>
        </member>
        <member name="T:MyChannels.Nirvana.IDataGroupSession">
            <summary>
             Defines DataGroup operations available in a session.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroupSession.CreateBatch(System.String[])">
            <summary>
            Creates a batch of data group operations (passing null or empty array requires use 
            of IBatch.Send(string resource, IMessage message))
            </summary>
            <param name="groups">array of data group names to send to</param>
            <returns></returns>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroupSession.CreateStreamBatch(System.String[])">
            <summary>
            Creates a batch of data stream operations (passing null or empty array requires use 
            of IBatch.Send(string resource, IMessage message))
            </summary>
            <param name="streams">array of data stream names to send to</param>
            <returns></returns>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroupSession.CreateDataGroup(System.String)">
            <summary>
            Create a new data group
            </summary>
            <param name="name">The name of the data group</param>
            <returns>The data group</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroupSession.CreateDataGroup(System.String,MyChannels.Nirvana.ConflationBehaviour,System.TimeSpan)">
            <summary>
            Create a conflated data group
            </summary>
            <param name="name">The name of the data group</param>
            <param name="behaviour">The conflation behaviour</param>
            <param name="interval">The conflation interval</param>
            <returns>The data group</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroupSession.CreateProducer(System.String)">
            <summary>
            Create a direct data delivery producer, that can be used to publish messages to a data group.
            </summary>
            <param name="name">The name of the data group you would like to publish messages to.</param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroupSession.DeleteDataGroup(System.String)">
            <summary>
            Delete the specified data group from the realm.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:MyChannels.Nirvana.IDataGroupSession.GetDataGroup(System.String)">
            <summary>
            Retrieve data group with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:MyChannels.Nirvana.IDataGroupSession.Root">
            <summary>
            The realm's data groups.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IDataGroupSession.StreamId">
            <summary>
            The callers Data Stream Id
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IDataGroupSession.Enable">
            <summary>
            If set to true, the session will be added to the default data group.
            </summary>
            <remarks>
            Must be enabled before the session is initialized.
            </remarks>
        </member>
        <member name="P:MyChannels.Nirvana.IDataGroupSession.EnableAdmin">
            <summary>
            If set to true, the session will receive data group administration messages 
            </summary>
            <remarks>
            Must be enabled before the session is initialized.
            </remarks>
        </member>
        <member name="E:MyChannels.Nirvana.IDataGroupSession.MessageReceived">
            <summary>
            Raises an event when a direct data delivery message is received.
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.IDataGroupSession.DataGroupCreated">
            <summary>
            Raised when a Data Group is created.
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.IDataGroupSession.DataGroupDeleted">
            <summary>
            Raised when a Data Group is deleted.
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.IDataGroupSession.DataGroupAdded">
            <summary>
            Raised when a Data Group is added to another group
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.IDataGroupSession.DataGroupRemoved">
            <summary>
            Raised when a Data Group is removed from another group
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.IDataGroupSession.StreamAdded">
            <summary>
            Raised when a Data Delivery Stream is added to a Data Group
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.IDataGroupSession.StreamRemoved">
            <summary>
            Raised when a Data Delivery Stream is added to a Data Group
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nReconnectHandler">
               
                <summary> This interface should be implemented by classes wishing to register to receive
                callbacks when sessions are disconnected or to take control over the reconnect logic </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nReconnectHandler.disconnected(com.pcbsys.nirvana.client.nSession)">
                   
                    <summary> This method is called asynchronously when a session is disconnected
                    </summary>
                    <param name="anSession"> The session that got disconnected </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nReconnectHandler.reconnected(com.pcbsys.nirvana.client.nSession)">
                   
                    <summary> This method is called asynchronously when a session is reconnected
                    </summary>
                    <param name="anSession"> The session that got reconnected </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nReconnectHandler.tryAgain(com.pcbsys.nirvana.client.nSession)">
                   
                    <summary> This method is called asynchronously between a session being disconnected
                    and a reconnection attempt. If you wish to use the default reconnect logic,
                    simply return true. If not return false and implement your own custom reconnect logic.
                    </summary>
                    <param name="anSession"> The session to try and reconnect </param>
                    <returns> a bool specifying whether the default reconnect logic should be used
                    or not. </returns>
                    
        </member>
        <member name="T:MyChannels.Nirvana.IProperties">
            <summary>
            Defines an object that can be used to retrieve or store properties on a message.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Get(System.String)">
            <summary>
            Get the object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetString(System.String)">
            <summary>
            Get the string object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetByte(System.String)">
            <summary>
            Get the byte object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetLong(System.String)">
            <summary>
            Get the long object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetInt(System.String)">
            <summary>
            Get the int object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetBoolean(System.String)">
            <summary>
            Get the boolean object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetFloat(System.String)">
            <summary>
            Get the float object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetDouble(System.String)">
            <summary>
            Get the double object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetChar(System.String)">
            <summary>
            Get the char object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetProperties(System.String)">
            <summary>
            Get the IProperties object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetStringArray(System.String)">
            <summary>
            Get the string array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetByteArray(System.String)">
            <summary>
            Get the byte array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetLongArray(System.String)">
            <summary>
            Get the long array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetIntArray(System.String)">
            <summary>
            Get the int array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetBooleanArray(System.String)">
            <summary>
            Get the boolean array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetFloatArray(System.String)">
            <summary>
            Get the float array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetDoubleArray(System.String)">
            <summary>
            Get the double array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetCharArray(System.String)">
            <summary>
            Get the char array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.GetPropertiesArray(System.String)">
            <summary>
            Get the IProperties array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyChannels.Nirvana.IProperties.Remove(System.String)" -->
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Object)">
            <summary>
            Set the specified object in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.String)">
            <summary>
            Set the specified string in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Int32)">
            <summary>
            Set the specified int in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Int64)">
            <summary>
            Set the specified long in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Byte)">
            <summary>
            Set the specified byte in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Boolean)">
            <summary>
            Set the specified bool in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Char)">
            <summary>
            Set the specified char in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,MyChannels.Nirvana.IProperties)">
            <summary>
            Set the specified IProperties in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Single)">
            <summary>
            Set the specified float in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Double)">
            <summary>
            Set the specified double in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.String[])">
            <summary>
            Set the specified string array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Int32[])">
            <summary>
            Set the specified int array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Int64[])">
            <summary>
            Set the specified long array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Byte[])">
            <summary>
            Put the specified byte array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Boolean[])">
            <summary>
            Put the specified bool array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Char[])">
            <summary>
            Set the specified char array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,MyChannels.Nirvana.IProperties[])">
            <summary>
            Set the specified IProperties array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Single[])">
            <summary>
            Set the specified float array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.IProperties.Set(System.String,System.Double[])">
            <summary>
            Set the specified double array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="P:MyChannels.Nirvana.IProperties.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value you would like to get or set.</param>
            <returns>The value</returns>
        </member>
        <member name="P:MyChannels.Nirvana.IProperties.IsReadonly">
            <summary>
            True: The message properties are read-only, False: You can store properties on this message.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IProperties.Keys">
            <summary>
            Get an enumeration of the keys
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.IRegisteredEvent">
            <summary>
            Defines an object that can be used to commit changes to an event that is stored in the realm server.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IRegisteredEvent.CommitChanges">
            <summary>
            Commit changes
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.IRegisteredEvent.CommitChanges(System.Boolean)">
            <summary>
            Commit changes, replacing the entire event on the server. Client will receive the entire message.
            </summary>
            <param name="replace"></param>
        </member>
        <member name="P:MyChannels.Nirvana.IRegisteredEvent.Destination">
            <summary>
            The destination of the registered event
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IRegisteredEvent.ChangeCount">
            <summary>
            The number of changes since last commit
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IRegisteredEvent.Payload">
            <summary>
            Binary payload
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IRegisteredEvent.PrimaryKeyValue">
            <summary>
            The primary key value
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IRegisteredEvent.PrimaryKeyName">
            <summary>
            The primary key name
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IRegisteredEvent.Properties">
            <summary>
            Message properties
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IRegisteredEvent.Tag">
            <summary>
            Message tag
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IRegisteredEvent.TimeSinceLastCommit">
            <summary>
            Time elapsed since last commit
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.Destination">
            <summary>
            Represents a message destination in the realm.
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.IDestination">
            <summary>
            Defines a destination object. Representing an endpoint in a Nirvana Realm (Topic, Queue or DataGroup) 
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IDestination.Name">
            <summary>
            The name of the destination
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IDestination.Type">
            <summary>
            The type of destination
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.Destination.#ctor(System.String,MyChannels.Nirvana.DestinationType)">
            <summary>
            Instantiate a Destination object.
            </summary>
            <param name="name">The name of the destination</param>
            <param name="type">The type of destination</param>
        </member>
        <member name="M:MyChannels.Nirvana.Destination.ToString">
            <summary>
            Converts the type and name of the destination into a string.
            </summary>
            <returns>A string</returns>
        </member>
        <member name="P:MyChannels.Nirvana.Destination.Name">
            <summary>
            The name of the destination
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Destination.Type">
            <summary>
            The type of destination
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DataGroupEventType">
            <summary>
            Defines the different types of data group events that can occur
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DataGroupEventType.Created">
            <summary>
            A data group was created
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DataGroupEventType.Deleted">
            <summary>
            A data group was deleted
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DataGroupEventType.AddedToGroup">
            <summary>
            A data group has been added to another group
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DataGroupEventType.RemovedFromGroup">
            <summary>
            A data group has been removed from another group
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DataGroupEventType.StreamAdded">
            <summary>
            A stream has been added to a data group
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DataGroupEventType.StreamRemoved">
            <summary>
            A stream has been removed from a data group
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DestinationType">
            <summary>
            There are three types of destination
            DataGroup
            Queue
            Topic (Channel)
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DestinationType.DataGroup">
            <summary>
            The destination is a DataGroup
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DestinationType.Queue">
            <summary>
            The destination is a Queue
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DestinationType.Topic">
            <summary>
            The destination is a Topic (Channel)
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DurableType">
            <summary>
            Enumeration containing all the possible types of a durable subscription to a topic.
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DurableType.Named">
            <summary>
            Subscription with a durable object. 
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DurableType.Shared">
            <summary>
            Shared subscription with a durable object
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.DurableType.Serial">
            <summary>
            Serial subscription with a durable object
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DataGroupAddedEventArgs">
            <summary>
            Event that is raised when a data group is added to another data group
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DataGroupRelationshipChangedEventArgs">
            <summary>
            Event that will be raised when a data group is added to, or removed from, another data group
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DataGroupEventArgs">
            <summary>
            Abstract class for data group event arguments 
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.DataGroupEventArgs.#ctor(MyChannels.Nirvana.IDataGroup)">
            <summary>
            Initializes the abstract class
            </summary>
            <param name="group">The data group that this event "occurred on"</param>
        </member>
        <member name="P:MyChannels.Nirvana.DataGroupEventArgs.Group">
            <summary>
            The data group that this event "occurred on"
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.DataGroupEventArgs.Type">
            <summary>
            The type of event
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.DataGroupRelationshipChangedEventArgs.Parent">
            <summary>
            The data group, that this data group is being added to or removed from.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.DataGroupAddedEventArgs.#ctor(MyChannels.Nirvana.IDataGroup,MyChannels.Nirvana.IDataGroup)">
            <summary>
            Create an instance of DataGroupAddedEventArgs
            </summary>
            <param name="group">The group being added</param>
            <param name="parent">The parent being added to</param>
        </member>
        <member name="P:MyChannels.Nirvana.DataGroupAddedEventArgs.Type">
            <summary>
            Will always return AddedToGroup
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DataGroupCreatedEventArgs">
            <summary>
            Event that is raised when a data group is created
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.DataGroupCreatedEventArgs.#ctor(MyChannels.Nirvana.IDataGroup)">
            <summary>
            Create an instance of a DataGroupCreatedEventArgs object
            </summary>
            <param name="group"></param>
        </member>
        <member name="P:MyChannels.Nirvana.DataGroupCreatedEventArgs.Type">
            <summary>
            Will return DataGroupEventType.Created for this object.
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DataGroupDeletedEventArgs">
            <summary>
            Event raised when a data group is deleted
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DataGroupRemovedEventArgs">
            <summary>
            Event that is raised when a data group is removed from another data group
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.DataGroupRemovedEventArgs.#ctor(MyChannels.Nirvana.IDataGroup,MyChannels.Nirvana.IDataGroup)">
            <summary>
            Create an instance of DataGroupRemovedEventArgs
            </summary>
            <param name="group">The group being removed</param>
            <param name="parent">The group being removed from</param>
        </member>
        <member name="P:MyChannels.Nirvana.DataGroupRemovedEventArgs.Type">
            <summary>
            Will always return RemovedFromGroup
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DataGroupStreamEventArgs">
            <summary>
            The abstract type that will be raised when a stream is added or removed from a data group.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.DataGroupStreamEventArgs.StreamCount">
            <summary>
            The number of streams in the data group
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.DataGroupStreamEventArgs.Stream">
            <summary>
            The stream that has been added or removed from the data group
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.DestinationDeletedEventArgs">
            <summary>
            An event that is raised when a destination is deleted
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.MessageEventArgs">
            <summary>
            The event that is raised when a message is received.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.MessageEventArgs.Message">
            <summary>
            The message
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.MessageEventArgs.Type">
            <summary>
            The type of event
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.DestinationDeletedEventArgs.Message">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.DestinationDeletedEventArgs.Type">
            <summary>
            Will always return MessageEventArgsType.DestinationDeleted for DestinationDeletedEventArgs
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.GivenPriorityEventArgs">
            <summary>
            Event that will be raised when you are given priority to a priority named object.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.GivenPriorityEventArgs.Message">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.GivenPriorityEventArgs.Type">
            <summary>
            Will always be MessageEventArgsType.GivenPriority for this type of object
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.MessageArrivedEventArgs">
            <summary>
            Event that will be raised when a message is delivered.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.MessageArrivedEventArgs.#ctor(MyChannels.Nirvana.IMessage,System.Boolean)">
            <summary>
            Creates an instance of a MessageArrivedEventArgs object
            </summary>
            <param name="message">The message object</param>
            <param name="isDelta">Is this a delta delivery or a normal message</param>
        </member>
        <member name="P:MyChannels.Nirvana.MessageArrivedEventArgs.Message">
            <summary>
            The message object
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.MessageArrivedEventArgs.Type">
            <summary>
            The type of message (normal or delta)
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.MessageEventArgsType">
            <summary>
            Types of messages that can be received via a Topic, Queue or DataGroup
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.MessageEventArgsType.Message">
            <summary>
            A normal message.
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.MessageEventArgsType.DeltaDelivery">
            <summary>
            Is the message a delta delivery, containing changes to an event that has already been delivered.
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.MessageEventArgsType.DestinationDeleted">
            <summary>
            The destination you were receiving messages from has been deleted.
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.MessageEventArgsType.GivenPriority">
            <summary>
            You have been given priority to the specified destination.
            </summary>
        </member>
        <member name="F:MyChannels.Nirvana.MessageEventArgsType.Purge">
            <summary>
            A message (event) has been purged.
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.PurgeEventArgs">
            <summary>
            An event that is raised when a message (event) has been purged.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.PurgeEventArgs.#ctor(System.Int64,System.Int64,System.String)">
            <summary>
            Instantiate a new PurgeEventArgs object
            </summary>
            <param name="startId">a long specifying the start event id of the range of events purged from the channel.</param>
            <param name="endId">a long specifying the end event id of the range of events purged from the channel.</param>
            <param name="filter">A filter used to purge only the events which match this criteria.</param>
        </member>
        <member name="P:MyChannels.Nirvana.PurgeEventArgs.Filter">
            <summary>
            A filter (if supplied)
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.PurgeEventArgs.EndId">
            <summary>
            The ending range of the purge event
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.PurgeEventArgs.StartId">
            <summary>
            The starting range of the purge event
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.PurgeEventArgs.Message">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.PurgeEventArgs.Type">
            <summary>
            Will always return MessageEventArgsType.Purge for MessagePurgedEventArgs
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.StreamAddedEventArgs">
            <summary>
            Event that is raised when a stream is added to a data group
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.StreamAddedEventArgs.#ctor(MyChannels.Nirvana.IDataGroup,MyChannels.Nirvana.IDataStream,System.Int32)">
            <summary>
            Create an instance of StreamAddedEventArgs
            </summary>
            <param name="group">The data group that a stream was added to</param>
            <param name="stream">The stream that has been added</param>
            <param name="count">The number of streams now in the data group</param>
        </member>
        <member name="P:MyChannels.Nirvana.StreamAddedEventArgs.Type">
            <summary>
            Will return StreamAdded for this type of object
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.StreamRemovedEventArgs">
            <summary>
            Event that is raised when a stream is removed from a data group
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.StreamRemovedEventArgs.#ctor(MyChannels.Nirvana.IDataGroup,MyChannels.Nirvana.IDataStream,System.Int32,System.Boolean)">
            <summary>
            Create an instance of StreamRemovedEventArgs
            </summary>
            <param name="group">The group that a stream has been removed from</param>
            <param name="stream">The stream that has been removed</param>
            <param name="count">The number of streams remaining in the group</param>
            <param name="serverRemoved">Was the stream removed by the server?</param>
        </member>
        <member name="P:MyChannels.Nirvana.StreamRemovedEventArgs.ServerRemoved">
            <summary>
            Was the stream removed/kicked out of the data group by the server
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.StreamRemovedEventArgs.Type">
            <summary>
            Will always return StreamRemoved for this object
            </summary>
        </member>
        <member name="T:nirvana.Ex.Public.Exceptions.CommitRollbackRequiredException">
            <summary>
            The exception is thrown in case the capacity for receiving events from a synchronous shared durable
            subscriber has exceeded
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.IMessage">
            <summary>
            The Message class represents the data published to or consumed from a Nirvana realm. The Message class consists of 3 distinct parts:
            
                1. The header
                2. The properties
                3. The payload of the event
            
            The header object contains system specific attributes, set by the Nirvana Realm Server
            
            The properties contain meta data, added by the user in key, value format.
            
            The payload represents the actual data portion of the Message as a byte array.
            
            In addition, a 'tag' can also be used as a high level identifier for each event
             
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.Payload">
            <summary>
            Return the payload within this Message
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.Tag">
            <summary>
            Return the 'tag' associated with this Message
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.Destination">
            <summary>
            Return the name of the Destination (channel or queue) this Message was published to
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.Id">
            <summary>
            Return the unique number assigned to this Message by the Nirvana realm Server
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.SubscriberNames">
            <summary>
            An enumeration of sessions that will be the only consumers of this message. By setting this, no other subscribers, either on a queue or channel will consume this event.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.SubscriberHost">
            <summary>
            Represents the host name or ip address representing the consumers of this message. By setting this, only connections matching the host name or ip address will consume this event. Wildcard * are also supported, so you can have *.abc.com fore example
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.PublisherHost">
            <summary>
            Represents the host name or ip address representing the publisher of this message. 
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.PublisherName">
            <summary>
            Represents the subject of the publisher of this message. 
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.Timestamp">
            <summary>
            Represents the timestamp when the server received this message form the publisher. 
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.Properties">
            <summary>
            Return the MessageProperties for this Message
            </summary>
            <returns>The MessageProperties, or meta data associated with this Message</returns>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.TTL">
            <summary>
            Specify the TTL (time to live) of the Message being published
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.Persistent">
            <summary>
            Specify the TTL (time to live) of the Message being published (Only supported by Topic / Queues of type Mixed)
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.RedeliveryCount">
            <summary>
            Returns the number of times a message has been delivered / redelivered
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.IMessage.Redelivered">
            <summary>
            Returns whether a Message has been redelivered
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.Message">
            <summary>
            The Message class represents the data published to or consumed from a Nirvana realm. The Message class consists of 3 distinct parts:
            
                1. The header
                2. The properties
                3. The payload of the event
            
            The header object contains system specific attributes, set by the Nirvana Realm Server
            
            The properties contain meta data, added by the user in key, value format.
            
            The payload represents the actual data portion of the Message as a byte array.
            
            In addition, a 'tag' can also be used as a high level identifier for each event
             
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.Message.#ctor">
            <summary>
            Construct an empty event
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.Message.#ctor(System.String,System.Byte[])">
            <summary>
            Construct an event using a tag and data payload only
            </summary>
            <param name="tag">the Message tag as provided for each Message</param>
            <param name="data">the payload data</param>
        </member>
        <member name="M:MyChannels.Nirvana.Message.#ctor(MyChannels.Nirvana.Properties,System.Byte[])">
            <summary>
            Construct an event using the specified MessageProperties and data payload
            </summary>
            <param name="properties">the MessageProperties provided for each Message</param>
            <param name="data">the payload data</param>
        </member>
        <member name="M:MyChannels.Nirvana.Message.#ctor(MyChannels.Nirvana.Properties,System.Byte[],System.String)">
            <summary>
            Construct an event using the specified MessageProperties, data payload and tag
            </summary>
            <param name="properties">the MessageProperties provided for each Message</param>
            <param name="data">the payload data</param>
            <param name="tag">the Message tag</param>
        </member>
        <member name="M:MyChannels.Nirvana.Message.#ctor(MyChannels.Nirvana.Properties,System.String)">
            <summary>
            Construct an event using the specified MessageProperties and tag
            </summary>
            <param name="properties">the MessageProperties provided for each Message</param>
            <param name="tag">the Message tag</param>
        </member>
        <member name="P:MyChannels.Nirvana.Message.Payload">
            <summary>
            Return the payload within this Message
            </summary>
            <returns>The binary payload for this Message</returns>
        </member>
        <member name="P:MyChannels.Nirvana.Message.Tag">
            <summary>
            Return the 'tag' associated with this Message
            </summary>
            <returns>The tag associated with this message</returns>
        </member>
        <member name="P:MyChannels.Nirvana.Message.Destination">
            <summary>
            Return the name of the Destination (Topic, Queue or DataGroup) this Message was published to
            </summary>
            <returns>The name of the Topic, Queue or DataGroup</returns>
        </member>
        <member name="P:MyChannels.Nirvana.Message.Id">
            <summary>
            Return the unique number assigned to this Message by the Nirvana realm Server
            </summary>
            <returns>The id of this Message</returns>
        </member>
        <member name="P:MyChannels.Nirvana.Message.SubscriberNames">
            <summary>
            An enumeration of sessions that will be the only consumers of this message. By setting this, no other subscribers, either on a queue or channel will consume this event.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Message.SubscriberHost">
            <summary>
            Sets the host name or ip address representing the consumers of this message. By setting this, only connections matching the host name or ip address will consume this event. Wildcard * are also supported, so you can have *.abc.com fore example
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Message.Properties">
            <summary>
            Return the Properties for this Message
            </summary>
            <returns>The Properties, or meta data associated with this Message</returns>
        </member>
        <member name="P:MyChannels.Nirvana.Message.PublisherHost">
            <summary>
            Represents the host name or ip address of the publisher of this message. 
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Message.PublisherName">
            <summary>
            Represents the subject of the publisher of this message. 
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Message.Timestamp">
            <summary>
            Represents the timestamp when the server received this message from the publisher. 
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Message.TTL">
            <summary>
            Specify the TTL (time to live) of the Message being published (Only supported by Topic / Queues of type Mixed)
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Message.Persistent">
            <summary>
            Indicate whether the Message is persistently stored on disk (Only supported by Topic / Queues of type Mixed or Persistent)
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Message.RedeliveryCount">
            <summary>
            Returns the number of times a message has been delivered / redelivered
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Message.Redelivered">
            <summary>
            Returns whether a Message has been redelivered
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.Properties">
            <summary>
            Used to retrieve or store properties on a message.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.#ctor">
            <summary>
            Instantiate a Properties object.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Get(System.String)">
            <summary>
            Get the object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetString(System.String)">
            <summary>
            Get the string object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetLong(System.String)">
            <summary>
            Get the long object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetInt(System.String)">
            <summary>
            Get the int object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetBoolean(System.String)">
            <summary>
            Get the boolean object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetFloat(System.String)">
            <summary>
            Get the float object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetDouble(System.String)">
            <summary>
            Get the double object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetChar(System.String)">
            <summary>
            Get the char object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetByte(System.String)">
            <summary>
            Get the byte object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetProperties(System.String)">
            <summary>
            Get the IProperties object that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetStringArray(System.String)">
            <summary>
            Get the string array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetLongArray(System.String)">
            <summary>
            Get the long array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetIntArray(System.String)">
            <summary>
            Get the int array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetBooleanArray(System.String)">
            <summary>
            Get the boolean array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetFloatArray(System.String)">
            <summary>
            Get the float array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetDoubleArray(System.String)">
            <summary>
            Get the double array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetCharArray(System.String)">
            <summary>
            Get the char array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetByteArray(System.String)">
            <summary>
            Get the byte array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetPropertiesArray(System.String)">
            <summary>
            Get the IProperties array that matches the specified key
            </summary>
            <param name="key">The key to return the value for</param>
            <returns>The value</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyChannels.Nirvana.Properties.Remove(System.String)" -->
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Object)">
            <summary>
            Put the specified object in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.String)">
            <summary>
            Put the specified string in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Int32)">
            <summary>
            Put the specified int in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Int64)">
            <summary>
            Put the specified long in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Byte)">
            <summary>
            Put the specified byte in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Boolean)">
            <summary>
            Put the specified bool in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Char)">
            <summary>
            Put the specified char in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,MyChannels.Nirvana.IProperties)">
            <summary>
            Put the specified IProperties in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Single)">
            <summary>
            Put the specified float in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Double)">
            <summary>
            Put the specified double in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.String[])">
            <summary>
            Put the specified string array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Int32[])">
            <summary>
            Put the specified int array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Int64[])">
            <summary>
            Put the specified long array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Byte[])">
            <summary>
            Put the specified byte array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Boolean[])">
            <summary>
            Put the specified bool array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Char[])">
            <summary>
            Put the specified char array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,MyChannels.Nirvana.IProperties[])">
            <summary>
            Put the specified IProperties array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Single[])">
            <summary>
            Put the specified float array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.Set(System.String,System.Double[])">
            <summary>
            Put the specified double array in the Properties against the specific key
            </summary>
            <param name="key">the key to store this value against</param>
            <param name="val">the value to store</param>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.GetEnumerator">
            <summary>
            Allows caller to enumerate all properties.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.Properties.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Allows caller to enumerate all properties.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Properties.IsReadonly">
            <summary>
            True: The message properties are read-only, False: You can store properties on this message.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Properties.Keys">
            <summary>
            Get an enumeration of the keys
            </summary>
        </member>
        <member name="T:MyChannels.Nirvana.Session">
            <summary>
            Creates a session with a Nirvana Realm.
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.Session.#ctor(System.String)">
            <summary>
            Initializes a new instance of the session class.
            </summary>
            <param name="url">The URL of the realm</param>
        </member>
        <member name="M:MyChannels.Nirvana.Session.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the session class.
            </summary>
            <param name="urls">The URLs of the realm (cluster)</param>
        </member>
        <member name="M:MyChannels.Nirvana.Session.#ctor(MyChannels.Nirvana.ISessionAttributes)">
            <summary>
            Initializes a new instance of the session class.
            </summary>
            <param name="attributes">Inject session attributes</param>
        </member>
        <member name="M:MyChannels.Nirvana.Session.Initialize">
            <summary>
            Connect to the realm
            </summary>
        </member>
        <member name="M:MyChannels.Nirvana.Session.Dispose">
            <summary>
            Dispose of the session, disconnect from the realm.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Session.Settings">
            <summary>
            Settings used to establish a connection to the realm.
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Session.Subject">
            <summary>
            The callers Subject (user@host)
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Session.DataGroups">
            <summary>
            Subscribe to and administer Direct Data Delivery
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Session.Topics">
            <summary>
            Create producer or consumer for a Topic
            </summary>
        </member>
        <member name="P:MyChannels.Nirvana.Session.Queues">
            <summary>
            Create producer or consumer for a Queue
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.Session.AsynchronousExceptionRaised">
            <summary>
            Raises an event if the session has any internal communication exceptions.
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.Session.ConnectionStatusChanged">
            <summary>
            Raises events alerting the subscriber of changes in the sessions connectivity.
            </summary>
        </member>
        <member name="E:MyChannels.Nirvana.Session.Disposed">
            <summary>
            Raises an event when the session is disposed.
            </summary>
        </member>
        <member name="M:com.pcbsys.foundation.fbase.Base64.encode(System.Byte[])">
             
            
             @param raw 
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.Base64.decode(System.String)">
             
            
             @param base64 
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.Base64.encodeBlock(System.Byte[],System.Int32)">
             
            
             @param raw 
             @param offset 
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.Base64.getChar(System.Int32)">
             
            
             @param sixBit 
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.Base64.getValue(System.Char)">
             
            
             @param c 
             @return 
        </member>
        <member name="T:com.pcbsys.foundation.security.fAclEntry">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fExternalable.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             Writes the object to the EventOutputStream
            
             @param eventOutputStream The output stream to stream the object to
             @exception Exception If the underlying I/O system failed
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fExternalable.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             Reads the object from the EventInputStream
            
             @param eventInputStream The input stream to use
             @exception Exception If the input stream reached EOF
             @exception ClassNotFoundException If the class can not be found
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.foundation.security.fAclEntry.mySubject" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.foundation.security.fAclEntry.myPriv" -->
        <member name="M:com.pcbsys.foundation.security.fAclEntry.#ctor(com.pcbsys.foundation.security.fSubject,System.Int64)">
             
              <summary>
              </summary>
             <param name="subject">  </param>
             <param name="priv">  </param>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fAclEntry.#ctor" -->
        <member name="M:com.pcbsys.foundation.security.fAclEntry.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.security.fAclEntry.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.security.fAclEntry.getSubject">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.security.fAclEntry.getPriv">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.security.fAclEntry.setPriv(System.Int64)">
             
              <summary>
              </summary>
             <param name="priv">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.security.fAclEntry.Equals(System.Object)">
             
              <summary>
              </summary>
             <param name="test">  </param>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.security.fAclEntry.lessThan(System.Object)">
             
              <summary>
              </summary>
             <param name="test">  </param>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.security.fSubject.#ctor">
            
        </member>
        <member name="M:com.pcbsys.foundation.security.fSubject.#ctor(System.Collections.Generic.List{com.pcbsys.foundation.security.fPrincipal},System.Collections.Generic.List{com.pcbsys.foundation.security.fCredential},System.Collections.Generic.List{com.pcbsys.foundation.security.fCredential})">
             
            
             @param principals 
             @param pubCredentials 
             @param privCredentials 
        </member>
        <member name="M:com.pcbsys.foundation.security.fSubject.getPrincipals">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fSubject.getPrivateCredentials">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fSubject.getPublicCredentials">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fSubject.getUser">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fSubject.ToString">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fSubject.equals(System.Object)">
             
            
             @param other 
             @return 
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSubject.readExternalfSubject(com.pcbsys.foundation.io.fEventInputStream,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSubject.writeExternalfSubject(com.pcbsys.foundation.io.fEventOutputStream)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fAclGroup.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fAclGroup.Equals(System.Object)" -->
        <!-- Badly formed XML comment ignored for member "T:com.pcbsys.nirvana.client.Observable" -->
        <member name="M:com.pcbsys.nirvana.client.Observable.#ctor">
            <summary>
            Construct an Observable with zero Observers.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.Observable.addObserver(com.pcbsys.nirvana.client.IObserver)">
            <summary>
            Adds an observer to the set of observers for this object, provided
            that it is not the same as some observer already in the set.
            The order in which notifications will be delivered to multiple
            observers is not specified. See the class comment.
            </summary>
            <param name="o">an observer to be added</param>
            <exception cref="T:System.Exception">if the parameter o is null</exception>
        </member>
        <member name="M:com.pcbsys.nirvana.client.Observable.deleteObserver(com.pcbsys.nirvana.client.IObserver)">
            <summary>
            Deletes an observer from the set of observers of this object.
            Passing <c>null</c> to this method will have no effect.
            </summary>
            <param name="o">the observer to be deleted.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.Observable.notifyObservers" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.Observable.notifyObservers(System.Object)" -->
        <member name="M:com.pcbsys.nirvana.client.Observable.deleteObservers">
            <summary>
            Clears the observer list so that this object no longer has any observers.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.Observable.setChanged">
            <summary>
            Marks this <tt>Observable</tt> object as having been changed; the
            <tt>hasChanged</tt> method will now return <tt>true</tt>.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.Observable.clearChanged">
            <summary>
            Indicates that this object has no longer changed, or that it has
            already notified all of its observers of its most recent change,
            so that the <tt>hasChanged</tt> method will now return <tt>false</tt>.
            This method is called automatically by the
            <code>notifyObservers</code> methods.
            </summary>
            <see cref="M:com.pcbsys.nirvana.client.Observable.notifyObservers"/>
            <see cref="M:com.pcbsys.nirvana.client.Observable.notifyObservers(System.Object)"/>
        </member>
        <member name="M:com.pcbsys.nirvana.client.Observable.hasChanged">
            <summary>
            Tests if this object has changed.
            </summary>
            <returns>
                <code>true</code> if and only if the <code>setChanged</code>
                method has been called more recently than the
                <code>clearChanged</code> method on this object;
                <code>false</code> otherwise.
            </returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.Observable.countObservers">
            <summary>
            Returns the number of observers of this <tt>Observable</tt> object.
            </summary>
            <returns>the number of observers of this object</returns>
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fDriver.open">
             Open the communications
            
             @exception Exception Driver specific exception during open
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fDriver.close">
             Close the driver communications
            
             @exception Exception Driver specific exception
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fDriver.getSubject">
            Get the subject associated with this connection
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fDriver.getConnectionWeight">
            Gets the weight associated with using this type of driver
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fAsyncSocketDriver.open">
             
            
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fAsyncSocketDriver.getInputStream">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fAsyncSocketDriver.getOutputStream">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fAsyncSocketDriver.close">
             
            
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.foundation.security.fSecureObject">
            
             <summary> * An interface that defines the operations required for an object to be
             * checked against an Access Control List (ACL) </summary>
             
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecureObject.add(com.pcbsys.foundation.security.fSubject,com.pcbsys.foundation.security.fSubject,System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecureObject.remove(com.pcbsys.foundation.security.fSubject,com.pcbsys.foundation.security.fSubject,System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecureObject.check(com.pcbsys.foundation.security.fSubject,System.Int64,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecureObject.getACLName(System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecureObject.getACLDescription(System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecureObject.getACLNames" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecureObject.getACLDescriptions" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecureObject.getMaxLevel" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecureObject.getEveryone" -->
        <member name="F:com.pcbsys.foundation.security.fDefaultSecureObject.ACL_ALL_PERMISSIONS">
             
              <summary> * A flag to pass when adding/removing permissions to specify that all
              * permissions should be set/removed. </summary>
              
        </member>
        <member name="F:com.pcbsys.foundation.security.fDefaultSecureObject.ACL_DEFAULT_ENTRY">
             
              <summary> * Define the ACL operation permissions, common to all subclasses </summary>
              
        </member>
        <member name="F:com.pcbsys.foundation.security.fDefaultSecureObject.MAX_LEVEL">
             
              <summary> * Lets reserve levels 1-8 for ACL admin specific stuff Subclasses should
              * override and define their max level </summary>
              
        </member>
        <member name="M:com.pcbsys.foundation.security.fDefaultSecureObject.#ctor(System.Boolean)">
             
              <summary> * Initialise the superuser ACL </summary>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fDefaultSecureObject.#ctor(com.pcbsys.foundation.security.fSubject)" -->
        <member name="M:com.pcbsys.foundation.security.fDefaultSecureObject.init">
             
              <summary> * This static initialiser should be defined in all subclasses of
              * DefaultSecureObject.
              * <p/>
              * It initialises a static array of DefaultPermissions and makes the ACL
              * ready for the admin tool to render on the screen.  A similar mechanism
              * should be used, including a call to static method
              * addPermissionInfo(myPermissionInfo); </summary>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fDefaultSecureObject.getACLName(System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fDefaultSecureObject.getACLDescription(System.Int64)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fDefaultSecureObject.getACLNames" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fDefaultSecureObject.getACLDescriptions" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fDefaultSecureObject.getMaxLevel" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fDefaultSecureObject.getEveryone" -->
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.#ctor(System.String,System.String,System.String,System.Int32)">
             
              <summary>
              </summary>
             <param name="name">      </param>
             <param name="protocol">  </param>
             <param name="adapter">   </param>
             <param name="port">      </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
             
              <summary>
              </summary>
             <param name="name">       </param>
             <param name="protocol">   </param>
             <param name="adapter">    </param>
             <param name="port">       </param>
             <param name="autoStart">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.getACLDescriptions">
             
              <summary>Returns the String[] containing all ACL descriptions
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.getAutoStart">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.getURL">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.canAdvertise">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.setAdvertise(System.Boolean)">
             
              <summary>
              </summary>
             <param name="flag">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.getPort">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.getAdapter">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.setAdapter(System.String)">
             
              <summary>
              </summary>
             <param name="adapter">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.setPort(System.Int32)">
             
              <summary>
              </summary>
             <param name="port">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.getProtocol">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.lessThan(System.Int64)">
             
              <summary>
              </summary>
             <param name="aLong">  </param>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.Equals(System.Int64)">
             
              <summary>
              </summary>
             <param name="aLong">  </param>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.lessThan(System.Object)">
             
              <summary>
              </summary>
             <param name="item">  </param>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.Equals(System.Object)">
             
              <summary>
              </summary>
             <param name="item">  </param>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="eos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="eis">  </param>
             <exception cref="T:System.Exception">             </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fDriverConfig.compare(System.String)">
             
              <summary>
              </summary>
             <param name="test">  </param>
             <returns>  </returns>
              
        </member>
        <member name="P:com.pcbsys.foundation.drivers.configuration.fDriverConfig.Name">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="T:com.pcbsys.foundation.fbase.fException">
            
             <summary>Base exception. All exceptions extend this object </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fException.#ctor(System.String)">
             
              <summary>Contructs the exception with the string message
              </summary>
             <param name="msg"> String message to construct the exception with </param>
              
        </member>
        <member name="T:com.pcbsys.foundation.configuration.fConfigManager">
            
             <summary> Description of the Class
             
             @author     krital
             @created    05 December 2000 </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.#ctor">
             
              <summary> Constructor for the fConfigManager object </summary>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.getGroup(System.String)">
             
              <summary> Gets the Group attribute of the fConfigManager class
              </summary>
              *<param name="group">                 Description of Parameter </param>
              *<returns>                       The Group value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.getGroups">
             
              <summary> Gets the Groups attribute of the fConfigManager class
              </summary>
              *<returns>    The Groups value </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.createGroup(System.String,System.String,System.Boolean,System.Boolean)">
             
              <summary> Description of the Method
              </summary>
              *<param name="group">                 Description of Parameter </param>
              *<param name="description">           Description of Parameter </param>
              *<param name="readOnlyFlag">          Description of Parameter </param>
              *<param name="globalFlag">            Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.createGroup(System.String,System.String)">
             
              <summary> Description of the Method
              </summary>
              *<param name="group">                 Description of Parameter </param>
              *<param name="description">           Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.removeGroup(System.String)">
             
              <summary> Description of the Method
              </summary>
              *<param name="group">                 Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.addGroupConfig(System.String,System.String,System.String,System.Int32,System.Int64,System.Int64)">
             
              <summary> Adds a feature to the GroupConfig attribute of the fConfigManager class
              </summary>
              *<param name="group">The feature to be added to the GroupConfig attribute </param>
              *<param name="key">The feature to be added to the GroupConfig attribute </param>
              *<param name="value">The feature to be added to the GroupConfig attribute </param>
              *<param name="type">The type of the GroupConfig attribute </param>
              *<param name="min">The min value of the GroupConfig range attribute </param>
              *<param name="max">The max value of the GroupConfig range attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.updateGroupConfig(System.String,System.String,System.String,System.Boolean)">
             
              <summary> Description of the Method
              </summary>
              *<param name="group">                 Description of Parameter </param>
              *<param name="key">                   Description of Parameter </param>
              *<param name="value">                 Description of Parameter </param>
              *<param name="notifyListeners">       Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.updateGroup(System.String)">
             
              <summary> Description of the Method
              </summary>
              *<param name="group">                 Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.addConfigListener(System.String,com.pcbsys.foundation.configuration.fConfigurationListener)">
             
              <summary> Adds a feature to the ConfigListener attribute of the fConfigManager class
              </summary>
              *<param name="group">                 The feature to be added to the ConfigListener
                  attribute </param>
              *<param name="cl">                    The feature to be added to the ConfigListener
                  attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.removeConfigListener(System.String,com.pcbsys.foundation.configuration.fConfigurationListener)">
             
              <summary> Description of the Method
              </summary>
              *<param name="group">                 Description of Parameter </param>
              *<param name="cl">                    Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigManager.addGroup(System.String,com.pcbsys.foundation.configuration.fConfigObject)">
             
              <summary> Adds a feature to the Group attribute of the fConfigManager class
              </summary>
              *<param name="group">                 The feature to be added to the Group attribute </param>
              *<param name="fco">                   The feature to be added to the Group attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="T:com.pcbsys.foundation.configuration.fConfigObject">
            
             <summary> Description of the Class
             
             @author     krital
             @created    04 December 2000 </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.#ctor">
             
              <summary> Constructor for the fConfigObject object </summary>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
             
              <summary> Constructor for the fConfigObject object
              </summary>
              *<param name="group">                 Description of Parameter </param>
              *<param name="description">           Description of Parameter </param>
              *<param name="readonlyFlag">          Description of Parameter </param>
              *<param name="globalFlag">            Description of Parameter </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.#ctor(System.String,System.String)">
             
              <summary> Constructor for the fConfigObject object
              </summary>
              *<param name="group">                 Description of Parameter </param>
              *<param name="description">           Description of Parameter </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getGroupName">
             
              <summary> Gets the GroupName attribute of the fConfigObject object
              </summary>
              *<returns>    The GroupName value </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.isReadOnly">
             
              <summary> Gets the ReadOnly attribute of the fConfigObject object
              </summary>
              *<returns>    The ReadOnly value </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.isGlobal">
             
              <summary> Gets the Global attribute of the fConfigObject object
              </summary>
              *<returns>    The Global value </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getGroupDescription">
             
              <summary> Gets the GroupDescription attribute of the fConfigObject object
              </summary>
              *<returns>    The GroupDescription value </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getSize">
             
              <summary> Gets the Size attribute of the fConfigObject object
              </summary>
              *<returns>    The Size value </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getDescription(System.String)">
             
              <summary> Gets the Description attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The Description value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getWarning(System.String)">
             
              <summary> Gets the Warning attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The Warning value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getKeys">
             
              <summary> Gets the Keys attribute of the fConfigObject object
              </summary>
              *<returns>    The Keys value </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getValue(System.String)">
             
              <summary> Gets the Value attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The Value value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getType(System.String)">
             
              <summary> Gets the Value attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The Value value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.isAdvanced(System.String)">
            
               <summary> Gets the isAdvanced attribute of the fConfigObject object
               </summary>
               *<param name="key">                   Description of Parameter </param>
               *<returns>                            The isAdvanced value </returns>
               *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
            
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getMin(System.String)">
             
              <summary> Gets the Value attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The Value value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getMax(System.String)">
             
              <summary> Gets the Value attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The Value value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getValueAsInt(System.String)">
             
              <summary> Gets the ValueAsInt attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The ValueAsInt value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getValueAsLong(System.String)">
             
              <summary> Gets the ValueAsLong attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The ValueAsLong value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.contains(System.String)">
             
              <summary> Returns true if the key exists in the config object
              </summary>
             <returns> if the key exists </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getValueAsShort(System.String)">
             
              <summary> Gets the ValueAsShort attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The ValueAsShort value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getValueAsDouble(System.String)">
             
              <summary> Gets the ValueAsDouble attribute of the fConfigObject object
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<returns>                       The ValueAsDouble value </returns>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.ToString">
             
              <summary> Description of the Method
              </summary>
              *<returns>    Description of the Returned Value </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.addDescription(System.String,System.String)">
             
              <summary> Adds a feature to the Description attribute of the fConfigObject object
              </summary>
              *<param name="key">                   The feature to be added to the Description
                  attribute </param>
              *<param name="description">           The feature to be added to the Description
                  attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.changeDescription(System.String,System.String,System.Boolean)">
             
              <summary> Description of the Method
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<param name="description">           Description of Parameter </param>
              *<param name="doUpdate">              Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.addWarning(System.String,System.String)">
             
              <summary> Adds a feature to the Warning attribute of the fConfigObject object
              </summary>
              *<param name="key">                   The feature to be added to the Warning
                  attribute </param>
              *<param name="warning">               The feature to be added to the Warning
                  attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.addType(System.String,System.Int32)">
             
              <summary> Adds a feature to the type attribute of the fConfigObject object
              </summary>
              *<param name="key">                   The feature to be added to the Warning
                  attribute </param>
              *<param name="type">                  The feature to be added to the Warning
                  attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.addIsAdvanced(System.String,System.Boolean)">
            
               <summary> Adds a feature to the isAdvanced attribute of the fConfigObject object
               </summary>
               *<param name="key">                   The feature to be added to the Warning
                   attribute </param>
               *<param name="isAdvanced">                  The feature to be added to the Warning
                   attribute </param>
               *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
            
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.addMin(System.String,System.Int64)">
             
              <summary> Adds a feature to the type attribute of the fConfigObject object
              </summary>
              *<param name="key">                   The feature to be added to the Warning
                  attribute </param>
              *<param name="min">                   The feature to be added to the Warning
                  attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.addMax(System.String,System.Int64)">
             
              <summary> Adds a feature to the type attribute of the fConfigObject object
              </summary>
              *<param name="key">                   The feature to be added to the Warning
                  attribute </param>
              *<param name="max">                   The feature to be added to the Warning
                  attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.changeWarning(System.String,System.String,System.Boolean)">
             
              <summary> Description of the Method
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<param name="warning">               Description of Parameter </param>
              *<param name="doUpdate">              Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.addKeyValuePair(System.String,System.String,System.String,System.String,System.Int32,System.Int64,System.Int64)">
             
              <summary> Adds a feature to the KeyValuePair attribute of the fConfigObject object
              </summary>
              *<param name="key">The feature to be added to the KeyValuePair attribute </param>
              *<param name="value">The feature to be added to the KeyValuePair attribute </param>
              *<param name="description">The feature to be added to the KeyValuePair attribute </param>
              *<param name="warning">The feature to be added to the KeyValuePair attribute </param>
              *<param name="type">The type to of the KeyValuePair attribute </param>
              *<param name="min">The min value of the KeyValuePair range attribute </param>
              *<param name="max">The max value of the KeyValuePair range attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.addKeyValuePair(System.String,System.String,System.Int32,System.Int64,System.Int64)">
             
              <summary> Adds a feature to the KeyValuePair attribute of the fConfigObject object
              </summary>
              *<param name="key">The feature to be added to the KeyValuePair attribute </param>
              *<param name="value">The feature to be added to the KeyValuePair attribute </param>
              *<param name="type">The type to of the KeyValuePair attribute </param>
              *<param name="min">The min value of the KeyValuePair range attribute </param>
              *<param name="max">The max value of the KeyValuePair range attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.changeKeyValuePair(System.String,System.String,System.String,System.String,System.Boolean)">
             
              <summary> Description of the Method
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<param name="value">                 Description of Parameter </param>
              *<param name="description">           Description of Parameter </param>
              *<param name="warning">               Description of Parameter </param>
              *<param name="doUpdate">              Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.changeKeyValuePair(System.String,System.String,System.Boolean)">
             
              <summary> Description of the Method
              </summary>
              *<param name="key">                   Description of Parameter </param>
              *<param name="value">                 Description of Parameter </param>
              *<param name="doUpdate">              Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary> 
              </summary>
              *<param name="oos">               </param>
              *<exception cref="T:System.Exception">   </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary> 
              </summary>
              <param name="ois">                          </param>
              <exception cref="T:System.Exception">              </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.getListeners">
             
              <summary> Gets the Listeners attribute of the fConfigObject object
              </summary>
              *<returns>    The Listeners value </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.addListener(com.pcbsys.foundation.configuration.fConfigurationListener)">
             
              <summary> Adds a feature to the Listener attribute of the fConfigObject object
              </summary>
              *<param name="cl">                    The feature to be added to the Listener
                  attribute </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.removeListener(com.pcbsys.foundation.configuration.fConfigurationListener)">
             
              <summary> Description of the Method
              </summary>
              *<param name="cl">                    Description of Parameter </param>
              *<exception cref="T:com.pcbsys.foundation.configuration.fConfigException">  Description of Exception </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.configuration.fConfigObject.update(System.String)">
             
              <summary> Description of the Method </summary>
              
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionWriteHandler.reachedHWM">
            
        </member>
        <member name="M:com.pcbsys.foundation.security.fLoginContext.logout(com.pcbsys.foundation.drivers.fDriver)">
             
            
             @param adriver 
             @exception fException 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionKeepAlive.checkStillReceivingEvents">
            We expect to receive an event from the server every myKeepAlive millis.  If we have not received one in this time
            then reschedule the check for 5000 ms later to allow for clock drift.  If we have not received one after this time
            then close the connection.
            @return false if we have closed the connection due to no events being received
        </member>
        <member name="M:com.pcbsys.foundation.security.fDefaultLoginContext.getUsername">
            For serialasation support + Reflection support
        </member>
        <member name="M:com.pcbsys.foundation.security.fDefaultLoginContext.#ctor(com.pcbsys.foundation.security.fSubject)">
             
            
             @param subject 
        </member>
        <member name="M:com.pcbsys.foundation.security.fDefaultLoginContext.getSubject(System.Object[])">
             
            
             @param parameters 
             @return 
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.foundation.security.fDefaultResponse.myResponse" -->
        <member name="M:com.pcbsys.foundation.security.fDefaultResponse.#ctor(System.Boolean)">
             
            
             @param response 
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fDefaultResponse.#ctor" -->
        <member name="M:com.pcbsys.foundation.drivers.fDriverFactory.#ctor(com.pcbsys.foundation.security.fAuthCredential)">
            
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fDriverFactory.addConnection(System.String)">
             
            
             @param URL 
        </member>
        <member name="M:com.pcbsys.foundation.io.fBaseEventFactory.getEventId(com.pcbsys.foundation.io.fBaseEvent)">
                     Map the event to a integer value
            
                     @param event The event object to return the ID with
                     @return The object ID
        </member>
        <member name="M:com.pcbsys.foundation.io.fBaseEventFactory.getEvent(System.Int32)">
                     Given the event ID return a new object
            
                     @param id The object ID
                     @return The event
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.getSockInputStream">
             Get local inputStream ( Not HTTP ) from socket
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.getSockOutputStream">
             Get outputstream ( Not http ) from socket
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.getID">
             getID - Returns connection id
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.getLocalID">
             getID - Returns local connection id
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.close">
            close - Closes all remote connections
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.isAlive">
             alive - Determine wether or not the connection is active
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.write(com.pcbsys.foundation.io.fBaseEvent,System.Boolean)">
             
            
             @param e 
             @param block 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.read">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.ToString">
            
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnection.actualWrite(com.pcbsys.foundation.io.fBaseEvent)">
             write - Writes event to network connection ( Either Socket or HTTP) @see
             nEvent
            
             @param e 
             @exception Exception 
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.drivers.fConnectionDetails.parseUrl(System.String)" -->
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.setHWMark(System.Int32)">
             
            
             @param p_hwMark 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.setLWMark(System.Int32)">
             
            
             @param p_lwMark 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.setBlockLimit(System.Int32)">
             
            
             @param p_blockWait 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.setAccessWaitLimit(System.Int32)">
             
            
             @param p_accessWait 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.setPushWaitLimit(System.Int32)">
             
            
             @param p_pushWait 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.getHWMark">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.getLWMark">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.getPushWaitLimit">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.getAccessWaitLimit">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.getBlockLimit">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fConnectionSettings.getBlockWeighting">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fCredential.equals(System.Object)">
             
            
             @param test 
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.#ctor">
            Default constructor for the dictionary
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.#ctor(System.String)">
             Used to reconstruct a dictionary from a string
            
             @param serialized A serialized dictionary in string format
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.containsKey(System.String)">
             Returns true if the specified key exists, false otherwise
            
             @param key a dictionary key
             @return true if it contains the key else false
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.remove(System.String)">
             Removes the key-value pair denoted by the specified key
            
             @param key a dictionary key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.copy(com.pcbsys.foundation.fbase.fEventDictionary)">
             Copies all key-value pairs to the specified dictionary
            
             @param p_dictionary copy the contents of p_dictionary to this
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getKeyIterator">
             Returns an enumeration of all the keys as String objects
            
             @return IEnumerator of the dictionary keys
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getClass(System.String)">
             Returns the name of the class name associated with the value for the
             specified key
            
             @param key dictionary key
             @return the string name of the class for the value of the specified key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.get(System.String)">
             Returns the value of associated with the specified key
            
             @param key dictionary key
             @return the object associated with the specified key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,com.pcbsys.foundation.fbase.fEventDictionary)">
             Puts the specified dictionary value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,com.pcbsys.foundation.fbase.fEventDictionary[])">
             Puts the specified dictionary array value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getDictionary(System.String)">
             Retrieves the data from the table based on the key as an fEventDictionary
            
             @param key Key to reference the data
             @return an fEventDictionary associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getDictionaryArray(System.String)">
             Retrieves the data from the table based on the key as an fEventDictionary array
            
             @param key Key to reference the data
             @return an fEventDictionary array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.String)">
             Places a key value pair into the hashtable
            
             @param key   Key to reference the data
             @param value Data to be stored
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.Byte[],System.String)">
             Puts the specified string value into the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.String[])">
             Puts the specified string array value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Int16)">
             Puts the specified short value to the dictionary
            
             @param key dictionary key
             @param s   the short value for the specified key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Int16[])">
             Puts the specified short array value to the dictionary
            
             @param key dictionary key
             @param s   the short array for the specified key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Byte)">
             Puts the specified byte value to the dictionary
            
             @param key dictionary key
             @param b   the byte value for the specified key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Byte[])">
             Puts the specified byte array value to the dictionary
            
             @param key dictionary key
             @param b   the byte srray for the specified key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getByte(System.String)">
             Retrieves the data from the table based on the key as a byte
            
             @param key Key to reference the data
             @return a byte associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getByteArray(System.String)">
             Retrieves the data from the table based on the key as a byte array
            
             @param key Key to reference the data
             @return a byte array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getShort(System.String)">
             Retrieves the data from the table based on the key as a short
            
             @param key Key to reference the data
             @return a short associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getShortArray(System.String)">
             Retrieves the data from the table based on the key as a short array
            
             @param key Key to reference the data
             @return a short array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Char)">
             Puts the specified char value to the dictionary
            
             @param key dictionary key
             @param c   the char value for the specified key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Char[])">
             Puts the specified char array value to the dictionary
            
             @param key dictionary key
             @param c   the char array for the specified key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getChar(System.String)">
             Retrieves the data from the table based on the key as a char
            
             @param key Key to reference the data
             @return a char associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getCharArray(System.String)">
             Retrieves the data from the table based on the key as a char array
            
             @param key Key to reference the data
             @return a char array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Boolean)">
             Places a key value pair into the hashtable
            
             @param key   Key to reference the data
             @param value Data to be stored
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.Byte[],System.Boolean)">
             Puts the specified bool value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Boolean[])">
             Puts the specified bool array value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Int32)">
             Places a key value pair into the hashtable
            
             @param key   Key to reference the data
             @param value Data to be stored
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.Byte[],System.Int32)">
             Puts the specified int value into the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Int32[])">
             Puts the specified int array value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getInt(System.String)">
             Retrieves the data from the table based on the key as an int
            
             @param key Key to reference the data
             @return an int associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getInt(System.Byte[])">
             Retrieves the data from the table based on the key as an int
            
             @param key Key to reference the data
             @return an int associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getIntArray(System.String)">
             Retrieves the data from the table based on the key as an int array
            
             @param key Key to reference the data
             @return an int array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Int64)">
             Places a key value pair into the hashtable
            
             @param key   Key to reference the data
             @param value Data to be stored
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.Byte[],System.Int64)">
             Puts the specified long value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Int64[])">
             Puts the specified long array value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Single)">
             Places a key value pair into the hashtable
            
             @param key   Key to reference the data
             @param value Data to be stored
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.Byte[],System.Single)">
             Puts the specified float value into the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Single[])">
             Puts the specified float array value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getFloat(System.String)">
             Retrieves the data from the table based on the key as a float
            
             @param key Key to reference the data
             @return a float associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getFloat(System.Byte[])">
             Retrieves the data from the table based on the key as a float
            
             @param key Key to reference the data
             @return a float associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getFloatArray(System.String)">
             Retrieves the data from the table based on the key as a float array
            
             @param key Key to reference the data
             @return a float array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Double)">
             Places a key value pair into the hashtable
            
             @param key   Key to reference the data
             @param value Data to be stored
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.put(System.String,System.Double[])">
             Puts the specified double array value to the dictionary
            
             @param key   dictionary key
             @param value dictionary value
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getString(System.String)">
             Retrieves the data from the table based on the key as a string
            
             @param key Key to reference the data
             @return a string with the value associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getStringArray(System.String)">
             Retrieves the data from the table based on the key as a string array
            
             @param key Key to reference the data
             @return a string array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getString(System.Byte[])">
             Retrieves the data from the table based on the key as a string
            
             @param key Key to reference the data
             @return a string associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getLong(System.String)">
             Retrieves the data from the table based on the key as a long
            
             @param key Key to reference the data
             @return a long with the value associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getLong(System.Byte[])">
             Retrieves the data from the table based on the key as a long
            
             @param key Key to reference the data
             @return a long associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getLongArray(System.String)">
             Retrieves the data from the table based on the key as a long array
            
             @param key Key to reference the data
             @return a long array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getBoolean(System.String)">
             Retrieves the data from the table based on the key as a bool
            
             @param key Key to reference the data
             @return a bool with the value associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getBoolean(System.Byte[])">
             Retrieves the data from the table based on the key as a bool
            
             @param key Key to reference the data
             @return a bool associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getBooleanArray(System.String)">
             Retrieves the data from the table based on the key as a bool array
            
             @param key Key to reference the data
             @return a bool array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getDouble(System.String)">
             Retrieves the data from the table based on the key as a double
            
             @param key Key to reference the data
             @return a double with the value associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getDoubleArray(System.String)">
             Retrieves the data from the table based on the key as a double array
            
             @param key Key to reference the data
             @return a double array associated with this key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.ToString">
             Used to serialize this dictionary into a string format.
             <p/>
             Use this string as a tag in a dbus publish call
            
             @return Serialized dictionay in string format
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.isValid">
             Returns true if the dictionary is valid, false otherwise
            
             @return true if the dictionary is valid else false
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getSize">
             Returns the number of key-value pairs this dictionary contains
            
             @return the number of entries in the dictionary
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             Reads this dictionary object from an event stream (Internal Use)
            
             @param ois 
             @throws Exception            
             @throws ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             Writes this dictionary object to an event stream (Internal Use)
            
             @throws Exception 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.getObjectFromHash(System.String)">
             
            
             @param key 
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.putObjectInHash(System.String,System.Object)">
             Puts the specified object into the dictionary
            
             @param key dictionary key
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.readArray(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @return 
             @throws Exception            
             @throws ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.writeArray(com.pcbsys.foundation.io.fEventOutputStream,System.Object)">
             
            
             @param oos 
             @param obj 
             @throws Exception 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.deserialize(System.String)">
             Recreates the dictionary from the string
            
             @param serialized Dictionary in a serialized form
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fEventDictionary.extractKeyPair(System.String)">
             Extracts a key value pair from a substring
            
             @param keyPair Key value pair to be extracted
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.foundation.io.fEventInputStream.sBufReadAheadSize" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.foundation.io.fEventInputStream.myByteCount" -->
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.#ctor(System.IO.Stream)">
             
            
             @param is 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.close">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.readBoolean">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.readByte">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.readInt">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.readLong">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.readFloat">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.readString">
             
            
             @return 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.read(System.Byte[])">
             
            
             @param buffer 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.deStreamObject(System.Byte)">
             
            
             @return 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.getByteCount">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventInputStream.readComplete(System.Byte[],System.Int32)">
             
            
             @param buffer 
             @param size 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.#ctor(System.IO.Stream,System.Boolean)">
             
            
             @param os 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.writeBoolean(System.Boolean)">
             
            
             @param aBool 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.writeByte(System.Byte)">
             
            
             @param aByte 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.writeInt(System.Int32)">
             
            
             @param x 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.writeLong(System.Int64)">
             
            
             @param x 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.writeFloat(System.Single)">
             
            
             @param aFloat 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.writeString(System.String)">
             
            
             @param aString 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.write(System.Byte[])">
             
            
             @param buffer 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.getByteCount">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.close">
             
            
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.io.fEventOutputStream.writeExternalable(com.pcbsys.foundation.fbase.fExternalable)">
             
            
             @param ext 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.foundation.drivers.configuration.fHTTPConfig">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPConfig.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPConfig.#ctor(System.String,System.String,System.Int32)">
             
              <summary>
              </summary>
             <param name="name">     </param>
             <param name="adapter">  </param>
             <param name="port">     </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPConfig.#ctor(System.String,System.String,System.Int32,System.Boolean)">
             
              <summary>
              </summary>
             <param name="name">       </param>
             <param name="adapter">    </param>
             <param name="port">       </param>
             <param name="autostart">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPConfig.getPlugin">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPConfig.setPlugin(System.Collections.ArrayList)">
             
              <summary>
              </summary>
             <param name="className">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPConfig.isNativeCometAllowed">
            
             <summary>Enables or disables javascript on a interface</summary>
             <returns> true if javascipt is enabled on this interface </returns>
            
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPConfig.setNativeCometAllowed(System.Boolean)">
            
             <summary>Sets javascript to be enabled or disabled</summary>
             <param name="isNativeCometAllowed"> true enables javascript on a interface</param>
            
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPConfig.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="eos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPConfig.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="eis">  </param>
             <exception cref="T:System.Exception">             </exception>
              
        </member>
        <member name="T:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.#ctor(System.String,System.String,System.Int32)">
             
              <summary>
              </summary>
             <param name="name">     </param>
             <param name="adapter">  </param>
             <param name="port">     </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.#ctor(System.String,System.String,System.Int32,System.Boolean)">
             
              <summary>
              </summary>
             <param name="name">       </param>
             <param name="adapter">    </param>
             <param name="port">       </param>
             <param name="autostart">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.getPrivateKeyPassword">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.setPrivateKeyPassword(System.String)">
             
              <summary>
              </summary>
             <param name="password">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.getAlias">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.setAlias(System.String)">
             
              <summary>
              </summary>
             <param name="alias">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.getCertRequired">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.setCertRequired(System.Boolean)">
             
              <summary>
              </summary>
             <param name="required">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.getKeyStore">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.setKeyStore(System.String)">
             
              <summary>
              </summary>
             <param name="keyStore">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.getKeyStorePassword">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.setKeyStorePassword(System.String)">
             
              <summary>
              </summary>
             <param name="keyStorePassword">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.getTrustStore">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.setTrustStore(System.String)">
             
              <summary>
              </summary>
             <param name="trustStore">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.getTrustStorePassword">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.setTrustStorePassword(System.String)">
             
              <summary>
              </summary>
             <param name="trustStorePassword">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.setEnabledCiphers(System.String[])">
             
              <summary>
              </summary>
             <param name="ciphers">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.getEnabledCiphers">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.setConfigredCiphers(System.String[])">
             
              <summary>
              </summary>
             <param name="ciphers">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.getConfiguredCiphers">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="eos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fHTTPSConfig.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="eis">  </param>
             <exception cref="T:System.Exception">             </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fLogger.getLogLevel">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fLoopConfig.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="eis">  </param>
             <exception cref="T:System.Exception">             </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.security.fPrincipal.#ctor(System.String)">
             
            
             @param name 
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fPrincipal.#ctor" -->
        <member name="M:com.pcbsys.foundation.security.fPrincipal.getName">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fPrincipal.hashCode">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fPrincipal.ToString">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fPrincipal.equals(System.Object)">
             
            
             @param another 
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.security.fPrincipal.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.foundation.security.fPrincipal.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fProcessQueue.#ctor(com.pcbsys.foundation.fbase.fQueueHandler,System.Int32,System.Int32)">
             
            
             @param aHandler 
             @param lowWaterMark 
             @param highWaterMark 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fProcessQueue.getHandler">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fProcessQueue.length">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fProcessQueue.size">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fProcessQueue.isSuspended">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fProcessQueue.push(System.Object)">
             
            
             @param anObject 
        </member>
        <member name="M:com.pcbsys.foundation.fbase.fProcessQueue.close">
            
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.foundation.security.fSecurityManager.getEveryoneUser" -->
        <member name="T:com.pcbsys.foundation.drivers.configuration.fSocketConfig">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSocketConfig.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSocketConfig.#ctor(System.String,System.String,System.Int32)">
             
              <summary>
              </summary>
             <param name="name">     </param>
             <param name="adapter">  </param>
             <param name="port">     </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSocketConfig.#ctor(System.String,System.String,System.Int32,System.Boolean)">
             
              <summary>
              </summary>
             <param name="name">       </param>
             <param name="adapter">    </param>
             <param name="port">       </param>
             <param name="autostart">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSocketConfig.#ctor(System.String,System.String,System.String,System.Int32,System.Boolean)">
             
              <summary>
              </summary>
             <param name="name">       </param>
             <param name="protocol">   </param>
             <param name="adapter">    </param>
             <param name="port">       </param>
             <param name="autostart">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSocketConfig.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="eos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSocketConfig.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="eis">  </param>
             <exception cref="T:System.Exception">             </exception>
              
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.foundation.drivers.fSocketDriver.mySocket" -->
        <member name="M:com.pcbsys.foundation.drivers.fSocketDriver.open">
             
            
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fSocketDriver.getInputStream">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fSocketDriver.getOutputStream">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fSocketDriver.close">
             
            
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.foundation.drivers.configuration.fSSLConfig">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.#ctor(System.String,System.String,System.Int32)">
             
              <summary>
              </summary>
             <param name="name">     </param>
             <param name="adapter">  </param>
             <param name="port">     </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.#ctor(System.String,System.String,System.Int32,System.Boolean)">
             
              <summary>
              </summary>
             <param name="name">       </param>
             <param name="adapter">    </param>
             <param name="port">       </param>
             <param name="autostart">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.getAlias">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.getPrivateKeyPassword">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.setPrivateKeyPassword(System.String)">
             
              <summary>
              </summary>
             <param name="password">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.setAlias(System.String)">
             
              <summary>
              </summary>
             <param name="alias">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.getCertRequired">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.setCertRequired(System.Boolean)">
             
              <summary>
              </summary>
             <param name="required">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.getKeyStore">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.setKeyStore(System.String)">
             
              <summary>
              </summary>
             <param name="keyStore">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.getKeyStorePassword">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.setKeyStorePassword(System.String)">
             
              <summary>
              </summary>
             <param name="keyStorePassword">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.getTrustStore">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.setTrustStore(System.String)">
             
              <summary>
              </summary>
             <param name="trustStore">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.getTrustStorePassword">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.setTrustStorePassword(System.String)">
             
              <summary>
              </summary>
             <param name="trustStorePassword">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.setEnabledCiphers(System.String[])">
             
              <summary>
              </summary>
             <param name="ciphers">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.getEnabledCiphers">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.setConfigredCiphers(System.String[])">
             
              <summary>
              </summary>
             <param name="ciphers">  </param>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.getConfiguredCiphers">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="eos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fSSLConfig.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="eis">  </param>
             <exception cref="T:System.Exception">             </exception>
              
        </member>
        <member name="T:com.pcbsys.foundation.drivers.configuration.fStreamHelper">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.drivers.configuration.fStreamHelper.write(com.pcbsys.foundation.drivers.configuration.fDriverConfig,com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="cfg">  </param>
             <param name="eos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fURLDriver.open">
            
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fURLDriver.getInputStream">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fURLDriver.getOutputStream">
             
            
             @return 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fURLDriver.getConnectionWeight">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fURLDriver.close">
             
            
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fURLDriver.makeConnection(System.Net.HttpWebResponse)">
             
            
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.foundation.drivers.fURLDriver.actualFlush(System.Byte[])">
             
            
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.foundation.collections.MergeManager">
            
             <summary>Title:        Nirvana
              Description:
              Copyright:    Copyright (c) 2002
              Company:      my-channels
              @author Matthew Buckton
              @version 1.0 </summary>
             
        </member>
        <member name="M:com.pcbsys.foundation.security.sasl.Defs.hashPassword(System.String,System.Security.SecureString)">
            This should be defined to match the java hash method in fSAGInternalUserRepositoryAdapter
        </member>
        <member name="M:com.pcbsys.foundation.security.sasl.fSasl.createSaslClient(com.pcbsys.foundation.security.sasl.MechNames[],System.String,System.String,com.pcbsys.foundation.security.fAuthCredential)">
            Create a SASL client
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nSynchronous">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.#ctor(System.Int32)">
             
            
             @param id 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.getSize">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.isSynchronous">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.getDictionary">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.getId">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.getKey">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.setKey(System.Int64)">
             
            
             @param id 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEvent.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSynchronous.#ctor(System.Int32)">
             
            
             @param id 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSynchronous.#ctor(System.Int32,System.Int32)">
             
            
             @param id 
             @param uniqueId 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSynchronous.isSynchronous">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSynchronous.getRequestId">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSynchronous.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSynchronous.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nCachedChannelAttributes">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nCachedChannelAttributes.myChannelAttributeId" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nCachedChannelAttributes.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nCachedChannelAttributes.#ctor(System.Int32,System.Int64)">
             
            
             @param id 
             @param channelAttributeId 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nCachedChannelAttributes.getChannelAttributesId">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nCachedChannelAttributes.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nCachedChannelAttributes.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nAddJoin">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nAddJoin.MYallowPurge" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nAddJoin.myDestination" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddJoin.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddJoin.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes,com.pcbsys.nirvana.nbase.nChannelAttributes,System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean)">
             
            
             @param source 
             @param destination 
             @param hopCount 
             @param routable 
             @param selector 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddJoin.#ctor(System.Int32,com.pcbsys.nirvana.nbase.nChannelAttributes,com.pcbsys.nirvana.nbase.nChannelAttributes,System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean)">
             
            
             @param id 
             @param source 
             @param destination 
             @param hopCount 
             @param routable 
             @param selector 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddJoin.getHopCount">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddJoin.canRoute">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddJoin.getSelector">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddJoin.getDestination">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddJoin.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddJoin.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nAddRealm">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nAddRealm.myRealm" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddRealm.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddRealm.#ctor(com.pcbsys.nirvana.nbase.nRealm)">
             
            
             @param newRealm 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddRealm.getRealm">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddRealm.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nAddRealm.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nBasePublishEvent">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.sHasSignature" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.sIsDom" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.myChannelAttribId" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.myData" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.MYisPersist" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.getDictionary">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.getChannelAttributesId">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.getTag">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.getData">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.isDom">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.isTimeOuts">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.setChannelAttributesId(System.Int64)">
             
            
             @param id 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBasePublishEvent.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nBaseUser">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nBaseUser.myChannelAttributes" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nBaseUser.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBaseUser.#ctor(System.Int32,com.pcbsys.nirvana.nbase.nChannelAttributes)">
             
            
             @param id 
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBaseUser.setChannelAttributes(com.pcbsys.nirvana.nbase.nChannelAttributes)">
             
            
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBaseUser.getChannelAttributes">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBaseUser.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nBaseUser.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nChangeAttributes">
            
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nDelJoin">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nDelJoin.myDestination" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelJoin.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelJoin.#ctor(System.String,com.pcbsys.nirvana.nbase.nChannelAttributes)">
             
            
             @param key 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelJoin.getDestination">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelJoin.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelJoin.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nDelRealm">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nDelRealm.myRealmName" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelRealm.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelRealm.#ctor(System.String)">
             
            
             @param name 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelRealm.getName">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelRealm.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDelRealm.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nExceptionEvent">
            
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nFlowControl">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetChannelList.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetChannelList.#ctor(System.String)">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetChannelList.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetChannelList.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nGetDetails">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nGetDetails.myFirstEventTime" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes)">
             
            
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.getNoOfReaders">
             Retrieves the total number of readers on this queue
            
             @return The current number of readers on the queue as an int
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.getNoOfEvents">
             Retrieves the total number of events in this queue
            
             @return The current number of events on the queue
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.getTotalMemorySize">
             Retrieves the total size in bytes the queue currently consumes
            
             @return total size in bytes the queue currently consumes
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.getFirstEventTime">
             Retrieves the timestamp of the first event in this queue
            
             @return The timestamp of the first event in the queue as a long
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.getLastEventTime">
            Retrieves the timestamp of the last event in this queue
            @return The timestamp of the last event in the queue as a long
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.setNoOfReaders(System.Int32)">
             sets the current number of readers
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.setNoOfEvents(System.Int32)">
            Stes the current number of readers on the queue
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.setFirstEventTime(System.Int64)">
            Sets the time of the first event
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.setLastEventTime(System.Int64)">
            Sets the time of the last event
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.setTotalMemorySize(System.Int64)">
            Sets the total memory used by the queue
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetDetails.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nGetJoin">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastEID.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastEID.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes)">
             
            
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastEID.getEID">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastEID.setEID(System.Int64)">
             
            
             @param eid 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastEID.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastEID.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nGetLastStoredEID.myEID" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastStoredEID.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastStoredEID.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes)">
             
            
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastStoredEID.getEID">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastStoredEID.setEID(System.Int64)">
             
            
             @param eid 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastStoredEID.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception java.io.Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetLastStoredEID.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception java.io.Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nGetRealm">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nGetRealm.myRealms" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetRealm.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetRealm.#ctor(System.String)">
             
            
             @param name 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetRealm.getName">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetRealm.getRealm">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetRealm.setRealm(com.pcbsys.nirvana.nbase.nRealm)">
             
            
             @param realm 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetRealm.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nGetRealm.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nHeartBeat">
            
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nMakeChannel">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nMakeChannel.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nMakeChannel.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes)">
             
            
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nMakeChannel.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nMakeChannel.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nManageNamedSub.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nManageNamedSub.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nPeekQueue">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nPeekQueue.myCurrentIdx" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nPeekQueue.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPeekQueue.getIndex">
            Returns the index into the queue that the context is up to
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPeekQueue.setIndex(System.Int32)">
            Set the current window index
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPeekQueue.getWindowSize">
             Retrieves the size of the window used by this queue peek context
            
             @return The size of the window
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPeekQueue.setWindowSize(System.Int32)">
             Sets the size of the window
            
             @param size A size greater than 0
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPeekQueue.setHasMore(System.Boolean)">
            Sets the flag to true if more events in the queue. (Server specific)
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPeekQueue.getSelector">
            Retrieves the message selector (if any) set to filter events on this peek
            context.
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPeekQueue.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPeekQueue.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nPopQueue">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPopQueue.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes,System.String)">
             
            
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPopQueue.getTimeout">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPopQueue.getCommand">
            <summary>
            The queue operation command - either {@link nPopQueueCommand#POP} or {@link nPopQueueCommand#CLOSE}
            </summary>
            <returns></returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPopQueue.getReaderUniqueId">
            <summary>
            An identifier that uniquely identifies the reader which performs this queue operation within the session.
            This will be paired with the connection id to uniquely identify the reader within the Universal Messaging server.
            </summary>
            <returns>An identifier that uniquely identifies the reader which performs this queue operation within the session</returns>
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nPopQueue.Command">
            <summary>
            Queue operation command.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nPublished.myEID" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.#ctor(com.pcbsys.nirvana.nbase.events.nPublishRequest)">
             
            
             @param request 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.#ctor(System.Int32,com.pcbsys.nirvana.nbase.events.nPublished)">
             
            
             @param id 
             @param request 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.setKey(System.Int64)">
             
            
             @param key 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.isSynchronous">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.setEID(System.Int64)">
             
            
             @param eid 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.getKey">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.getEID">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublished.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nPublishedJoin">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nPublishedJoin.myHopCount" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nPublishedJoin.MYisRoutable" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishedJoin.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishedJoin.#ctor(com.pcbsys.nirvana.nbase.events.nPublished,System.Int32,System.Byte[],System.Int64,System.Boolean)">
             
            
             @param request 
             @param hopCount 
             @param joinInfo 
             @param routable 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishedJoin.decrementHopCount">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishedJoin.getHopCount">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishedJoin.getJoinInfo">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishedJoin.isRoutable">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishedJoin.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishedJoin.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishRequest.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishRequest.#ctor(System.Int64,System.Byte[],System.Byte[],System.Byte,com.pcbsys.foundation.fbase.fEventDictionary,System.Int64,System.Boolean,System.Byte[])">
             
            
             @param uniqueId 
             @param tag 
             @param data 
             @param dom 
             @param dictionary 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishRequest.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPublishRequest.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nPurge">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nPurge.myEndEID" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nPurge.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPurge.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes,System.Int64,System.Int64,System.String,System.Boolean)">
             
            
             @param attrib 
             @param start 
             @param end 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPurge.getStartEID">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPurge.getEndEID">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPurge.setStartEID(System.Int64)">
             
            
             @param eid 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPurge.setEndEID(System.Int64)">
             
            
             @param eid 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPurge.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nPurge.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.events.nQueueTransactionStatus.UNKNOWN_READER_ID">
            <summary>
            Represents unknown reader. Using this reader identifier will request that the Universal Messaging server tries to identify the reader
            which performs this queue transaction request automatically. This will typically be less performant and must be used only
            in case the reader cannot be identified for some reason.
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nQueueTransactionStatus.getReaderUniqueId">
            <summary>
            An identifier that uniquely identifies the reader which performs this queue operation within the session.
            This will be paired with the connection id to uniquely identify the reader within the Universal Messaging server.
            </summary>
            <returns>An identifier that uniquely identifies the reader which performs this queue operation within the session</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nQueueTransactionStatus.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception java.io.Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nQueueTransactionStatus.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception java.io.Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nRedirection">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nRedirection.myNormalizedName" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nRedirection.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nRedirection.#ctor(com.pcbsys.nirvana.nbase.nRealm,System.Int32,System.String)">
             
            
             @param realm 
             @param originalEvent 
             @exception fException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nRedirection.getRealm">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nRedirection.getNormalizedName">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nRedirection.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nRedirection.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nRemoveSub">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nRemoveSub.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nRemoveSub.#ctor(System.Int64,System.Int64)">
             
            
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nRemoveSub.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nRemoveSub.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nSecurity">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nSecurity.myMessage" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nSecurity.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSecurity.#ctor(System.String,System.Int32)">
             
            
             @param message 
             @param id 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSecurity.getMessage">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSecurity.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nSecurity.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nServerDisconnect">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nServerDisconnect.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nServerDisconnect.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nServerDisconnect.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nServerHandshake">
            
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.myDiscWait" -->
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.myKaWait" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
             
            
             @param eventWait 
             @param discWait 
             @param txPubWait 
             @param kaWait 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.#ctor(System.Int64,System.Int64,System.Int64,System.Int64,System.Int32,System.Int32)">
             
            
             @param eventWait 
             @param discWait 
             @param txPubWait 
             @param kaWait 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.getEventWait">
             nStatusEvent Interface
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.getDiscWait">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.getTxPubWait">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.getKaWait">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.fromBytes(System.Byte[])">
             
            
             @param buffer 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTimeOutUpdate.toBytes">
             
            
             @return 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nTXAbort">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nTXAbort.myTTL" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXAbort.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXAbort.#ctor(System.Int64,System.Int64,System.Int64)">
             
            
             @param channelAttributeId 
             @param id 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXAbort.getTXId">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXAbort.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXAbort.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nTXCommit">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXCommit.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXCommit.getTXId">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXCommit.getStartEID">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXCommit.setStartEID(System.Int64)">
             
            
             @param eid 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXCommit.getEndEID">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXCommit.setEndEID(System.Int64)">
             
            
             @param eid 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXCommit.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXCommit.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nTXPublishRequest">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nTXPublishRequest.myChannelAttributeId" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXPublishRequest.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXPublishRequest.#ctor(System.Int64,System.Int64,System.Collections.Generic.List{com.pcbsys.nirvana.nbase.events.nPublished},System.Int64)">
             
            
             @param txId 
             @param nEvents 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXPublishRequest.getTXId">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXPublishRequest.getEvents">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXPublishRequest.isSynchronous">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXPublishRequest.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nTXPublishRequest.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nUserFind">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserFind.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserFind.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes)">
             
            
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserFind.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserFind.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nUserSubscribe">
            
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nUserSubscribe.sendPurgeRequestFlag" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserSubscribe.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserSubscribe.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes,System.Int64,System.String,System.Int64,System.Int64,System.Boolean)">
             
            
             @param attrib 
             @param startEID 
             @param selector 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserSubscribe.getEID">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserSubscribe.getSelector">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserSubscribe.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nUserSubscribe.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.nChannelAttributes">
            This class is a container for the attributes necessary to create/find a Nirvana channel.
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.#ctor">
            Default constructor
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes)">
            Default constructor
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
             Constructs a nChannelAttributes object with the values specified.
            
             @param _name A string specifying the channel name
             @param _maxEvents An int specifying the maximum number of events this
             channel can contain (i.e. the capacity)
             @param _ttl An int specifying the Time To Live (TTL) for events published in this
             channel (i.e. the age)
             @param _type An int specifying the channel type. Valid values are nConstants.CHAN_RELIABLE or
             nConstants.CHAN_PERSISTIENT
             @exception nException is thrown if an incorrect parameter is passed to the constructor
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.#ctor(System.String,System.Int32,System.Int64,System.Int32,com.pcbsys.nirvana.nbase.nRealm)">
             Constructs a nChannelAttributes object with the values specified.
            
             @param _name A string specifying the channel name
             @param _maxEvents An int specifying the maximum number of events this
             channel can contain (i.e. the capacity)
             @param _ttl An int specifying the Time To Live (TTL) for events published in this
             channel (i.e. the age)
             @param _type An int specifying the channel type. Valid values are nConstants.CHAN_RELIABLE or
             nConstants.CHAN_PERSISTENT
             @param _realm A nRealm object specifying the realm this channel exists within
             @exception nException is thrown if an incorrect parameter is passed to the constructor
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.setMaxEvents(System.Int32)">
             Sets the maximum number of events the channel can contain. (i.e. the capacity)
            
             @param value An int specifying the max number of events
             @exception nException is thrown if an incorrect value is passed
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.getMaxEvents">
             Gets the maximum number of events the channel can contain. (i.e. the capacity)
            
             @return An int specifying the maximum number of events this channel can
             currently contain (i.e. the current capacity)
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.isExternal">
             Gets the isExternal flag to find out if the channel is marked as external.
            
             @return  A bool specifying whether this channel is external or not
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.setTTL(System.Int64)">
             Sets the Time To Live (TTL) value for each event contained in the channel
            
             @param value A long specifying the new TTL value
             @exception nException is thrown if an invalid TTL value is specified
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.getTTL">
             Gets the Time To Live (TTL) value for each event contained in the channel
            
             @return A long specifying the current TTL value setting for the channel
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.setUniqueId(System.Int64)">
             Sets the Unique ID value for the channel
            
             @param id A long specifying the new unique id value
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.getUniqueId">
             Gets the Unique ID value for the channel
            
             @return A long specifying the current Unique ID value for the channel
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.setRealm(com.pcbsys.nirvana.nbase.nRealm)">
             Sets the realm the channel exists within, marking the channel as external.
             If the realm is not set, it is implied that the channel exists within the
             realm you have a session to and use this object.
            
             @param _realm An nRealm object specifying the realm the channel exists within
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.getRealm">
             Gets the realm this channel exists within.
            
             @return an nRealm object specifying the realm this channel exists within
             @exception nException is thrown if a realm is not set, i.e. the channel exists
             within the realm you have a session to and use this object.
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.setName(System.String)">
             Set the channel name for this channel attribute object. If the channel
             begins with '/', a realm path is also created and the channel is marked as
             external.
            
             @param channelName A string specifying the name of the channel for this
             channel attribute object.
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.getFullName">
             Gets the full name of a channel, including the realm path if set.
            
             @return A string specifying the full name of a channel.
             @exception nException is thrown if the name value is not set
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.getName">
             Gets the channel name
            
             @return A string specifying the name value of the channel
             @exception nException is throw if the name value is not set
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.setType(System.Int32)">
             Sets the type of channel.
            
             @param aType An int specifying the channel type. Valid values are
             nConstants.CHAN_RELIABLE or nConstants.CHAN_PERSISTIENT
             @exception nException is thrown if an illegal channel type is specified
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.getType">
             Gets the channel type
            
             @return An int specifying the channel type. Valid values are
             nConstants.CHAN_RELIABLE or nConstants.CHAN_PERSISTIENT
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             Reads the object from an external Event InputStream
            
             @param ois An Event InputStream containing the externalised object
             @exception Exception is thrown if in IO error occurs while reading of the stream
             @exception ClassNotFoundException is thrown if the stream contains a class that can not be
             found in the CLASSPATH
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             Writes the object to an external Event OutputStream
            
             @param oos An event outputstream containing the externalised object
             @exception Exception is thrown if an IO error occurs while writing to the stream
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.getSize">
             Gets the object's size in bytes
            
             @return An int specifying the object's size in bytes
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelAttributes.ToString">
             Gets a string representation of this object
            
             @return a string containing all values of this object
        </member>
        <member name="T:com.pcbsys.nirvana.client.nChannelAttributes">
               
                <summary> This class is a container for the attributes necessary to create or locate a Nirvana channel or queue. </summary>
                
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.RELIABLE_TYPE">
                   
                    <summary> Specifies a reliable (in memory but with EIDs retained) channel type </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.PERSISTENT_TYPE">
                   
                    <summary> Specifies a persistent (on disk) channel type </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.MIXED_TYPE">
                   
                    <summary> Specifies a mixed (persistence and ttl set on a per event basis) channel type </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.CHANNEL_MODE">
                   
                    <summary> Specifies a channel (or topic) mode for the pub/sub model </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.QUEUE_MODE">
                   
                    <summary> Specifies a queue (point 2 point) mode for the queue model </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.sAllowNamedAccess">
                   
                    <summary> Allow everyone to create a named object on this channel </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.sAllowQueuePopAccess">
                   
                    <summary> Allow everyone to pop events from the queue, (Only valid on Queues) </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.sAllowLastEIDAccess">
                   
                    <summary> Get the last known Event ID on the channel / queue </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.sAllowPurgeAccess">
                   
                    <summary> Allow everyone to purge events from the channel ( Only valid on channels ) </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.sAllowSubscribeAccess">
                   
                    <summary> Allow everyone to subscribe to the channel ( Only valid on channels ) </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.sAllowPublishAccess">
                   
                    <summary> Allow everyone to write events to the channel / queue </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.sAllowFullAccess">
                   
                    <summary> Allow everyone to do everything on the channel / queue (Use with extreme caution since it bypasses any security checks for this channel / queue ) </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.sAllowReadACLAccess">
                   
                    <summary>  Allow everyone to read the ACL lists </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.sAllowManageACLAccess">
                   
                    <summary> Allow everyone to add / remove acl entries on the channel / queue </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.DICTIONARY_STAMPING_ENABLED">
                   
                    <summary> Dictionary stamping state - ENABLED </summary>
             
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.DICTIONARY_STAMPING_DISABLED">
                   
                    <summary> Dictionary stamping state - DISABLED </summary>
             
        </member>
        <member name="F:com.pcbsys.nirvana.client.nChannelAttributes.DICTIONARY_STAMPING_DEFAULT">
                   
                    <summary> Dictionary stamping state - DEFAULT; by default the engine will fall back to the server-wide configuration setting </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.#ctor">
                   
                  <summary> Default constructor </summary>
                  
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.#ctor(System.String)">
                   
                  <summary> Takes a channel or queue name </summary>
                  <param name="name"> name of the channel </param>
                  
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes)">
                   
              <summary> Constructs from the base attribute class
              </summary>
              <param name="attr"> Base class used to construct this class </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
                   
              <summary> Constructs a nChannelAttributes object with the values specified.
              </summary>
              <param name="_name"> A string specifying the channel name </param>
              <param name="_maxEvents"> An int specifying the maximum number of events this
              channel can contain (i.e. the capacity) </param>
              <param name="_ttl"> An int specifying the Time To Live (TTL) for events published in this
              channel (i.e. the age) </param>
              <param name="_type"> An int specifying the channel type. Valid values are nConstants.CHAN_RELIABLE or
              nConstants.CHAN_PERSISTENT </param>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> is thrown if an incorrect parameter is passed to the constructor </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.#ctor(System.String,System.Int32,System.Int64,System.Int32,com.pcbsys.nirvana.client.nRealm)">
                   
              <summary> Constructs a nChannelAttributes object with the values specified.
              </summary>
              <param name="_name"> A string specifying the channel name </param>
              <param name="_maxEvents"> An int specifying the maximum number of events this
              channel can contain (i.e. the capacity) </param>
              <param name="_ttl"> An int specifying the Time To Live (TTL) for events published in this
              channel (i.e. the age) </param>
              <param name="_type"> An int specifying the channel type. Valid values are nConstants.CHAN_RELIABLE or
              nConstants.CHAN_PERSISTENT </param>
              <param name="_realm"> A nRealm object specifying the realm this channel exists within </param>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> is thrown if an incorrect parameter is passed to the constructor </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setClusterWide(System.Boolean)">
                   
              <summary> Specifies whether this channel is a cluster channel, where it will exist in all member nodes within the cluster.
              </summary>
              <param name="flag"> is this channel to exist across all cluster realms </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.isClusterWide">
                   
              <summary> Is this channel cluster wide </summary>
              <returns> if this channel is cluster wide </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setDeadEventHandler(com.pcbsys.nirvana.client.nAbstractChannel)">
                   
              <summary> Set the dead event handler store for this channel / queue. When events reach there ttl or the channel hits its ttl, but have not been consumed, they can be placed in a dead event store.
              Setting the dead event store to be another valid channel or queue will enable this functionality and allow you to keep track of events that have died in this manner. </summary>
              <param name="store"> the channel or queue to be set as the dead event store </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setDeadEventHandler(com.pcbsys.nirvana.client.nChannelAttributes)">
                    
               <summary> Set the dead event handler store for this channel / queue. When events reach there ttl or the channel hits its ttl, but have not been consumed, they can be placed in a dead event store.
               Setting the dead event store to be another valid channel or queue will enable this functionality and allow you to keep track of events that have died in this manner. </summary>
               <param name="store"> the attributes of the channel or queue to be set as the dead event store </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setPublishKeys(com.pcbsys.nirvana.client.nChannelPublishKeys[])">
                   
              <summary> Sets the channel keys for this channel
              </summary>
              <param name="keys"> An array of nChannelPublishKeys to be assigned to this channel </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getPublishKeys">
                   
              <summary> Gets the channel keys for this channel
              </summary>
              <returns> nChannelPublishKeys[] The currently configured publish keys for this channel </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setMaxEvents(System.Int32)">
                   
              <summary> Sets the maximum number of events the channel can contain. (i.e. the capacity)
              </summary>
              <param name="value"> An int specifying the max number of events </param>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> is thrown if an incorrect value is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getMaxEvents">
                   
              <summary> Gets the maximum number of events the channel can contain. (i.e. the capacity)
              </summary>
              <returns> An int specifying the maximum number of events this channel can
              currently contain (i.e. the current capacity) </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.isExternal">
                   
              <summary> Gets the isExternal flag to find out if the channel is marked as external.
              </summary>
              <returns>  A bool specifying whether this channel is external or not </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setTTL(System.Int64)">
                   
              <summary> Sets the Time To Live (TTL) value for each event contained in the channel
              </summary>
              <param name="value"> A long specifying the new TTL value </param>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> is thrown if an invalid TTL value is specified </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getTTL">
                   
              <summary> Gets the Time To Live (TTL) value that will be applied to each event contained in the channel
              </summary>
              <returns> A long specifying the current TTL value setting for the channel </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setUniqueId(System.Int64)">
                   
              <summary> Sets the Unique ID value for the channel
              </summary>
              <param name="id"> A long specifying the new unique id value </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getUniqueId">
                   
              <summary> Gets the Unique ID value for the channel
              </summary>
              <returns> A long specifying the current Unique ID value for the channel </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setRealm(com.pcbsys.nirvana.client.nRealm)">
                   
              <summary> Sets the realm the channel exists within, marking the channel as external.
              If the realm is not set, it is implied that the channel exists within the
              realm you have a session to and use this object.
              </summary>
              <param name="_realm"> An nRealm object specifying the realm the channel exists within </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getRealm">
                   
              <summary> Gets the realm this channel exists within.
              </summary>
              <returns> an nRealm object specifying the realm this channel exists within
              within the realm you have a session to and use this object. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setName(System.String)">
                   
              <summary> Set the channel name for this channel attribute object. If the channel
              begins with '/', a realm path is also created and the channel is marked as
              external.
              </summary>
              <param name="channelName"> A string specifying the name of the channel for this
              channel attribute object.
              </param>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> is thrown if an incorrect value is passed </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getFullName">
                   
              <summary> Gets the full name of a channel, including the realm path if set.
              </summary>
              <returns> A string specifying the full name of a channel. </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nBaseClientException"> is thrown if the name value is not set </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getName">
                   
              <summary> Gets the channel name
              </summary>
              <returns> A string specifying the name value of the channel </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setType(System.Int32)">
                   
              <summary> Sets the type of channel.
              </summary>
              <param name="aType"> An int specifying the channel type.
              </param>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> is thrown if an illegal channel type is specified </exception>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nChannelAttributes.setChannelMode(System.Int32)" -->
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getChannelMode">
                   
              <summary> Returns the either channel (CHANNEL_MODE) or queue (QUEUE_MODE)
              </summary>
              <returns> the channel mode specified in this channel attributes </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getType">
                    
               <summary> Gets the channel type, which will be equal to one of :
                 <code>
                  nChanneAttributes.MIXED_TYPE 
                  nChanneAttributes.PERSISTENT_TYPE 
                  nChanneAttributes.RELIABLE_TYPE 
                 </code>
               </summary>
               <returns> an int specifying the channel's type
               </returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.Equals(System.Object)">
                   
              <summary> For Internal Use Only (Supporting automatic sorting in supporting data
              structures
              </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.lessThan(System.Object)">
                   
              <summary> For Internal Use Only (Supporting automatic sorting in supporting data
              structures
              </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.Equals(System.Int64)">
                   
              <summary> For Internal Use Only (Supporting automatic sorting in supporting data
              structures
              </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.lessThan(System.Int64)">
                   
              <summary> For Internal Use Only (Supporting automatic sorting in supporting data
              structures
              </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.isJMSEngine">
                   
              <summary> Specifies whether this channel will use the JMS Style fanout engine. For more information on this, please see the version 4.0 documentation.
              </summary>
              <returns> whether events are delivered via the JMS fanout engine.</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.useJMSEngine(System.Boolean)">
              
              <summary> Sets whether to use the JMS style fanout engine. Not applicable to queues.
              </summary>
              <param name="useJMSEngine"> use the JMS fanout engine</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.isMergeEngine">
                   
                    <summary> Specifies whether this channel will use the Merge and Update Style fanout engine. For more information on this, please see the version 5.0 documentation.
                    </summary>
                    <returns> whether events are delivered via the Merge and update fanout engine.</returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.useMergeEngine(System.Boolean)">
                   
                    <summary> Sets whether to use the Merge fanout engine
                    </summary>
                    <param name="useMergeEngine"> use the Update and Merge fanout engine</param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.setProtobufDescriptors(System.Byte[][])">
                   
                    <summary> Sets the protobuf descriptors for this channel.
                    </summary>
                    <param name="descriptors"> an array of the descriptors in byte[] form.</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getProtobufDescriptors">
                   
                    <summary> Returns an array of the descruptors associated with this channel in byte[] form.
                    </summary>
                    <returns> an array of the descruptors in byte[] form.</returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelAttributes.getProperties">
            
             <summary>  Returns the nStoreProperties objec.</summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes,com.pcbsys.nirvana.client.nSession)">
             Constructs a new nChannel with the specified channel attributes and session
            
             @param ca      A nChannelAttributes object specifying the channel's attributes
             @param session an nSession object specifying the connection to the realm this
                            channel exists within
             @throws nIllegalArgumentException
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.writeEvent(com.pcbsys.nirvana.nbase.events.nEvent,System.Int64)">
             Writes an event to the server using the associated session
            
             @param evt The nEvent object that is written to the server
             @return The nEvent object that the server responds with if the event is
                     synchronous, null otherwise
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.getChannelAttributes">
             Gets the channels local attributes
            
             @return The associated nChannelAttributes object specifying the channel attributes
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.getBaseChannelAttributes">
             Gets the channels local attributes
            
             @return The associated nChannelAttributes object specifying the channel attributes
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.getLastEID">
             Gets the last event id of this channel
            
             @return a long specifying the last event id of this channel
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.peekQueue(com.pcbsys.nirvana.client.nQueuePeekContext)">
             Gets the last event id of this channel
            
             @return a long specifying the last event id of this channel
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.getQueueDetails">
             Gets the last event id of this channel
            
             @return a long specifying the last event id of this channel
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.getEventCount">
             Gets the number of events on this channel
            
             @return an int specifying the number of events on this channel
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.purgeEvents(System.Int64,System.Int64,System.String,System.Boolean,System.Boolean)">
             Purges a range of events from this channel
            
             @param startEID a long specifying the start event id of the range of events
                             to be purged from the channel
             @param endEID   a long specifying the end event id of the range of events
                             to be purged from the channel
             @param selector A messages selector which will be used to filter out only
                             the events which match this criteria
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.deleteJoin(System.String)">
            Sets a server based link between this channel and the channel
            defined within the provided nChannelAttributes. Additional parameters specify
            whether the event is routable or not, the maximum number of hops the event
            can pass through and the filter applied to the join (link).
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.deleteJoin(com.pcbsys.nirvana.client.nChannelImpl)">
             Sets a server based link between this channel and the channel
             defined within the provided nChannelAttributes. Additional parameters specify
             whether the event is routable or not, the maximum number of hops the event
             can pass through and the filter applied to the join (link).
            
             @param dest a nChannelAttributes object defining the channel to be joined (linked)
                         to this channel
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.addSubscriber(com.pcbsys.nirvana.client.nEventListener,System.String,System.Int64)">
                     * Publishes the specified nConsumeEvent to this channel
                     *
                     * @param e the nConsumeEvent object to be published to this channel
                    protected void publish(nConsumeEvent e, nMessageSigner signer)
                        {
                      nEvent evt = mySession.nConsumeEventToPublishRequest(e, signer, nca.getUniqueId());
                      try {
                        writeEvent(evt);
                      }
                      catch (nRequestTimedOutException toexc) {
                        // we can ignore this
                      }
                    }
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.addSubscriber(com.pcbsys.nirvana.client.nEventListener,System.String,System.Int64,System.Boolean)">
             Registers the specified nEventListener as a subscriber to this channel.
             The subscriber will receive all events with event id greater than or equal
             to the one specified, apart from the ones restricted by the specified filter.
            
             @param nel      the nEventListener object to be registered as a subscriber
             @param selector a string specifying a filter to this subscription request
             @param eid      a long specifying the subscription's start eid
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.reSubscribe(System.String,System.Int64)">
             Registers the specified nEventListener as a subscriber to this channel.
             The subscriber will receive all events with event id greater than or equal
             to the one specified, apart from the ones restricted by the specified filter.
            
             @param selector a string specifying a filter to this subscription request
             @param eid      a long specifying the subscription's start eid
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.reSubscribe(com.pcbsys.nirvana.client.nDurable,System.String)">
             Registers the specified nEventListener as a subscriber to this channel.
             The subscriber will receive all events with event id greater than or equal
             to the one specified, apart from the ones restricted by the specified filter.
            
             @param name      the nEventListener object to be registered as a subscriber
             @param selector a string specifying a filter to this subscription request
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.removeSubscriber(com.pcbsys.nirvana.client.nEventListener)">
             Unregisters the specified nEventListener as a subscriber from this channel.
             The subscriber will not receive any more events.
            
             @param nel the nEventListener object to be registered as a subscriber
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.getName">
             Gets the name of this channel
            
             @return a string specifying the name of this channel
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.getChannelList">
             Gets the client channel list of this channel
            
             @return an nClientChannelList object containing the list of clients
                     currently connected to this channel.
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.getType">
             Gets the type of this channel
             <p/>
             Currently supported types are: nConstants.CHAN_PERSISTENT
             nConstants.CHAN_RELIABLE
            
             @return an int specifying the channel's type, which will be equal to
                     nConstants.CHAN_PERSISTENT or to nConstants.CHAN_RELIABLE
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.validateSelector(System.String)">
             Validates whether the specified string can be used an event selector on a channel,
             by making a grammar check
            
             @param selector a string specifying a filter to be validated
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.nPublishedTonConsumeEvent(com.pcbsys.nirvana.nbase.events.nPublished)">
            @param p_event The nPublished event to be converted to nConsumeEvent
            @return the newly created nConsumeEvent object
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.commit(System.Int64,System.Int64)">
            <summary>
            Acknowledges the event with the specified event ID for the reader with the given unique ID. This method works for queues only.
            </summary>
            <param name="readerUniqueId">The unique ID of the reader. The server will use this to identify the reader that has consumed this event and acknowledge it.</param>
            <param name="eid">The event ID to acknowledge.</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.commit(System.Int64)">
            <summary>
            Acknowledges the event with the specified event ID. This method works for queues only.
            Please use commit(long readerUniqueId, long eid) instead, since it will have better performance.
            </summary>
            <param name="eid">The event ID to acknowledge</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.rollback(System.Int64,System.Int64)">
            <summary>
            Rolls back the event with the specified event ID for the reader with the given unique ID. This method works for queues only.
            </summary>
            <param name="readerUniqueId">The unique ID of the reader. The server will use this to identify the reader that has consumed this event and acknowledge it.</param>
            <param name="eid">The event ID to roll back</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.rollback(System.Int64)">
            <summary>
            Rolls back the event with the specified event ID. This method works for queues only.
            Please use rollback(long readerUniqueId, long eid) instead, since it will have better performance.
            </summary>
            <param name="eid"></param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nChannelImpl.isSubscribed">
             Method to determine if this channel / queue has a subscriber
            
             @return if there is a subscriber
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nChannelIterate.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <!-- Badly formed XML comment ignored for member "F:com.pcbsys.nirvana.nbase.events.nConnectionSubscribe.myUpdateFlag" -->
        <member name="M:com.pcbsys.nirvana.nbase.events.nConnectionSubscribe.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nConnectionSubscribe.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes,System.Boolean)">
             
            
             @param attrib 
             @param updates 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nConnectionSubscribe.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nConnectionSubscribe.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.nChannelStatus">
            
             <summary> </summary>
             
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.nChannelStatus.sId">
            
             <summary>Index into the long array </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelStatus.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelStatus.ToString">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelStatus.getCurrentNoOfConnections">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelStatus.getTotalNoOfConnections">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelStatus.getTotalPublished">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelStatus.getTotalConsumed">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelStatus.getPercentageFreeInStore">
             
              <summary>
              </summary>
             <returns>  </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelStatus.readExternal(com.pcbsys.foundation.io.fEventInputStream)">
             
              <summary>
              </summary>
             <param name="ois">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nChannelStatus.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nClientChannelList.clearAsyncQueue">
                      public nMessageValidator getValidator() {
                        return messageValidator;
                      }
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.nConnectionStatus">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConnectionStatus.#ctor">
             
              <summary> </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConnectionStatus.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.nConstants">
            
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.nConstants.CHAN_MODE_NORMAL">
            Channel Type
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.nConstants.EVENTWAIT">
            Timeout values
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConstants.getSLEEP">
             Methods
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConstants.setSLEEP(System.Int64)">
             
            
             @param aval 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConstants.getTXPUBWAIT">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConstants.setTXPUBWAIT(System.Int64)">
             
            
             @param newval 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConstants.getEVENTWAIT">
             
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nConstants.milliToDateTime(System.Int64)">
            Convert an Epoch Date in milliseconds to a valid DateTime object 
            @return valid DateTime representation of the Epoch time supplied
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.events.nDeleteChannel">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDeleteChannel.#ctor">
            
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDeleteChannel.#ctor(com.pcbsys.nirvana.nbase.nChannelAttributes)">
             
            
             @param attrib 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDeleteChannel.performRead(com.pcbsys.foundation.io.fEventInputStream)">
             
            
             @param ois 
             @exception Exception 
             @exception ClassNotFoundException 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nDeleteChannel.performWrite(com.pcbsys.foundation.io.fEventOutputStream)">
             
            
             @param oos 
             @exception Exception 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEventFactory.getInstance(System.Int32)">
             Used to get the singlton instance
            
             @return 
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEventFactory.getVersion">
            Constructor
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEventFactory.getEventId(com.pcbsys.foundation.io.fBaseEvent)">
             Returns the Id for the event passed in
            
             @param event The event to return the ID for
             @return The Id
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEventFactory.getEvent(System.Int32)">
             Creates a class corresponding to the ID passed in
            
             @param id The class Id to create
             @return The class instance
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.events.nEventFactory.getObject(System.Int32)">
             
            
             @param id 
             @return 
        </member>
        <member name="T:com.pcbsys.nirvana.client.nEventProperties">
               
                <summary> This class contains a collection of key-value pairs, defining event meta
                data which can be used to create filter rules. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.#ctor">
                   
              <summary> Default constructor </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.#ctor(com.pcbsys.nirvana.client.nEventProperties)">
                   
              <summary> Constructs an event properties object that is a copy of the specified
              event properties.
              </summary>
              <param name="ed"> the event properties object to be copied </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.#ctor(com.pcbsys.nirvana.client.nEventProperties,System.Boolean)">
                   
              <summary> Constructs an event properties object that is a copy of the specified
              event properties, but depending on the copyNew, will construct new dictionary 
              entries to prevent dictionary entries being overwritten by subsequent uses of 
              the event object and event properties.
              </summary>
              <param name="ed"> the event properties object to be copied </param>
              <param name="copyNew"> re-construct the entries rather than copying the references to the new event properties </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.#ctor(System.String)">
                   
              <summary> Constructor using a string from the .toString() method
              </summary>
              <param name="serializedString"> serialized string used to construct the nEventProperties </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.containsKey(System.String)">
                   
              <summary> Returns true if the key is contained within the dictionary
              </summary>
              <param name="key"> Name of the key to search for </param>
              <returns> True if the properties contains the key </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.remove(System.String)">
                   
              <summary> Removes the value index by the key
              </summary>
              <param name="key"> Key to remove </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.merge(com.pcbsys.nirvana.client.nEventProperties,System.Boolean)">
                   
              <summary> Adds the values from the supplied properties to this object. If this object already has keys with
              the same name then the behaviour is driven by the bool overwrite. </summary>
              <param name="props"> The nEventProperties object to merge with this copy </param>
              <param name="overwrite"> If true then duplicate values will take the new value </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.copy(com.pcbsys.nirvana.client.nEventProperties)">
                   
              <summary> Copies the properties from one to this
              </summary>
              <param name="p_dictionary"> dictionary to copy </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getKeys">
                   
              <summary> Get an IEnumerator of keys
              </summary>
              <returns> IEnumerator of keys </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getKeysAsStrings">
                   
              <summary> Get an IEnumerator of keys as Strings
              </summary>
              <returns> an IEnumerator of String objects representing the keys </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getValues">
                   
              <summary> Get an IEnumerator of values
              </summary>
              <returns> IEnumerator of values </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getEntrySet">
                   
              <summary> Get an iterator of the key and values in an Map.Entry. Allows the user to get both the
              key and value from one iteration of the nEventProperties.
              </summary>
              <returns> nEventPropertiesIterator Map.Entrys in the properties </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getClass(System.String)">
                   
              <summary> Get the class name of the value represented by the key
              </summary>
              <param name="key"> String value to lookup </param>
              <returns> String class name of the value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.get(System.String)">
                   
              <summary> Get the value as an Object
              </summary>
              <param name="key"> String key to return </param>
              <returns> Object of the value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.get(System.Object)">
                   
              <summary> Get the value as an Object
              If the input paramter is not of type String, returns null
              </summary>
              <param name="key"> String key to return </param>
              <returns> Object of the value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,com.pcbsys.nirvana.client.nEventProperties)">
                   
              <summary> Put an nEventproperties into this one to enable nested properties
              </summary>
              <param name="key"> name of this value </param>
              <param name="value"> nEventProperty to insert </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,com.pcbsys.nirvana.client.nEventProperties[])">
                   
              <summary> Put an nEventProperies[] into this property to enable nested properties
              </summary>
              <param name="key"> Name to call this </param>
              <param name="value"> Array of nEventProperties </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getDictionary(System.String)">
                   
                  <summary> Retrieve a nEventProperty from this one
                  </summary>
                  <param name="key"> Name of the nEventProperty </param>
                  <returns> a nEventProperty </returns>
                  
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getDictionaryArray(System.String)">
                   
              <summary> Return an array of nEventProperties
              </summary>
              <param name="key"> name of the array to return </param>
              <returns> nEventproperty[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getSize">
                   
              <summary> Return the number of properties held
              </summary>
              <returns> int size </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.String)">
                   
              <summary> Places a key value pair into the dictionary
              </summary>
              <param name="key"> Key to reference the data </param>
              <param name="value"> Data to be stored </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.String[])">
                   
              <summary> Places a String[] into the properties
              </summary>
              <param name="key"> Name for the value </param>
              <param name="value"> String[] </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Int16)">
                   
              <summary> places a short into the properties
              </summary>
              <param name="key"> name of the short </param>
              <param name="s"> short value </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Int16[])">
                   
              <summary> Places an array of shorts into the properties
              </summary>
              <param name="key"> Name for the array </param>
              <param name="s"> short[] </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Byte)">
                   
              <summary> Places a byte into the properties
              </summary>
              <param name="key"> name for the byte </param>
              <param name="b"> byte </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Byte[])">
                   
              <summary> Places a byte[] into the properties
              </summary>
              <param name="key"> name for the byte[] </param>
              <param name="b"> byte[] </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getByte(System.String)">
                   
              <summary> Retrieves a byte by the name given
              </summary>
              <param name="key"> Name for the byte </param>
              <returns> byte value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getByteArray(System.String)">
                   
              <summary> Retrieves a byte[] from the dictionary
              </summary>
              <param name="key"> name for the byte[] </param>
              <returns> byte[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getShort(System.String)">
                   
              <summary> Retrieves a short from the properties
              </summary>
              <param name="key"> name of the short </param>
              <returns> short value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getShortArray(System.String)">
                   
              <summary> Retrieves an array of shorts
              </summary>
              <param name="key"> name of the short array </param>
              <returns> short[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Char)">
                   
              <summary> Puts a char into the properties
              </summary>
              <param name="key"> Name of the char </param>
              <param name="c"> char value </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Char[])">
                   
              <summary> Puts an array of chars into the properties
              </summary>
              <param name="key"> Name of the char[] </param>
              <param name="c"> char[] </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getChar(System.String)">
                   
              <summary> Retrieves a char from the properties
              </summary>
              <param name="key"> name of the char </param>
              <returns> char </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getCharArray(System.String)">
                   
              <summary> Retrieves a char[] from the properties
              </summary>
              <param name="key"> name of the char array </param>
              <returns> char[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Boolean)">
                   
              <summary> Places a key value pair into the dictionary
              </summary>
              <param name="key"> Key to reference the data </param>
              <param name="value"> Data to be stored </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Boolean[])">
                   
              <summary> Places a bool[] into the properties
              </summary>
              <param name="key"> Name of the boolean[] </param>
              <param name="value"> bool[] </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Int32)">
                   
              <summary> Places a key value pair into the dictionary
              </summary>
              <param name="key"> Key to reference the data </param>
              <param name="value"> Data to be stored </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Int32[])">
                   
              <summary> Places a int[] into the properties
              </summary>
              <param name="key"> Name of the key </param>
              <param name="value"> int[] </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getInt(System.String)">
                   
              <summary> Retrieves an int from the properties
              </summary>
              <param name="key"> Name of the int </param>
              <returns> int value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getIntArray(System.String)">
                   
              <summary> Gets an int[] from the properties
              </summary>
              <param name="key"> Name of the int[] </param>
              <returns> int[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Int64)">
                   
              <summary> Places a key value pair into the dictionary
              </summary>
              <param name="key"> Key to reference the data </param>
              <param name="value"> Data to be stored </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Int64[])">
                   
              <summary> Places a long[] into the properties
              </summary>
              <param name="key"> name of the long[] </param>
              <param name="value"> long[] </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Single)">
                   
              <summary> Places a key value pair into the properties
              </summary>
              <param name="key"> Key to reference the data </param>
              <param name="value"> Data to be stored </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Single[])">
                   
              <summary> Puts a float[] into the properties
              </summary>
              <param name="key"> Name of the float[] </param>
              <param name="value"> float[] </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getFloat(System.String)">
                   
              <summary> Retrieves a float from the properties
              </summary>
              <param name="key"> Name of the float </param>
              <returns> float value </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getFloatArray(System.String)">
                   
              <summary> Retrieves a float[] from the properties
              </summary>
              <param name="key"> Name of the float[] </param>
              <returns> float[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Double)">
                   
              <summary> Places a key value pair into the dictionary
              </summary>
              <param name="key"> Key to reference the data </param>
              <param name="value"> Data to be stored </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.put(System.String,System.Double[])">
                   
              <summary> Places a double[] into the properties
              </summary>
              <param name="key"> Name of the double[] </param>
              <param name="value"> double[] </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getString(System.String)">
                   
              <summary> Retrieves the data from the table based on the key as a string
              </summary>
              <param name="key"> Key to reference the data </param>
              <returns> a string with the value associated with this key </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getStringArray(System.String)">
                   
              <summary> Retrieves a String[]
              </summary>
              <param name="key"> Name of the String[] </param>
              <returns> String[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getLong(System.String)">
                   
              <summary> Retrieves the data from the table based on the key as a long
              </summary>
              <param name="key"> Key to reference the data </param>
              <returns> a long with the value associated with this key </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getLongArray(System.String)">
                   
              <summary> Retrieves a long[] from the properties
              </summary>
              <param name="key"> Name of the long[] </param>
              <returns> long[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getBoolean(System.String)">
                   
              <summary> Retrieves the data from the table based on the key as a bool
              </summary>
              <param name="key"> Key to reference the data </param>
              <returns> a bool with the value associated with this key </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getBooleanArray(System.String)">
                   
              <summary> Retrieves a bool[] from the properties
              </summary>
              <param name="key"> Name of the bool[] </param>
              <returns> bool[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getDouble(System.String)">
                   
              <summary> Retrieves the data from the table based on the key as a double
              </summary>
              <param name="key"> Key to reference the data </param>
              <returns> a double with the value associated with this key </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.getDoubleArray(System.String)">
                   
              <summary> Retrieves a double[] from the properties
              </summary>
              <param name="key"> Name of the double[] </param>
              <returns> double[] </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.isValid">
                   
              <summary> Returns true if the dictionary is consistent and contains no errors
              </summary>
              <returns> bool flag </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventProperties.ToString">
            <summary>
            Converts this object into a string
            </summary>
            <returns> String representation of this object </returns>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nEventPropertiesIterator">
               
                <summary> This class allows you to iterate through the nEventProperties
                to examine the key,value pairs
                <para>
                The iterator will either be constructed from the DictionaryEntry items, the key set or the values set
                of the nEventProperties object
                </para>
                To use the entry set iterator call the getEntrySet() method on the nEventProperties object:
                <code>
                   nEventPropertiesIterator it = prop.getEntrySet();
                   while (it.MoveNext() ) {
                       DictionaryEntry next = it.Entry;
                       Object key = next.Key;
                       Object value = prop.get(key);
                   }
                </code>
                </summary>
                <see cref="T:com.pcbsys.nirvana.client.nEventProperties"/>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventPropertiesIterator.MoveNext">
                   
                    <summary> Advance to the next item. </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nEventPropertiesIterator.Reset">
                   
                    <summary> Validate the IEnumerator index and throw an exception if the index is out of range.
                    Reset the index to restart the IEnumerator. </summary>
                    
        </member>
        <member name="P:com.pcbsys.nirvana.client.nEventPropertiesIterator.Current">
                   
                    <summary> Return the item at the current index </summary>
                    
        </member>
        <member name="P:com.pcbsys.nirvana.client.nEventPropertiesIterator.Entry">
                   
                    <summary> Return the current dictionary entry. </summary>
                    
        </member>
        <member name="P:com.pcbsys.nirvana.client.nEventPropertiesIterator.Key">
                   
                    <summary> Return the key of the current item. </summary>
                    
        </member>
        <member name="P:com.pcbsys.nirvana.client.nEventPropertiesIterator.Value">
                   
                    <summary> Return the value of the current item. </summary>
                    
        </member>
        <member name="T:com.pcbsys.nirvana.client.nIllegalArgumentException">
               
                <summary> This class defines the error that can be thrown by passing an illegal argument to any 
                method of any class in the nirvana client API. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nIllegalArgumentException.#ctor(System.String)">
            <summary>
            Creates the exception with the specified message
            </summary>
            <param name="msg"> Message string</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:com.pcbsys.nirvana.nbase.nDataGroupStatus" -->
        <member name="F:com.pcbsys.nirvana.nbase.nDataGroupStatus.sId">
            Index into the long array
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nDataGroupStatus.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nDataGroupStatus.tostring" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nDataGroupStatus.getCurrentNoOfConnections" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nDataGroupStatus.getTotalNoOfConnections" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nDataGroupStatus.getTotalPublished" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nDataGroupStatus.getTotalConsumed" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nDataGroupStatus.readExternal(com.pcbsys.foundation.io.fEventInputStream)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nDataGroupStatus.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)" -->
        <member name="T:com.pcbsys.nirvana.nbase.nException">
            
             <summary>This class defines the errors that can be thrown by using the nirvana client API </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nException.#ctor(System.String)">
             
              <summary>Constructs a new nException with the specified message
              </summary>
             <param name="msg"> a string specifying the error message </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nRealm.#ctor">
            Default constructor
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nRealm.#ctor(System.String,System.String[])">
             Constructs a new nRealm object with the specified name and collection of network interfaces
            
             @param pName A string specifying the realm's name
             @param connections An array of strings specifying the realm's network interfaces.
             These have to be in the form: protocol://host:port/servlet File , where:
            
             Protocol can be one of nsp, nhp, nsps, nhps where:
            
             nsp => Nirvana Socket Protocol
             nhp => Nirvana HTTP Protocol
             nsps => Nirvana Socket Protocol Secure (Socket protocol over SSL/TLS)
             nhps => Nirvana HTTP Protocol Secure (HTTP protocol over SSL/TLS)
            
             Host is the host the realm is running on
            
             Port is the port the realm is listening on
            
             servlet File specifies the location that servlets are mapped if talking to
             the realm via a web server (e.g. in a DMZ environment)
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nRealm.#ctor(System.String,System.Collections.Generic.List{com.pcbsys.foundation.drivers.fConnectionDetails})">
             Constructs a new nRealm object with the specified name and collection of network interfaces
            
             @param pName A string specifying the realm's name
             @param connections A list of fConnectionDetails objects. These are created
             using strings specifying the realm's network interfaces.
             The strings have to be in the form: protocol://host:port/servlet File , where:
            
             Protocol can be one of nsp, nhp, nsps, nhps where:
            
             nsp => Nirvana Socket Protocol
             nhp => Nirvana HTTP Protocol
             nsps => Nirvana Socket Protocol Secure (Socket protocol over SSL/TLS)
             nhps => Nirvana HTTP Protocol Secure (HTTP protocol over SSL/TLS)
            
             Host is the host the realm is running on
            
             Port is the port the realm is listening on
            
             servlet File specifies the location that servlets are mapped if talking to
             the realm via a web server (e.g. in a DMZ environment)
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nRealm.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             Writes the object to an external Event OutputStream
            
             @param oos An event outputstream containing the externalised object
             @exception Exception is thrown if an IO error occurs while writing to the stream
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nRealm.getConnections">
             Gets the collection of the network interfaces this realm listens in.
            
             @return A list containing an fConnectionDetails object for each realm interface.
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSession">
            <summary> 
            This class represents a Nirvana session, the logical connection between the client API and the Nirvana realm.
            A Nirvana session is defined through a set of session attributes that is represented by the nSessionAttributes
            class in the same package. This set of attributes is then passed to the session factory object which creates
            the session. A session object needs to be initialised in order for the physical connection to be opened to the server.
            Please note that when using a session to retrieve events from a channel or queue, you can only have 1 listener
            specifying a set filter per session object. For example if you have a selector set as CCY='USD' you can use that filter
            by only one object implementing the nEventListener interface per session, otherwise a nUserAlreadySubscribedException
            will be thrown.</summary> 
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.pause(System.Boolean)">
                   
                    <summary> This function pauses delivery of new events to all subscribed nEventListeners until resume is called
                    </summary>
                    <param name="release"> specifies whether to release any outstanding synchronous requests awaiting responses from the server </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.setLogListener(com.pcbsys.nirvana.client.nLogListener)">
            <summary>
            Add a local log listener to this session to receive information being logged internally through the client APIs logging mechanism.
            </summary>
            <param name="l">The nLog Listener interface</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getStreamId">
            <summary>
            Get the stream Id for this session if initialised with an nDataStreamListener
            </summary>
            <returns>a string representation of the stream id</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.pauseStream">
             
              <summary> Pause the events being received by the Data Group Listener.
              <p/>
              This is not currently implemented
              </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.resumeStream">
             
              <summary> Resumes the events being received by the Data Group Listener.
              <p/>
              <p/>
              This is not curently implemented
              </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.commitRegisteredEventsToDataGroups(System.Collections.Generic.IEnumerable{com.pcbsys.nirvana.client.nRegisteredEvent})">
            <summary>
            Commit the nRegisteredEvent objects to the server. Currently only registered events created for Data Group objects is supported
            </summary>
            <param name="events">The nRegisteredEvent array</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.commitRegisteredEventsToDataGroups(System.Collections.Generic.IEnumerable{com.pcbsys.nirvana.client.nRegisteredEvent},System.Boolean)">
            <summary>
            Commit the nRegisteredEvent objects to the server. Currently only registered events created for Data Group objects is supported
            </summary>
            <param name="events">The nRegisteredEvent array</param>
            <param name="replace">Override the events on the server with these events</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.write(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nAbstractChannel[])">
             
              <summary> Sends the event to the specified channel / queue
              </summary>
              <param name="evt">     the event to write to the streams </param>
              <param name="destinations"> the array of channels / queues to write to </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.write(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nAbstractChannel)">
             
              <summary> Sends the events to the specified channel / queue
              </summary>
              <param name="evts">   the array of events to write to the channel </param>
              <param name="destination"> the stream to write to </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.write(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nAbstractChannel[])">
             
              <summary> Sends the events to the specified channels / queues
              </summary>
              <param name="evts">    the array of events to write to the channels / queues </param>
              <param name="destinations"> the array of channels / queues to write to </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.write(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nAbstractChannel[],System.Boolean)">
             
              <summary> Sends the events to the specified channels / queues
              </summary>
              <param name="evts">         the array of events to write to the channels / queues </param>
              <param name="destinations">      the array of channels / queues to write to </param>
              <param name="waitForReply"> if true then the method will not return until it receives a response from the server </param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.write(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nAbstractChannel[],System.Boolean)">
             
              <summary> Sends the event to the specified channels / queues
              </summary>
              <param name="evts">         the event to write to the channels / queues </param>
              <param name="destinations">      the array of channels / queues to write to </param>
              <param name="waitForReply"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.write(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nAbstractChannel,System.Boolean)">
             
              <summary> Sends the events to the specified channels / queues
              </summary>
              <param name="evts">         the array of events to write to the channel / queue </param>
              <param name="destination">      the channel / queue to write to </param>
              <param name="waitForReply"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.write(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nAbstractChannel,System.Boolean)">
             
              <summary> Sends the event to the specified channel / queue
              </summary>
              <param name="evt">          the event to write to the channel / queue </param>
              <param name="destination">       the channel / queue to write to </param>
              <param name="waitForReply"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.write(System.Collections.Generic.Dictionary{com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nAbstractChannel},System.Boolean)">
             
              <summary> Sends each event in the list to its corresponding channel / queue
              </summary>
              <param name="list">            key,value list of nConsumeEvent and channel / queue </param>
              <param name="waitForResponse"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.write(System.Collections.Generic.Dictionary{com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nAbstractChannel},System.Boolean,System.Boolean)">
             
              <summary> Sends each event in the list to its corresponding channel / queue
              </summary>
              <param name="list">              key,value list of nConsumeEvent and data groups </param>
              <param name="waitForResponse">   if true then the method will not return until it receives a response from the server </param>
              <param name="isRegisteredEvent"> if this is true, the events will be handled as a list of nRegisteredEvents </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataStream(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataStream)">
             
              <summary> Sends the event to the specified stream ids
              </summary>
              <param name="evt"> the nConsumeEvent to write to the stream </param>
              <param name="stream"> the stream to write to </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataStream(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataStream[])">
             
              <summary> Sends the event to the specified stream ids
              </summary>
              <param name="evt"> the nConsumeEvent to write to the streams </param>
              <param name="streams"> the array of streams to write to </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataStream(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nDataStream)">
             
              <summary> Sends the event to the specified stream ids
              </summary>
              <param name="evts"> the array of nConsumeEvents to write to the stream </param>
              <param name="stream"> the stream to write to </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataStream(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nDataStream[])">
             
              <summary> Sends the event to the specified stream ids
              </summary>
              <param name="evts"> the array of nConsumeEvents to write to the stream </param>
              <param name="streams"> the array of streams to write to </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataGroup(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataGroup)">
             
              <summary> Sends the event to the specified data group
              </summary>
              <param name="evt"> the nConsumeEvent to write to the group </param>
              <param name="dataGroup">the data group to write to</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataGroup(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataGroup[])">
             
              <summary> Sends the event to all of the specified data groups
              </summary>
              <param name="evt"> the nConsumeEvent to write to the groups </param>
              <param name="dataGroups">the array of data groups to write to</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataGroup(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nDataGroup)">
             
              <summary> Sends the list of events to the specified data group
              </summary>
              <param name="evts"> the array of nConsumeEvents to write to the group </param>
              <param name="dataGroup">the data group to write to</param>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.writeDataGroup(System.Collections.Generic.Dictionary{com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataGroup},System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.writeDataGroup(System.Collections.Generic.Dictionary{com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataGroup})" -->
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataGroup(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nDataGroup[])">
             
              <summary> Sends the list of events to all of the specified data groups
              </summary>
              <param name="evts"> the array of nConsumeEvents to write to the group </param>
              <param name="dataGroups">the array of data groups to write to</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataStream(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataStream,System.Boolean)">
              
               <summary> Sends the event to the specified stream ids
               </summary>
               <param name="evt"> the nConsumeEvent to write to the stream </param>
               <param name="stream"> the stream to write to </param>
               <param name="waitForResponse"> if true then the method will not return until it receives a response from the server </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataStream(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataStream[],System.Boolean)">
             
              <summary> Sends the event to the specified stream ids
              </summary>
              <param name="evt"> the nConsumeEvent to write to the streams </param>
              <param name="streams"> the array of streams to write to </param>
              <param name="waitForResponse"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataStream(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nDataStream,System.Boolean)">
             
              <summary> Sends the event to the specified stream ids
              </summary>
              <param name="evts"> the array of nConsumeEvents to write to the stream </param>
              <param name="stream"> the stream to write to </param>
              <param name="waitForResponse"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataStream(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nDataStream[],System.Boolean)">
             
              <summary> Sends the event to the specified stream ids
              </summary>
              <param name="evts"> the array of nConsumeEvents to write to the streams </param>
              <param name="streams"> the array of streams to write to </param>
              <param name="waitForResponse"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataGroup(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataGroup,System.Boolean)">
             
              <summary> Sends the event to the specified data group
              </summary>
              <param name="evt"> the nConsumeEvent to write to the group </param>
              <param name="dataGroup"> the group to write to </param>
              <param name="waitForResponse"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataGroup(com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataGroup[],System.Boolean)">
             
              <summary> Sends the event to all of the specified data groups
              </summary>
              <param name="evt"> the nConsumeEvent to write to the groups </param>
              <param name="dataGroups"> the array of groups to write to </param>
              <param name="waitForResponse"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataGroup(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nDataGroup,System.Boolean)">
             
              <summary> Sends the list of events to the specified data group
              </summary>
              <param name="evts"> the array of nConsumeEvents to write to the group </param>
              <param name="dataGroup"> the group to write to </param>
              <param name="waitForResponse"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.writeDataGroup(com.pcbsys.nirvana.client.nConsumeEvent[],com.pcbsys.nirvana.client.nDataGroup[],System.Boolean)">
             
              <summary> Sends the list of events to all of the specified data groups
              </summary>
              <param name="evts"> the array of nConsumeEvents to write to the group </param>
              <param name="dataGroups"> the array of groups to write to </param>
              <param name="waitForResponse"> if true then the method will not return until it receives a response from the server </param>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.writeDataGroup(System.Collections.Generic.Dictionary{com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataGroup},System.Boolean,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.writeDataStream(System.Collections.Generic.Dictionary{com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataStream})" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.writeDataStream(System.Collections.Generic.Dictionary{com.pcbsys.nirvana.client.nConsumeEvent,com.pcbsys.nirvana.client.nDataStream},System.Boolean)" -->
        <member name="M:com.pcbsys.nirvana.client.nSession.createDataGroup(System.String)">
             
              <summary> Create a new data group on the server. If the data group exists already, and the groups have already been retrieved by this nSession
              the nDataGroup will be returned from the local list of data groups. Otherwise this method will send an event to the server.
            
              </summary>
              <param name="dataGroupName"> the name of the data group to be created </param>
              <returns>the data group matching the specified name</returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createDataGroup(System.String,System.Boolean)">
             
              <summary> Create a new data group on the server. If the data group exists already, and the groups have already been retrieved by this nSession
              the nDataGroup will be returned from the local list of data groups. Otherwise this method will send an event to the server.
            
              </summary>
              <param name="dataGroupName"> the name of the data group to be created </param>
              <param name="enableMulticast">if the data group is enabled for multicast delivery</param>
              <returns>the data group matching the specified name</returns>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.createDataGroup(System.String,com.pcbsys.nirvana.client.nDataGroupListener)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.createDataGroup(System.String,com.pcbsys.nirvana.client.nDataGroupListener,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.createDataGroup(System.String,com.pcbsys.nirvana.client.nDataGroupListener,com.pcbsys.nirvana.client.nConflationAttributes)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.createDataGroup(System.String,com.pcbsys.nirvana.client.nDataGroupListener,com.pcbsys.nirvana.client.nConflationAttributes,System.Boolean)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.createDataGroup(System.String,com.pcbsys.nirvana.client.nDataGroupListener,com.pcbsys.nirvana.client.nConflationAttributes,System.Boolean,System.Int32)" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.createDataGroup(System.String,com.pcbsys.nirvana.client.nDataGroupListener,com.pcbsys.nirvana.client.nConflationAttributes,System.Boolean,System.Boolean,System.Int32)" -->
        <member name="M:com.pcbsys.nirvana.client.nSession.sendServerCreateDataGroup(System.String,com.pcbsys.nirvana.client.nDataGroupListener,com.pcbsys.nirvana.client.nConflationAttributes,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            This method is for internal use only
            </summary>
            <param name="dataGroupName"></param>
            <param name="listener"></param>
            <param name="conflationAttributes"></param>
            <param name="enableMulticast"></param>
            <param name="dropExpiredEvents"></param>
            <param name="groupPriority"></param>
            <returns></returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getDataGroup(System.String)">
                  
              <summary>Get the local group matching this name</summary>
               <returns>the data group matching the specified name</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createDataGroups(System.String[])">
              
               <summary> Create new data groups on the server
               </summary>
               <param name="dataGroupNames">the names of the data groups to create</param>
               <returns> An IEnumerable of data groups matching the names specified</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createDataGroups(System.String[],System.Boolean)">
              
               <summary> Create new data groups on the server
               </summary>
               <param name="dataGroupNames">the names of the data groups to create</param>
               <param name="enableMulticast">if the data groups are enabled for multicast delivery</param>
               <returns> An IEnumerable of data groups matching the names specified</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createDataGroups(System.String[],com.pcbsys.nirvana.client.nConflationAttributes)">
            
               <summary> Create new data groups on the server
               </summary>
               <param name="dataGroupNames">the names of the data groups to create</param>
               <param name="conflationAttributes">the conflation strategy to be applied to the data groups</param>
               <returns> An IEnumerable of data groups matching the names specified</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createDataGroups(System.String[],com.pcbsys.nirvana.client.nConflationAttributes,System.Boolean)">
            
               <summary> Create new data groups on the server
               </summary>
               <param name="dataGroupNames">the names of the data groups to create</param>
               <param name="conflationAttributes">the conflation strategy to be applied to the data groups</param>
               <param name="enableMulticast">if the data groups are enabled for multicast delivery</param>
               <returns> An IEnumerable of data groups matching the names specified</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.deleteDataGroup(System.String[])">
            
               <summary> Deletes the specified data groups from the server
               </summary>
               <param name="dataGroupNames"> The array of names corresponding to data groups to delete </param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.deleteDataGroup(System.String)">
             
              <summary> Deletes the specified data group from the server
              </summary>
              <param name="dataGroupName"> the name of the group to delete </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.deleteDataGroup(com.pcbsys.nirvana.client.nDataGroup)">
             
              <summary> Deletes the specified data group from the server
              </summary>
              <param name="group"> The data group to delete</param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.deleteDataGroup(com.pcbsys.nirvana.client.nDataGroup[])">
              <summary> Deletes the specified data group from the server
              </summary>
              <param name="groups">an array of data groups to delete</param>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getDefaultDataGroup">
            <summary>
            Return the default nDataGroup object
            </summary>
            <returns>the default group</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getDefaultDataGroup(com.pcbsys.nirvana.client.nDataGroupListener)">
            <summary>
            Return the default nDataGroup object, and provide a listener that will receive callbacks when new streams or groups are created or deleted
            </summary>
            <param name="listener">the instance of the nDataGroupListener that will receive the callbacks</param>
            <returns>the default group</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getGroupsContaining(com.pcbsys.nirvana.client.nDataGroup)">
            
             <summary>Locate the groups that currently contain this group</summary>
             <param name="group"> the group to check</param>
             <returns>an array of nDataGroup objects containing the group</returns> 
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getDataGroups">
            <summary>
            Get all known data groups on the server
            </summary>
            <returns>A list of nDataGroup objects from the server</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getDataGroups(System.String)">
            <summary>
            Get all known data groups on the server that match a prefix
            </summary>
            <param name="prefix">A string prefix to match against existing data groups, only those matching will be returned</param>
            <returns>A list of nDataGroup objects from the server</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getDataGroups(com.pcbsys.nirvana.client.nDataGroupListener)">
            <summary>
            Get all known data groups on the server and register a listener.  The listener will receive callbacks whenever a stream or group
            is created/deleted or added/removed from a group.
            </summary>
            <param name="listener">The listener to receive updates for all groups</param>
            <returns>A list of nDataGroup objects from the server</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getDataGroups(System.String,com.pcbsys.nirvana.client.nDataGroupListener)">
            <summary>
            Get all known data groups on the server that match a prefix and register a listener.  The listener will receive callbacks whenever a stream or group
            is created/deleted or added/removed from a group.
            </summary>
            <param name="prefix">A string prefix to match against existing data groups, only those matching will be returned</param>
            <param name="listener">The listener to receive updates for all groups</param>
            <returns>A list of nDataGroup objects from the server</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getKnownGroupCount">
            
             <summary>Get the size of the known data groups list</summary>
             <returns> the current size of the data groups list</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.resume">
                   
             <summary> Resumes delivery of events to nEventListeners </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.find(com.pcbsys.nirvana.client.nChannelAttributes[])">
             
               <summary> Finds and returns an IEnumerable of nFindResult objects that correspond to the results of the find operations on each nChannelAttributes.
               </summary>
               <param name="attr"> The channel attributes of the channels / queues to be found </param>
               <returns> The nFindResult array that represents the result of the find call </returns>
               <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">  The remote realm responded with an unknown exception </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occured, since we received a response from the server out of sequence </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
               <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
               
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.subscribe(com.pcbsys.nirvana.client.nSubscriptionAttributes[])" -->
        <member name="M:com.pcbsys.nirvana.client.nSession.setMaxBufferSize(System.Int32)">
                   
                    <summary> Sets the maximum client buffer size.
                    <p/>
                    The default value is 1 MB
                    </summary>
                    <param name="size"> an int specifying the new maximum client buffer size </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Illegal parameter, check the message for more information </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getMaxBufferSize">
                   
                    <summary> Gets the maximum client buffer size.
                    <p/>
                    The default value is 1 MB
                    </summary>
                    <returns> an int specifying the current maximum client buffer size </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.setHTTPURLParameter(System.String)">
            <summary>
            Allows the HTTP communication between the client and the realm to include an optional parameter that can be analysed by load balance servers or proxies
            </summary>
            <param name="param">Parameter in the form of : ?param</param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getSubject">
                   
                    <summary> Gets the subject associated with this nirvana session
                    </summary>
                    <returns> an nSubject[] object with the subject details associated with the session </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> If the session is not currently connected with the server </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getSubjectObject">
                   
                    <summary> Gets the subject associated with this nirvana session
                    </summary>
                    <returns> an nSubject object with the subject details associated with the session </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> If the session is not currently connected with the server </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getOutputByteCount">
                   
                    <summary> Returns the number of bytes sent to the server using this session object
                    </summary>
                    <returns> long byte count </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getInputByteCount">
                   
                    <summary> Returns the number of bytes received from the server on this session object
                    </summary>
                    <returns> long byte count </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getQueueSize">
                   
                    <summary> Returns the outbound connection queue size
                    </summary>
                    <returns> the size of the queue </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getSentEventCount">
                   
                    <summary> Return the number of events sent by this session
                    </summary>
                    <returns> the number of sent events </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getReceivedEventCount">
                   
                    <summary> Return the number of events received by this session
                    </summary>
                    <returns> the number of sent received </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getCurrentLatency">
                   
                    <summary>  Returns the round trip time of the last synchronous request that was made </summary>
                     <returns> the current round trip time </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getConnectionList">
                   
                    <summary> Returns a comma separated list of RNAMEs which can be used to access the realm or cluster namespace.
                    This value is calculated and updated by the server which this session is currently connected to.
                    </summary>
                    <returns> Comma separated list of rnames which can be used to construct a nSessionAttributes. </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.updateConnectionListWithServerList">
                   
                    <summary> Update the current session attributes with the RNAMEs retrieved from the server. </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.addReconnectHandler(com.pcbsys.nirvana.client.nReconnectHandler)">
                   
                    <summary> Add a session reconnect handler to the session. Usually the handler is passed
                    in when the session is constructed from the nSessionFactory, however this method
                    allows you to pass in a handler once a session has been constructed.
                    </summary>
                    <param name="handler"> - the nReconnectHandler object for this session </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.removeReconnectHandler(com.pcbsys.nirvana.client.nReconnectHandler)">
                   
                    <summary> Remove the reconnect handler from the session
                    </summary>
                    <param name="handler"> - the reconnect handler to be removed </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getAttributes">
                   
                    <summary> Gets the session attribute object associated with this session
                    </summary>
                    <returns> the nSessionAttributes object associated with this session </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.addRealm(com.pcbsys.nirvana.client.nRealm)">
                   
                    <summary> Adds (Joins) another realm to the realm this session is connected to
                    </summary>
                    <param name="newRealm"> The realm to join as an nRealm object </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmAlreadyBoundException">   The realm is known by the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException">       The realm is not known by the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">    The specified realm is already configured </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nNameSpaceConflictException">   The realm conflicts with the existing namespace </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.addRealm(com.pcbsys.nirvana.client.nRealm,com.pcbsys.nirvana.client.nSession)">
                   
                    <summary> Adds (Joins) another realm to the realm this session is connected to
                    </summary>
                    <param name="newRealm"> The realm to join as an nRealm object </param>
                    <param name="session"> A session to the realm we want to add to </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmAlreadyBoundException">   The realm is known by the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">    The specified realm is already configured </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException">       The realm is not known by the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nNameSpaceConflictException">   The realm conflicts with the existing namespace </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSession.deleteRealm(com.pcbsys.nirvana.client.nRealm)" -->
        <member name="M:com.pcbsys.nirvana.client.nSession.getServerRealmName">
                   
                    <summary> Returns the sessions server realm name
                    </summary>
                    <returns> Realm Server name </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> If the session is not currently connected with the server </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getServerTime">
                   
                    <summary> Gets the current time on the server
                    </summary>
                    <returns> The current time on the Realm Server as a long value </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException"> The session is currently paused, please resume
                    </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.isMemberOfCluster">
            
             <summary>If the realm this session is connected to is part of a cluster then this function will return true</summary>
             <returns>true if part of a cluster</returns>
            
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getRealm(System.String)">
                   
                    <summary> Gets a reference to a realm that is already joined
                    </summary>
                    <param name="name"> A string specifying the name of the realm to be returned </param>
                    <returns> An nRealm object referring to the realm, or null if no realm with that name is found </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmNotFoundException">       The realm name supplied could not be found on the server </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getRealms">
                   
                    <summary> Returns a list of all known realms on the connected realm
                    </summary>
                    <returns> An nRealm array object referring to the realm, or null if no realms are defined </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getChannels">
                   
                    <summary> Returns a list of all known channels and queues
                    </summary>
                    <returns> An nChannelAttributes array object referring to the channels, or null if no channels are defined </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getChannels(System.String)">
                   
                    <summary> Returns a list of all known channels and queues
                    </summary>
                    <param name="folder"> specify the starting point in the namespace within which to retrieve the channels
                    </param>
                    <returns> An nChannelAttributes array object referring to the channels, or null if no channels are defined </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.create(com.pcbsys.nirvana.client.nChannelAttributes[])">
             
              <summary> Creates new channels on the realm this session is connected.
              </summary>
              <param name="attr"> The channel attributes array containing the new channel or queue attributes </param>
              <returns> an nCreateResult array representing the newly created nirvana channels or queues or exceptions </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">        The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.delete(com.pcbsys.nirvana.client.nChannelAttributes[])">
             
              <summary>Deletes all channels in the array of nChannelAttributes array.
              </summary>
              <param name="attr"> The channel attributes array to delete </param>
              <returns> an nDeleteResult array representing the deleted nirvana channels or queues or exceptions </returns>
              <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">      The channel doesn't exist </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
              <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">        The session is currently paused, please resume </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createChannel(com.pcbsys.nirvana.client.nChannelAttributes)">
                   
                     <summary> Creates a new channel on the realm this session is connected.
                     <p/>
                     If the channel attributes specify a realm different than the one this session is
                     connected to, a transparent redirection will occur and the channel will be created on
                     that realm.
                     </summary>
                     <param name="attr"> The channel attributes object containing the parameters for
                                  the new channel to be created </param>
                     <returns> an nChannel object representing the newly created nirvana channel </returns>
                     <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote node responded with an unknown exception </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The requested channel already exists </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occured, since we received a response from the server out of sequence </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
                     <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                     
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,System.Int64)">
                   
                    <summary> Creates a new channel on the realm this session is connected.
                    <p/>
                    If the channel attributes specify a realm different than the one this session is
                    connected to, a transparent redirection will occur and the channel will be created on
                    that realm.
                    </summary>
                    <param name="attr">         The channel attributes object containing the parameters for
                                        the new channel to be created @ param initialEID The channel
                                        will be created with the first eid being set to this value by
                                        default it is set to 0 but the user can set it to any
                                        positive value </param>
                    <param name="p_initialEID"> The value to start the event id at </param>
                    <returns> an nChannel object representing the newly created nirvana channel </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createChannel(com.pcbsys.nirvana.client.nChannelAttributes,System.Int64,System.Int64)">
                   
                    <summary> Creates a new channel on the realm this session is connected.
                    <p/>
                    If the channel attributes specify a realm different than the one this session is
                    connected to, a transparent redirection will occur and the channel will be created on
                    that realm.
                    </summary>
                    <param name="attr">         The channel attributes object containing the parameters for
                                        the new channel to be created @ param initialEID The channel
                                        will be created with the first eid being set to this value by
                                        default it is set to 0 but the user can set it to any
                                        positive value </param>
                    <param name="p_initialEID"> The value to start the event id at </param>
                    <param name="privMask">     Privilege mask to apply to the "everyone" subject for this channel </param>
                    <returns> an nChannel object representing the newly created nirvana channel </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createQueue(com.pcbsys.nirvana.client.nChannelAttributes,System.Int64)">
                   
                    <summary> Creates a new queue on the realm this session is connected.
                    <p/>
                    If the channel attributes specify a realm different than the one this session is
                    connected to, a transparent redirection will occur and the queue will be created on
                    that realm.
                    </summary>
                    <param name="attr"> The channel attributes object containing the parameters for the new queue to be created </param>
                    <param name="privMask">     Privilege mask to apply to the "everyone" subject for this queue </param>
                    <returns> an nQueue object representing the newly created nirvana queue </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.createQueue(com.pcbsys.nirvana.client.nChannelAttributes)">
                   
                    <summary> Creates a new queue on the realm this session is connected.
                    <p/>
                    If the channel attributes specify a realm different than the one this session is
                    connected to, a transparent redirection will occur and the queue will be created on
                    that realm.
                    </summary>
                    <param name="attr"> The channel attributes object containing the parameters for the new queue to be created </param>
                    <returns> an nQueue object representing the newly created nirvana queue </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">   The remote realm responded with an unknown exception </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">             User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelAlreadyExistsException"> The channel already exists </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException">  Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">   Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">      The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">      Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.addAsyncExceptionListener(com.pcbsys.nirvana.client.nAsyncExceptionListener)">
                   
                    <summary> Adds a new asynchronous exception listener, which will be notified when
                    an exception occurs while performing an asynchronous operation
                    </summary>
                    <param name="listener"> The asynchronous exception listener to be added </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Illegal parameter, check the message for more information </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.removeAsyncExceptionListener(com.pcbsys.nirvana.client.nAsyncExceptionListener)">
                   
                    <summary> Removes an already added asynchronous exception listener, which will not
                    be notified of asynchronous exceptions anymore.
                    </summary>
                    <param name="listener"> The asynchronous exception listener to be added </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> Illegal parameter, check the message for more information </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.findChannel(com.pcbsys.nirvana.client.nChannelAttributes)">
                   
                    <summary> Finds and returns a nirvana channel that exists on the realm this session
                    is connected to, or a joined realm.
                    </summary>
                    <param name="attr"> The channel attributes of the channel to be found </param>
                    <returns> The nChannel object if it was found.</returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The channel specified could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">  The remote realm responded with an unknown exception </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalChannelMode">           The channel referenced is a queue </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.findQueue(com.pcbsys.nirvana.client.nChannelAttributes)">
                   
                    <summary> Finds and returns a nirvana queue that exists on the realm this session
                    is connected to, or a joined realm.
                    </summary>
                    <param name="attr"> The channel attributes of the queue to be found </param>
                    <returns> The nChannel object if it was found</returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The specified queue could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">  The remote realm responded with an unknown exception </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalChannelMode">           The queue referenced is a channel </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.deleteChannel(com.pcbsys.nirvana.client.nChannelAttributes)">
                   
                    <summary> Deletes a nirvana channel that exists on the realm this session is connected to, or a joined realm.
                    <p/>
                    Note: all events in that channel will be deleted too and are not recoverable.
                    </summary>
                    <param name="attr"> The channel attributes of the channel to be deleted </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">  The remote realm responded with an unknown exception </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The specified channel could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.deleteQueue(com.pcbsys.nirvana.client.nChannelAttributes)">
                   
                    <summary> Deletes a nirvana queue that exists on the realm this session is connected to, or a joined realm.
                    <p/>
                    Note: all events in that queue will be deleted too and are not recoverable.
                    </summary>
                    <param name="attr"> The channel attributes of the queue to be deleted </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnknownRemoteRealmException">  The remote realm responded with an unknown exception </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">            User is not authorised for the function </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nChannelNotFoundException">     The specified channel could not be found </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nUnexpectedResponseException">  Internal Error has occurred, since we received a response from the server out of sequence </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nRequestTimedOutException">     The server has not responded to the request in the timeout period </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException">     Illegal parameter, check the message for more information </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionPausedException">       The session is currently paused, please resume </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.isConnected">
                   
                    <summary> Returns true if this session is still connected with the remote realm
                    </summary>
                    <returns> result of the test </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.isPaused">
                   
                    <summary> Returns true if this session is paused
                    </summary>
                    <returns> result of the test </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getId">
                   
                    <summary> Returns the unique session Id for this session
                    </summary>
                    <returns> String representation of this ID </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.get3rdPartyCookie">
                    <summary> Returns any 3rd party cookies that may have been honoured
                    </summary>
                    <returns> String value of all 3rd party cookies honoured </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
             
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getRemoteId">
                   
                    <summary> Returns the rname that this session has used
                    </summary>
                    <returns> String representation of the rname </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.init">
                   
                    <summary> Initialises a session object, opening the physical connection to the
                    server
                    </summary>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">    if the realm is currently not available </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionAlreadyInitialisedException">
                                                          The session has already been initialised </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">       Insufficient privileges </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.init(System.Boolean)">
                   
                    <summary> Initialises a session object, opening the physical connection to the
                    server
                    </summary>
                    <param name="fails"> - if the cluster loses quorum, should this nSession become disconnected (true/false) </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">    if the realm is currently not available </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionAlreadyInitialisedException">
                                                          The session has already been initialised </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">       Insufficient privileges</exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.init(com.pcbsys.nirvana.client.nDataStreamListener)">
                   
                    <summary> Initialises a session object, opening the physical connection to the
                    server
                    </summary>
                    <param name="streamListener"> a stream listener to receive asynchronous events</param>
                    <returns> The ID of the nDataStream </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">    if the realm is currently not available </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionAlreadyInitialisedException">
                                                          The session has already been initialised </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">       Insufficient privileges</exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.init(System.Boolean,com.pcbsys.nirvana.client.nDataStreamListener)">
                   
                    <summary> Initialises a session object, opening the physical connection to the
                    server
                    </summary>
                    <param name="fails"> - if the cluster loses quorum, should this nSession become disconnected (true/false) </param>
                    <param name="streamListener"> a stream listener to receive asynchronous events</param>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">    if the realm is currently not available </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionNotConnectedException"> Current session is not connected </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSessionAlreadyInitialisedException">
                                                          The session has already been initialised </exception>
                    <exception cref="T:com.pcbsys.nirvana.client.nSecurityException">       Insufficient privileges</exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getSessionConnectionId">
                   
                    <summary> Returns the unique connection id associated with this session by the server.
                    </summary>
                    <returns> the server's connection id for this nSession </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.addConnectionQueueListener(com.pcbsys.nirvana.client.nConnectionQueueListener)">
                   
                    <summary> Adds a new connection queue listener, which will be notified when
                    the internal outbound queue reaches defined limits, such as
                    <p/>
                    Reaching high water mark
                    Reaching low water mark
                    Exceeding the time it should take to access the queue object
                    Exceeding the time it should take to push an event onto the queue
                    Exceeding the time for a queue to be blocked due to reaching its high water mark
                    </summary>
                    <param name="listener"> The asynchronous exception listener to be added </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the listener is Null of if already has a listener registered </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.addConnectionQueueListener(com.pcbsys.nirvana.client.nConnectionQueueListener,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
                   
                    <summary> Adds a new connection queue listener, which will be notified when
                    the internal outbound queue reaches defined limits, such as
                    <p/>
                    Reaching high water mark
                    Reaching low water mark
                    Exceeding the time it should take to access the queue object
                    Exceeding the time it should take to push an event onto the queue
                    Exceeding the time for a queue to be blocked due to reaching its high water mark
                    </summary>
                    <param name="listener"> The asynchronous exception listener to be added </param>
                    <param name="hwm">      true to receive notifications of reaching queue high water mark </param>
                    <param name="lwm">      true to receive notifications of reaching queue low water mark </param>
                    <param name="access">   true to receive notification of exceeding queue access time </param>
                    <param name="push">     true to receive notification of exceeding queue access and push time </param>
                    <param name="block">    true to receive notification of exceeding queue block time </param>
                    <param name="unblock">  </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the listener is Null of if already has a listener registered </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.removeConnectionQueueListener(com.pcbsys.nirvana.client.nConnectionQueueListener)">
                   
                    <summary> Removes an already added connection queue listener, which will not
                    be notified of queue state changes anymore.
                    </summary>
                    <param name="listener"> The asynchronous exception listener to be added </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the listener is Null of if no listener registered </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.close">
                   
                    <summary> Closes this session, disconnecting from the server and killing all threads </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.mainClose">
                   
                    <summary> Closes this session, disconnecting from the server and killing all threads </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.unblockThread(System.String)">
                   
                    <summary> Unblocks the thread of the given name that my be in a synchronous call.
                    </summary>
                    <param name="name"> the name of the thread </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getServerTransactionTTL">
                   
                    <summary> Gets the server transaction TTL value
                    </summary>
                    <returns> a long specifying the server's transaction TTL value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getNextTXId">
                   
                    <summary> Gets the next Transaction ID value
                    </summary>
                    <returns> a long specifying the next transaction ID value </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.getRealmFromCache(System.String)">
                   
                    <summary> Returns a cached realm object if found in the cache, null otherwise
                    </summary>
                    <param name="name"> A string specifying the name of the realm to be returned </param>
                    <returns> an nRealm object representing the previously cached realm </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.handleSynchronousEvents(com.pcbsys.nirvana.nbase.events.nSynchronous)">
                   
                    <summary> Handles a synchronous event received from the server
                    </summary>
                    <param name="evt"> The synchronous event to be handled </param>
                    <returns> true if the event was handled, false if it was not. </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.handleTimeOutUpdate(com.pcbsys.nirvana.nbase.events.nTimeOutUpdate)">
                   
                    <summary> Handles a timeout update event received from the server
                    </summary>
                    <param name="update">  </param>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.establishConnection">
                   
                    <summary> 
                    </summary>
                    <returns>  </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nRealmUnreachableException">  </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.reconnectToServer">
                   
                    <summary>  </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.requestHandshake(System.Boolean)">
                   
                    <summary> Requests and handles a handshake with the server, obtaining values
                    <p/>
                    for the server half of the transaction id and the server transaction TTL
                    value
                    </summary>
                    <exception cref="T:System.Exception">  </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.handleRedirect(com.pcbsys.nirvana.nbase.nRealm)">
                   
                    <summary> Handles a redirect to a different realm than the one connected to
                    </summary>
                    <param name="nr"> the different realm the redirection points to </param>
                    <returns> a new nSession object representing a connection to that other
                            realm </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.CompareTo(System.Object)">
            <summary>
            Compares this instance with a specified session object and indicates
            whether this instance precedes, follows, or appears in the same position
            in the sort order as the specified object
            </summary>
            <param name="obj">Session object to compare with</param>
            <returns>
            A integer that indicates whether this instance precedes, follows,
            or appears in the same position in the sort order as the value parameter.
            Value Condition Less than zero - This instance precedes obj.
            Zero This instance has the same position in the sort order as obj.
            Greater than zero This instance follows obj.-or- obj is null.
            </returns>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSession.nRequestResponseContainer">
                   
                    <summary> This class is a container for a client-realm request response process </summary>
                    
        </member>
        <member name="F:com.pcbsys.nirvana.client.nSession.nRequestResponseContainer.myId">
                       
                        <summary> The request ID </summary>
                        
        </member>
        <member name="F:com.pcbsys.nirvana.client.nSession.nRequestResponseContainer.myReq">
                       
                        <summary> The synchronous request </summary>
                        
        </member>
        <member name="F:com.pcbsys.nirvana.client.nSession.nRequestResponseContainer.myRes">
                       
                        <summary> The response </summary>
                        
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.nRequestResponseContainer.getRequest">
                       
                        <summary> Gets the request associated with this request-response container
                        </summary>
                        <returns> an nSychronous object specifying the request </returns>
                        
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.nRequestResponseContainer.setRequest(com.pcbsys.nirvana.nbase.events.nSynchronous)">
                       
                        <summary> Sets the request associated with this request-response container
                        </summary>
                        <param name="usr"> an nSychronous object specifying the request </param>
                        
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.nRequestResponseContainer.setResponse(com.pcbsys.nirvana.nbase.events.nEvent)">
                       
                        <summary> Sets the response associated with this request-response container
                        </summary>
                        <param name="evt"> an nEvent object specifying the response </param>
                        
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.nRequestResponseContainer.getResponse">
                       
                        <summary> Gets the response associated with this request-response container
                        </summary>
                        <returns> an nEvent object specifying the response, if that has been
                        *         received, null otherwise </returns>
                        
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.nRequestResponseContainer.getId">
                       
                        <summary> Gets the id of this request-response container
                        </summary>
                        <returns> an int value specifying the id of the request-response container </returns>
                        
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSession.RunLoop.run">
                       
                        <summary> The session's thread runloop </summary>
                        
        </member>
        <member name="T:com.pcbsys.nirvana.client.nDataGroupPumpImpl">
            <summary>
            This class is for internal use only
            </summary>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupPumpImpl.#ctor(com.pcbsys.nirvana.client.nSession)">
            <summary>
            This method is for internal use only
            </summary>
            <param name="sess"></param>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nDataGroupPumpImpl.execute(System.Object)">
            <summary>
            This method is for internal use only
            </summary>
            <param name="evt"></param>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nMulticastReceiver">
            <summary>
            This class is for internal use only
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSessionAttributes">
               
                <summary> This class is a container for the attributes necessary to create a Nirvana session. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionAttributes.#ctor(System.String)">
                   
                   <summary> Constructs an nSessionAttributes object with the string URL specified.
                   </summary>
                   <param name="url"> A string in the form protocol://host:port
                   e.g. nsp://127.0.0.1:9000
                   Protocol can be one of nsp, nhp, nsps, nhps
                   </param>
                   <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the url is invalid </exception>
                   
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionAttributes.#ctor(System.String,System.Int64)">
                   
                    <summary> Constructs an nSessionAttributes object with the string URL specified and
                    retry count for initial connection attempts.
                    </summary>
                    <param name="url"> A string in the form protocol://host:port
                    e.g. nsp://127.0.0.1:9000
                    Protocol can be one of nsp, nhp, nsps, nhps </param>
                    <param name="initialConnectionRetry"> A long specfiying amount of times to retry
                    for inital connection
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the url is invalid </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionAttributes.#ctor(System.String[])">
                   
                    <summary> Constructs an nSessionAttributes object with the collection of string URLs specified.
                    </summary>
                    <param name="urls"> A string[], containing strings in the form protocol://host:port
                    e.g. nsp://127.0.0.1:9000
                    Protocol can be one of nsp, nhp, nsps, nhps
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the url is invalid </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionAttributes.#ctor(System.String[],System.Int64)">
                   
                    <summary> Constructs an nSessionAttributes object with the collection of string URLs specified.
                    </summary>
                    <param name="urls"> A string[], containing strings in the form protocol://host:port
                    e.g. nsp://127.0.0.1:9000
                    Protocol can be one of nsp, nhp, nsps, nhps </param>
                    <param name="initialConnectionRetry"> A long specfiying amount of times to retry
                    for inital connection
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the url is invalid </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionAttributes.getInitialConnectionRetryCount">
                   
                    <summary> Gets the inital connection retry count
                    </summary>
                    <returns> a long specifying the number of retry attempts for establishing initial connection </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionAttributes.getNumberOfConnections">
                   
                    <summary> Returns the number of protocols used by this nSession
                    </summary>
                    <returns> Number of rnames used by this nSession </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionAttributes.getConnectionDetail(System.Int32)">
                   
                    <summary> Returns the rname indexed by idx. These where passed in when the initial nSession was
                    created
                    </summary>
                    <param name="idx"> the index of the connection details to return </param>
                    <returns> String RNAME value </returns>
                    <exception cref="T:System.Exception"> If the index is out of bounds </exception>
                    
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSessionAttributes.setSASLMechPrefs(com.pcbsys.nirvana.client.nSASLMechanism[])" -->
        <member name="P:com.pcbsys.nirvana.client.nSessionAttributes.RequestPriorityConnection">
            <summary>
            Accessor methods for the property which requests a priority connection to the server.
            If this is true, sessions started with these session attributes will request their 
            connection be a priority connection.
            </summary>
        </member>
        <member name="P:com.pcbsys.nirvana.client.nSessionAttributes.RequestUnthrottledConnection">
            <summary>
            Accessor methods for the property which requests an unthrottled connection to the server.
            If this is true, sessions started with these session attributes will			 
            request that the server not throttle this connection when the available memory on 		
            the server is low.
            This is only necessary if the server has the EnableFlowControl config item set to true and the session has publishes to the server.
            Otherwise the connection will not be throttled regardless.
            </summary>
        </member>
        <member name="T:com.pcbsys.nirvana.client.nSessionFactory">
               
                <summary> This class is used with a nSessionAttributes object to create a Nirvana session. </summary>
                
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.setupEnv">
                   
                    <summary> The collection of sessions that have been created by the session factory </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.create(com.pcbsys.nirvana.client.nSessionAttributes,com.pcbsys.nirvana.client.nReconnectHandler,System.String)">
                   
                    <summary> Creates an nSession object (Nirvana session) based on the nSessionAttributes object and
                    the specified reconnect handler.
                    </summary>
                    <param name="attr"> The nSessionAttributes object containing the parameters for the session to be created </param>
                    <param name="handler"> A nReconnectHandler to use if the connection to the Server is lost </param>
                    <param name="username"> The user name to be used by this session to authenticate </param>
                    <returns> the newly created nSession object
                    </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the nSessionAttributes is invalid
                    </exception>
                    <see cref="T:com.pcbsys.nirvana.client.nReconnectHandler"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.create(com.pcbsys.nirvana.client.nSessionAttributes,System.String)">
                   
                    <summary> Creates an nSession object (Nirvana session) based on the nSessionAttributes object and
                    supplied credentials
                    </summary>
                    <param name="attr"> The nSessionAttributes object containing the parameters for the session to be created </param>
                    <param name="username"> The user name to be used by this session to authenticate </param>
                    <returns> the newly created nSession object
                    </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the nSessionAttributes is invalid or the username </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.create(com.pcbsys.nirvana.client.nSessionAttributes,com.pcbsys.nirvana.client.nReconnectHandler,System.String,System.Security.SecureString)">
                   
                    <summary> Creates an nSession object (Nirvana session) based on the nSessionAttributes object and
                    the specified reconnect handler.
                    </summary>
                    <param name="attr"> The nSessionAttributes object containing the parameters for the session to be created </param>
                    <param name="handler"> A nReconnectHandler to use if the connection to the Server is lost </param>
                    <param name="username"> The user name to be used by this session to authenticate </param>
                    <param name="password"> The password to be used by this session to authenticate </param>
                    <returns> the newly created nSession object
                    </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the nSessionAttributes is invalid
                    </exception>
                    <see cref="T:com.pcbsys.nirvana.client.nReconnectHandler"/>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.create(com.pcbsys.nirvana.client.nSessionAttributes,System.String,System.Security.SecureString)">
                   
                    <summary> Creates an nSession object (Nirvana session) based on the nSessionAttributes object and
                    supplied credentials
                    </summary>
                    <param name="attr"> The nSessionAttributes object containing the parameters for the session to be created </param>
                    <param name="username"> The user name to be used by this session to authenticate </param>
                    <param name="password"> The password to be used by this session to authenticate </param>
                    <returns> the newly created nSession object
                    </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the nSessionAttributes is invalid or the username </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.create(com.pcbsys.nirvana.client.nSessionAttributes,System.Net.NetworkCredential)">
                   
                    <summary> Creates an nSession object (Nirvana session) based on the nSessionAttributes object and
                    supplied credentials
                    </summary>
                    <param name="attr"> The nSessionAttributes object containing the parameters for the session to be created </param>
                    <param name="creds"> The credentials to be used by this session to authenticate </param>
                    <returns> the newly created nSession object
                    </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the nSessionAttributes is invalid or the username </exception>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.create(com.pcbsys.nirvana.client.nSessionAttributes,com.pcbsys.nirvana.client.nReconnectHandler,System.Net.NetworkCredential)">
                   
                    <summary> Creates an nSession object (Nirvana session) based on the nSessionAttributes object and
                    the specified reconnect handler.
                    </summary>
                    <param name="attr"> The nSessionAttributes object containing the parameters for the session to be created </param>
                    <param name="handler"> A nReconnectHandler to use if the connection to the Server is lost </param>
                    <param name="creds"> The credential to be used by this session to authenticate </param>
                    <returns> the newly created nSession object
                    </returns>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the nSessionAttributes is invalid
                    </exception>
                    <see cref="T:com.pcbsys.nirvana.client.nReconnectHandler"/>
                    
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.client.nSessionFactory.createMultiplexed(com.pcbsys.nirvana.client.nSession,System.Net.NetworkCredential)" -->
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.createMultiplexed(com.pcbsys.nirvana.client.nSession,System.String)">
            
                      <summary>Creation of multiplexed session is not supported in C#/C++ API. A standard session is created instead
                      based on the nSessionAttributes object contained in the passed session and the supplied username
                      </summary>
                      <param name="session">This session attributes will be used to create new standard session</param>
                      <param name="newUsername">The user name to be used by this session to authenticate</param>
                      <returns>new standard session</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.createMultiplexed(com.pcbsys.nirvana.client.nSession,System.String,System.Security.SecureString)">
            
                       <summary>
                       Creation of multiplexed session is not supported in C#/C++ API. A standard session is created instead
                       based on the nSessionAttributes object contained in the passed session and supplied username and password
                       </summary>
                       <param name="session">This session attributes will be used to create new standard session</param>
                       <param name="newUsername">The user name to be used by this session to authenticate</param>
                       <param name="newPassword">The password to be used by this session to authenticate</param>
                       <returns>new standard session</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.createMultiplexed(com.pcbsys.nirvana.client.nSessionAttributes,System.String)">
            
                     <summary>        
                     Creation of multiplexed session is not supported in C#/C++ API. A standard session is created instead
                     based on the nSessionAttributes object and supplied username
                     </summary>
                     <param name="sessionAttributes">The nSessionAttributes object containing the parameters for the session to be created</param>
                     <param name="userName">The user name to be used by this session to authenticate</param>
                     <returns> new standard session</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.createMultiplexed(com.pcbsys.nirvana.client.nSessionAttributes,System.String,System.Security.SecureString)">
                      <summary>
                      Creation of multiplexed session is not supported in C#/C++ API. A standard session is created instead
                      based on the nSessionAttributes object and supplied username and password
                      </summary>
                      <param name="sessionAttributes">The nSessionAttributes object containing the parameters for the session to be created</param>
                      <param name="userName">The user name to be used by this session to authenticate</param>
                      <param name="password">The password to be used by this session to authenticate</param>
                      <returns> new standard session</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.createMultiplexed(com.pcbsys.nirvana.client.nSessionAttributes,System.Net.NetworkCredential)">
                      <summary>
                      Creation of multiplexed session is not supported in C#/C++ API. A standard session is created instead
                      based on the nSessionAttributes object and supplied credentials
                      </summary>
                      <param name="sessionAttributes">The nSessionAttributes object containing the parameters for the session to be created</param>
                      <param name="creds"> The credentials to be used by this session to authenticate </param>
                      <returns> new standard session</returns>
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.close(com.pcbsys.nirvana.client.nSession)">
                   
                    <summary> Closes a Nirvana session
                    </summary>
                    <param name="session"> The nSession object to be closed
                    </param>
                    <exception cref="T:com.pcbsys.nirvana.client.nIllegalArgumentException"> if the nSession is invalid </exception>
                   
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.shutdown">
                   
                    <summary> Shuts down the session factory by closing all nirvana sessions that have
                    been created
                    </summary>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.client.nSessionFactory.getNoVended">
                   
                    <summary> Gets the number of nirvana sessions vended
                    </summary>
                    <returns> an int specifying the number of nirvana sessions vended with this
                    session factory </returns>
                    
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nSecureChannel.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>Writes the object to an external Event OutputStream
              </summary>
             <param name="oos"> An event outputstream containing the externalised object </param>
             <exception cref="T:System.Exception"> is thrown if an IO error occurs while writing to the stream </exception>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.nSecureRealm">
            
             <summary>This class represents a nirvana Realm </summary>
             
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.nSecureRealm.REALM_ADMIN">
            
               <summary>The class version string </summary>
               
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.nSecureRealm.ACL_NAMES">
             
              <summary>Definition of the ACL Names </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.nSecureRealm.ACL_DESCRIPTIONS">
             
              <summary>Definition of the ACL Descriptions </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.nSecureRealm.myConnections">
             
              <summary>The collection of connections to this realm </summary>
              
        </member>
        <member name="F:com.pcbsys.nirvana.nbase.nSecureRealm.name">
             
              <summary>The realm name attibute </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.#ctor">
             
              <summary>Default constructor </summary>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.#ctor(System.String,System.String[])">
             
              <summary>Constructs a new nRealm object with the specified name and collection of network interfaces
              </summary>
             <param name="pName"> A string specifying the realm's name </param>
             <param name="connections"> An array of strings specifying the realm's network interfaces.
             These have to be in the form: protocol://host:port/servlet File , where:
              *
             Protocol can be one of nsp, nhp, nsps, nhps where:
              *
             nsp => Nirvana Socket Protocol
             nhp => Nirvana HTTP Protocol
             nsps => Nirvana Socket Protocol Secure (Socket protocol over SSL/TLS)
             nhps => Nirvana HTTP Protocol Secure (HTTP protocol over SSL/TLS)
              *
             Host is the host the realm is running on
              *
             Port is the port the realm is listening on
              *
             servlet File specifies the location that servlets are mapped if talking to
             the realm via a web server (e.g. in a DMZ environment) </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.#ctor(System.String,System.Collections.Generic.List{com.pcbsys.foundation.drivers.fConnectionDetails})">
             
              <summary>Constructs a new nRealm object with the specified name and collection of network interfaces
              </summary>
             <param name="pName"> A string specifying the realm's name </param>
             <param name="connections"> A vector of fConnectionDetails objects. These are created
             using strings specifying the realm's network interfaces.
             The strings have to be in the form: protocol://host:port/servlet File , where:
              *
             Protocol can be one of nsp, nhp, nsps, nhps where:
              *
             nsp => Nirvana Socket Protocol
             nhp => Nirvana HTTP Protocol
             nsps => Nirvana Socket Protocol Secure (Socket protocol over SSL/TLS)
             nhps => Nirvana HTTP Protocol Secure (HTTP protocol over SSL/TLS)
              *
             Host is the host the realm is running on
              *
             Port is the port the realm is listening on
              *
             servlet File specifies the location that servlets are mapped if talking to
             the realm via a web server (e.g. in a DMZ environment) </param>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.init">
             
              <summary>Initialises the class. It is called automatically so there is no need to call it. </summary>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nSecureRealm.getHostVal" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nSecureRealm.getHTTPPortVal" -->
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nSecureRealm.getPortVal" -->
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.getConnections">
             
              <summary>Gets the collection of the network interfaces this realm listens in.
              </summary>
             <returns> A vector containing an fConnectionDetails object for each realm interface. </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.getMountPoint">
             
              <summary>Sets the name on this realm
              </summary>
              
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.pcbsys.nirvana.nbase.nSecureRealm.readExternal(com.pcbsys.foundation.io.fEventInputStream)" -->
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>Writes the object to an external Event OutputStream
              </summary>
             <param name="oos"> An event outputstream containing the externalised object </param>
             <exception cref="T:System.Exception"> is thrown if an IO error occurs while writing to the stream </exception>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.getACLNames">
             
              <summary>Returns the String[] containing all ACL names
              </summary>
             <returns> a String[] containing all ACL names </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.getACLDescriptions">
             
              <summary>Returns the String[] containing all ACL descriptions
              </summary>
             <returns> a String[] containing all ACL descriptions </returns>
              
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nSecureRealm.check(com.pcbsys.foundation.security.fSubject,System.Int64)">
             
              <summary>Checks if the specified subject has the specified permission
              </summary>
             <param name="subject"> the subject to check for </param>
             <param name="permission"> the permission to check for </param>
             <returns> a boolean specifying the result of the check </returns>
              
        </member>
        <member name="P:com.pcbsys.nirvana.nbase.nSecureRealm.Name">
             
              <summary>Gets the name of this realm
              </summary>
             <returns> A string specifying the name of this realm </returns>
              
        </member>
        <member name="T:com.pcbsys.nirvana.nbase.nServerStatus">
            
             <summary> </summary>
             
        </member>
        <member name="M:com.pcbsys.nirvana.nbase.nServerStatus.writeExternal(com.pcbsys.foundation.io.fEventOutputStream)">
             
              <summary>
              </summary>
             <param name="oos">  </param>
             <exception cref="T:System.Exception">  </exception>
              
        </member>
        <member name="M:com.pcbsys.foundation.collections.Queue`1.#ctor">
            Constructs the queue
        </member>
        <member name="M:com.pcbsys.foundation.collections.Queue`1.put(`0)">
             Places an object at the tail of the queue
            
             @param object The object to put into the queue
        </member>
        <member name="M:com.pcbsys.foundation.collections.Queue`1.pop">
             Pops the object from the queue
            
             @return The object at the top of the queue
        </member>
        <member name="M:com.pcbsys.foundation.collections.Queue`1.top">
             Returns the object without removing it from the queue
            
             @return Object The object at the top of the queue
        </member>
        <member name="M:com.pcbsys.foundation.collections.Queue`1.size">
             The size of the queue
            
             @return The size of the queue
        </member>
    </members>
</doc>
